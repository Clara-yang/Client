<?xml version="1.0"?>
<doc>
    <assembly>
        "Csf.Imets.ToolCore.Apex"
    </assembly>
    <members>
        <member name="T:Csf.Imets.ToolCore.Apex.Ig.IgInfo">
            <summary>
 The IgInfo class is a wrapper to the Csf::Ig::IgInfo class.
 Which provides information about IgModels
</summary>
        </member>
        <member name="P:Csf.Imets.ToolCore.Vdn.VdnBlock.Value">
            <summary>
Gets or sets the value of the VdnBlock.
Note: This call requires copying all the data everytime. 
</summary>
        </member>
        <member name="M:Csf.Imets.ToolCore.Vdn.VdnBlock.#ctor(System.UInt32)">
            <summary>
Constructor
</summary>
            <param name="size">The number of bytes stored in the block.</param>
        </member>
        <member name="P:Csf.Imets.ToolCore.Vdn.Avionics.VdnA429Label.default(System.UInt32)">
            <summary>
Indexer Property for accessing bits directly
</summary>
        </member>
        <member name="P:Csf.Imets.ToolCore.Vdn.Avionics.A429Word.default(System.UInt32)">
            <summary>
Indexer Property for accessing bits directly
</summary>
        </member>
        <member name="F:Csf.Utils.Nav.NavUpdateClass.m_fileOutputValid">
Output file is valid 
</member>
        <member name="F:Csf.Utils.Nav.NavUpdateClass.m_outputFile">
Log file stream 
</member>
        <member name="F:Csf.Utils.Nav.NavUpdateClass.m_recordCountInfo">
Stores the size of each table. Used when displaying statistics at the end of
            * the Nav Update (i.e. nav_comm table wne from 1000 records to 2000 records, etc.)
            * The first parameter is the name of the db table.

</member>
        <member name="F:Csf.Utils.Nav.NavUpdateClass.m_tables">
Allows current dbtables to be saved in case they need to be restored during a failure. 
</member>
        <member name="F:Csf.Utils.Nav.NavUpdateClass.Tables.m_table">
Array to store all the db tables so they can be restored (if needed). 
</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.Tables.size">
Returns the size of the table.
               * @return The size of the table.

</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.Tables.op_Subscript(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded [] operator to allow convenient access. 
               * @return The selected table.
               * @param i The index of the table to return.

</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.Tables.#ctor">
ctor. 
</member>
        <member name="T:Csf.Utils.Nav.NavUpdateClass.Tables">
Used to save/restore the db tables. 
</member>
        <member name="F:Csf.Utils.Nav.NavUpdateClass.TableKey.key">
The table key. 
</member>
        <member name="F:Csf.Utils.Nav.NavUpdateClass.TableKey.name">
The table name. 
</member>
        <member name="T:Csf.Utils.Nav.NavUpdateClass.TableKey">
Structure to store the table name and table key. 
</member>
        <member name="F:Csf.Utils.Nav.NavUpdateClass.RecordCountInfo.m_restoredEntryCount">
Restored number of entries in the Nav table 
</member>
        <member name="F:Csf.Utils.Nav.NavUpdateClass.RecordCountInfo.m_newEntryCount">
New number of entries in the Nav table 
</member>
        <member name="F:Csf.Utils.Nav.NavUpdateClass.RecordCountInfo.m_origEntryCount">
Original number of entries in the Nav table 
</member>
        <member name="T:Csf.Utils.Nav.NavUpdateClass.RecordCountInfo">
Keep Nav Table stat data for verification 
</member>
        <member name="F:Csf.Utils.Nav.NavUpdateClass.m_unprocessedRecords">
A collection of all the records that could not be processed. 
</member>
        <member name="F:Csf.Utils.Nav.NavUpdateClass.m_interactive">
If true, this will allow you to accept/reject changes during the NavUpdate. 
</member>
        <member name="F:Csf.Utils.Nav.NavUpdateClass.m_totalRecordsCount">
The total number of records that need to be processed. 
</member>
        <member name="F:Csf.Utils.Nav.NavUpdateClass.m_totalRecordsProcessed">
The total number of records that have been processed. 
</member>
        <member name="F:Csf.Utils.Nav.NavUpdateClass.s_recSize">
The line length of a 424 data record. 
</member>
        <member name="F:Csf.Utils.Nav.NavUpdateClass.m_buff2">
Temp buffer to store a line of data from the specified input source. 
</member>
        <member name="F:Csf.Utils.Nav.NavUpdateClass.m_buff1">
Temp buffer to store a line of data from the specified input source. 
</member>
        <member name="F:Csf.Utils.Nav.NavUpdateClass.m_user">
Username performing the update. 
</member>
        <member name="F:Csf.Utils.Nav.NavUpdateClass.m_ifs">
Used for reading the data files. 
</member>
        <member name="F:Csf.Utils.Nav.NavUpdateClass.m_file424">
Arinc 424 file name. 
</member>
        <member name="F:Csf.Utils.Nav.NavUpdateClass.m_db">
Database connection object. 
</member>
        <member name="F:Csf.Utils.Nav.NavUpdateClass.m_dbInfo">
Database connection info. (i.e. hostname, db name, etc. 
</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.log(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Logs message to screen and to the console if desired a std::endl will be appended to each message 
</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.verifyPrimaryRecord(Csf.Osal.String,System.UInt32)">
Verifies the line is actually a primary record.
            * @return True if the record is the primary record.
            * @param line The record line to check.
            * @param continuationIndex the column location of the continuation (0-based).

</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.checkForContinuationRecord(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsConst,Csf.Osal.String!System.Runtime.CompilerServices.IsConst)">
This method checks the next line of input to see if its a continuation record. 
If the next line is a continuation record of the specified type, it will be returned. 
If the next line is a continuation record, but not the specified type, it will be cleared. 
If the next line is not a continuation record, the file pointer will be reset so this line can be reprocessed. 
@return The next line of input from the text file if it is of the specified type, blank otherwise.
@param line The current line of input from the 424 data file.
@param continuationIndex The index location that contains the Continuation Record Number.
Keep in mind that this index is 0-based, whereas the 424 spec is 1-based.
@param continuationApplType The continuation record application type to search for. (e.g "S" for simulation records).

</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.processingComplete">
This will get called when the parsing of all record data is complete, but before any 
            * adjustments are made to the Nav tables.

</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.processUnhandledRecord(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Called when the current line of data contains a record that is not being handled. 
            * This is used when an end-user overrides the default processing by creating a derived class.
            * @return True if the record is processed.
            * @param line The current line of data being processed.

</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.processEnrouteCommRecord(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Called when the current line of data contains an Enroute Comm record (EV). 
            * @param line The current line of data being processed.

</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.processAirportCommRecord(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Called when the current line of data contains an Airport Comm record (PV). 
            * @param line The current line of data being processed.

</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.processEnrouteAirwaysRecord(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Called when the current line of data contains a Enroute Airways record (ER). 
            * @param line The current line of data being processed.

</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.processVhfNavaidRecord(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Called when the current line of data contains a VHF Navaid record (D). 
            * @param line The current line of data being processed.

</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.processNavIlsRecord(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Called when the current line of data contains a Nav ILS record (PI). 
            * @param line The current line of data being processed.

</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.processPathPointRecord(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Called when the current line of data contains a Path Point record (PP). 
            * @param line The current line of data being processed.

</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.processAirwayMarkersRecord(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Called when the current line of data contains an Airway Marker record (EM). 
            * @param line The current line of data being processed.

</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.processLocalizerRecord(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Called when the current line of data contains a Localizer record (PM). 
            * @param line The current line of data being processed.

</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.processRunwayRecord(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Called when the current line of data contains a Runway record (PG). 
            * @param line The current line of data being processed.

</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.processAirportRecord(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Called when the current line of data contains a Airport record (PA). 
            * @param line The current line of data being processed.

</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.processNdbNavaidRecord(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Called when the current line of data contains a NDB Navaid record (DB / PN). 
            * @param line The current line of data being processed.

</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.processWaypointRecord(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Called when the current line of data contains a waypoint record (EA / PC). 
            * @param line The current line of data being processed.

</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.processLine(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Parses a line at a time from the 424 data file to determine which records exist. 
            * @param l The current line of data being processed.

</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.readDataFile">
Manages the file input from 424 data source. 
</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.displayUnprocessedRecords">
Used during debugging to display a list (and occurrance count) of all unprocessed records. 
</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.setDataFile(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Sets the name of the 424 file.
            * This is ONLY required when manually processing each method (as done on the IA).
            * @param dataFile The name of the 424 file.

</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.getPercentComplete">
Provides the current file processing status.
            * @return A value between 0 and 100 indicating percent complete.

</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.performTableBackups">
Makes a backup of all the 'nav_' tables so they can be restored in the case of a failure. 
</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.performVisualAlignment">
Performs the Visual Alignment process. 
</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.performNavUpdate(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Performs the Nav Update process. 
</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.initializeLogFile">
Sets up file I/O. 
</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.updateRecord(Csf.Utils.Nav.NavUpdateClass.UpdateType)">
At the completion of an update, this method must be called to log an update message. 
            * @param type The type of update being performed. 

</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.postProcessing">
Completes post processing for the update (applicable to both visual alignment only and full updates.) 
</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.alignWithVisual">
Performs a visual alignment of existing nav data. 
</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.updateIlsRwyTdLocations">
Updates the runway Touchdown locations for runways with ILS facilities. 
</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.updateGlsRwyTdLocations">
Updates the runway Touchdown locations for runways with GLS facilities. 
</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.updateRwyTdLocations">
Updates the runway Touchdown locations. 
</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.updateRwyRecords">
Updates the runway headings based using opposite end position. 
</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.processManuallyModifiedRecords">
Processes manually modified records. 
</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.processReservedRecords">
Processes reserved records. 
</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.displayStats">
Displays database update statistics. 
</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.restoreTables">
Should be called in the event of a failure in the full update. 
</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.readNextRecords(System.Int64)">
Reads the next number of specified records for Jepp and returns the number of records read. 
            * This method is designed to read in a portion of the records each time so that progress can
            * be provided to the user.
            * @return The number of 424 records that were read.
            * @param numRecordsToRead The number of records to process during this pass.

</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.startReadRecords">
Initializes the reading record process for Jepp and returns the approximate number of records to be read. 
            * @return The number of 424 records contained in the specified data file.

</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.Dispose">
Dtor. 
</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.#ctor(Csf.Utils.Database.ConnectionInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
ctor. 
            * These are the following anticipated uses:
            *  1. Used from the Host (i.e. SimCmd)
            *       In this case, a NavUpdateClass object is created and used:
            *          NavUpdateClass nav(dbInfo);
            *          nav.performNavUpdate(dataFilename);
            *       OR
            *          NavUpdateClass nav(dbInfo);
            *          nav.performVisualAlignment(dataFilename);
            *  2. Used from the ToolSuite (i.e. VNA)
            *       In this case, the tool can be used in EXACTLY the same way as
            *          with the host as shown above
            *       OR
            *          Each method can be called individually, but this requires the 
            *          file to be initialized with the setDataFile method prior to 
            *          calling the readDataFile method.
            *
            * @param dbInfo The db connection info used to determine location and name of the db.
            * @param interactive If true, this will allow you to accept/reject changes during the NavUpdate.

</member>
        <member name="T:Csf.Utils.Nav.NavUpdateClass.UpdateType">
Indicated the type of update that is being performed. 
</member>
        <member name="M:Csf.Utils.Nav.NavUpdateClass.#ctor">
default ctor. Should not be used. 
</member>
        <member name="T:Csf.Utils.Nav.NavUpdateClass">
Performs import of 424 navigation data into db tables. 
</member>
        <member name="M:Csf.Utils.Nav.EvRecord.insert(Csf.Osal.Database.Connection*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Inserts the record into the specified database.
            * @param db The database that should store the record.
            * @param table The name of the database table.

</member>
        <member name="M:Csf.Utils.Nav.EvRecord.parse(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Initializes a EV record from and A424 formatted line. 
            * @return true upon success, else false.
            * @param line1 The line containing the primary record 
            * @param line2 The line containing the continuation record (if it exists), blank otherwise.

</member>
        <member name="M:Csf.Utils.Nav.EvRecord.#ctor">
Ctor. 
</member>
        <member name="F:Csf.Utils.Nav.EvRecord.m_narrative">
Narrative. 
</member>
        <member name="F:Csf.Utils.Nav.EvRecord.m_modulation">
Modulation. 
</member>
        <member name="F:Csf.Utils.Nav.EvRecord.m_distance">
Distance. 
</member>
        <member name="F:Csf.Utils.Nav.EvRecord.m_distanceDescription">
Distance description. 
</member>
        <member name="F:Csf.Utils.Nav.EvRecord.m_icaoCode">
ICAO code. 
</member>
        <member name="F:Csf.Utils.Nav.EvRecord.m_elev">
Elevation. 
</member>
        <member name="F:Csf.Utils.Nav.EvRecord.m_remoteFacility">
Remote facility. 
</member>
        <member name="F:Csf.Utils.Nav.EvRecord.m_magVar">
Magnetic variation. 
</member>
        <member name="F:Csf.Utils.Nav.EvRecord.m_callSign">
Callsign . 
</member>
        <member name="F:Csf.Utils.Nav.EvRecord.m_sectorFacility">
Sector facility. 
</member>
        <member name="F:Csf.Utils.Nav.EvRecord.m_ident">
Airport ident(PV) fir / rdo ident(EV). 
</member>
        <member name="F:Csf.Utils.Nav.EvRecord.m_commType">
Comm type. 
</member>
        <member name="F:Csf.Utils.Nav.EvRecord.m_freq">
Frequency. 
</member>
        <member name="F:Csf.Utils.Nav.EvRecord.m_lon">
Longitude. 
</member>
        <member name="F:Csf.Utils.Nav.EvRecord.m_lat">
Latitude. 
</member>
        <member name="T:Csf.Utils.Nav.EvRecord">
424 EV enroute comm record 
</member>
        <member name="M:Csf.Utils.Nav.PvRecord.insert(Csf.Osal.Database.Connection*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Inserts the record into the specified database.
            * @param db The database that should store the record.
            * @param table The name of the database table.

</member>
        <member name="M:Csf.Utils.Nav.PvRecord.parse(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Initializes a PM record from and A424 formatted line. 
            * @return true upon success, else false.
            * @param line1 The line containing the primary record 
            * @param line2 The line containing the continuation record (if it exists), blank otherwise.

</member>
        <member name="M:Csf.Utils.Nav.PvRecord.#ctor">
Ctor. 
</member>
        <member name="F:Csf.Utils.Nav.PvRecord.m_narrative">
Narrative. 
</member>
        <member name="F:Csf.Utils.Nav.PvRecord.m_modulation">
Modulation. 
</member>
        <member name="F:Csf.Utils.Nav.PvRecord.m_distance">
Distance. 
</member>
        <member name="F:Csf.Utils.Nav.PvRecord.m_distanceDescription">
Distance description. 
</member>
        <member name="F:Csf.Utils.Nav.PvRecord.m_icaoCode">
ICAO code. 
</member>
        <member name="F:Csf.Utils.Nav.PvRecord.m_elev">
Elevation. 
</member>
        <member name="F:Csf.Utils.Nav.PvRecord.m_remoteFacility">
Remote facility. 
</member>
        <member name="F:Csf.Utils.Nav.PvRecord.m_magVar">
Magnetic variation. 
</member>
        <member name="F:Csf.Utils.Nav.PvRecord.m_callSign">
Call sign. 
</member>
        <member name="F:Csf.Utils.Nav.PvRecord.m_sectorFacility">
Sector facility. 
</member>
        <member name="F:Csf.Utils.Nav.PvRecord.m_ident">
Airport ident (PV) fir/rdo ident (EV). 
</member>
        <member name="F:Csf.Utils.Nav.PvRecord.m_commType">
Comm type. 
</member>
        <member name="F:Csf.Utils.Nav.PvRecord.m_freq">
Frequency. 
</member>
        <member name="F:Csf.Utils.Nav.PvRecord.m_lon">
Longitude. 
</member>
        <member name="F:Csf.Utils.Nav.PvRecord.m_lat">
Latitude. 
</member>
        <member name="T:Csf.Utils.Nav.PvRecord">
424 PV Record  
</member>
        <member name="M:Csf.Utils.Nav.DbRecord.insert(Csf.Osal.Database.Connection*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Inserts the record into the specified database.
            * @param db The database that should store the record.
            * @param table The name of the database table.

</member>
        <member name="M:Csf.Utils.Nav.DbRecord.parse(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Initializes a DB record from and A424 formatted line. 
            * @return true upon success, else false.
            * @param line1 The line containing the primary record 
            * @param line2 The line containing the continuation record (if it exists), blank otherwise.

</member>
        <member name="M:Csf.Utils.Nav.DbRecord.#ctor">
Ctor. 
</member>
        <member name="F:Csf.Utils.Nav.DbRecord.m_magVar">
Magnetic variation. 
</member>
        <member name="F:Csf.Utils.Nav.DbRecord.m_elev">
Elevation. 
</member>
        <member name="F:Csf.Utils.Nav.DbRecord.m_facChar">
Facility characteristics. 
</member>
        <member name="F:Csf.Utils.Nav.DbRecord.m_freq">
Frequency. 
</member>
        <member name="F:Csf.Utils.Nav.DbRecord.m_lon">
Longitude. 
</member>
        <member name="F:Csf.Utils.Nav.DbRecord.m_lat">
Latitude. 
</member>
        <member name="F:Csf.Utils.Nav.DbRecord.m_icao">
ICAO. 
</member>
        <member name="F:Csf.Utils.Nav.DbRecord.m_name">
Name. 
</member>
        <member name="F:Csf.Utils.Nav.DbRecord.m_type">
NDB class. 
</member>
        <member name="F:Csf.Utils.Nav.DbRecord.m_ident">
Ident. 
</member>
        <member name="F:Csf.Utils.Nav.DbRecord.m_airfield">
Airport ICAO. 
</member>
        <member name="T:Csf.Utils.Nav.DbRecord">
424 NDB navaid (DB and PN record types) 
</member>
        <member name="M:Csf.Utils.Nav.ErRecord.insert(Csf.Osal.Database.Connection*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Inserts the record into the specified database.
            * @param db The database that should store the record.
            * @param table The name of the database table.

</member>
        <member name="M:Csf.Utils.Nav.ErRecord.parse(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Initializes a ER record from and A424 formatted line. 
            * @return true upon success, else false.
            * @param line1 The line containing the primary record 
            * @param line2 The line containing the continuation record (if it exists), blank otherwise.

</member>
        <member name="M:Csf.Utils.Nav.ErRecord.#ctor">
Ctor. 
</member>
        <member name="F:Csf.Utils.Nav.ErRecord.m_imc">
IMC. 
</member>
        <member name="F:Csf.Utils.Nav.ErRecord.m_rdf">
RDF. 
</member>
        <member name="F:Csf.Utils.Nav.ErRecord.m_omc">
OMC. 
</member>
        <member name="F:Csf.Utils.Nav.ErRecord.m_eui">
EUI. 
</member>
        <member name="F:Csf.Utils.Nav.ErRecord.m_cti">
CTI. 
</member>
        <member name="F:Csf.Utils.Nav.ErRecord.m_restriction">
Restriction. 
</member>
        <member name="F:Csf.Utils.Nav.ErRecord.m_level">
Level. 
</member>
        <member name="F:Csf.Utils.Nav.ErRecord.m_route">
Route. 
</member>
        <member name="F:Csf.Utils.Nav.ErRecord.m_boundary">
Boundary. 
</member>
        <member name="F:Csf.Utils.Nav.ErRecord.m_desc">
Description. 
</member>
        <member name="F:Csf.Utils.Nav.ErRecord.m_icao">
ICAO. 
</member>
        <member name="F:Csf.Utils.Nav.ErRecord.m_fixedIdent">
Fixed ident. 
</member>
        <member name="F:Csf.Utils.Nav.ErRecord.m_sequence">
Sequence. 
</member>
        <member name="F:Csf.Utils.Nav.ErRecord.m_ident">
Ident. 
</member>
        <member name="F:Csf.Utils.Nav.ErRecord.m_caCode">
CA code. 
</member>
        <member name="T:Csf.Utils.Nav.ErRecord">
424 ER Record 
</member>
        <member name="M:Csf.Utils.Nav.EaRecord.insert(Csf.Osal.Database.Connection*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Inserts the record into the specified database.
            * @param db The database that should store the record.
            * @param table The name of the database table.

</member>
        <member name="M:Csf.Utils.Nav.EaRecord.parse(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Initializes a EA record from and A424 formatted line. 
            * @return true upon success, else false.
            * @param line1 The line containing the primary record 
            * @param line2 The line containing the continuation record (if it exists), blank otherwise.

</member>
        <member name="M:Csf.Utils.Nav.EaRecord.#ctor">
Ctor. 
</member>
        <member name="F:Csf.Utils.Nav.EaRecord.m_wpIcaoCode">
Waypoint ICAO code. 
</member>
        <member name="F:Csf.Utils.Nav.EaRecord.m_magVar">
Magnetic variation. 
</member>
        <member name="F:Csf.Utils.Nav.EaRecord.m_wpLon">
Waypoint longitude. 
</member>
        <member name="F:Csf.Utils.Nav.EaRecord.m_wpLat">
Waypoint latitude. 
</member>
        <member name="F:Csf.Utils.Nav.EaRecord.m_wpRegion">
Waypoint region. 
</member>
        <member name="F:Csf.Utils.Nav.EaRecord.m_wpCACode">
Waypoint CA code. 
</member>
        <member name="F:Csf.Utils.Nav.EaRecord.m_wpId">
Waypoint id. 
</member>
        <member name="F:Csf.Utils.Nav.EaRecord.m_wpType">
Waypoint type. 
</member>
        <member name="F:Csf.Utils.Nav.EaRecord.m_wpUsage">
Waypoint usage. 
</member>
        <member name="F:Csf.Utils.Nav.EaRecord.m_wpDCode">
Waypoint D code. 
</member>
        <member name="F:Csf.Utils.Nav.EaRecord.m_wpName">
Waypoint name. 
</member>
        <member name="T:Csf.Utils.Nav.EaRecord">
424 Enroutes 
</member>
        <member name="M:Csf.Utils.Nav.DRecord.insert(Csf.Osal.Database.Connection*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Inserts the record into the specified database.
            * @param db The database that should store the record.
            * @param table The name of the database table.

</member>
        <member name="M:Csf.Utils.Nav.DRecord.parse(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Initializes a D record from and A424 formatted line. 
            * @return true upon success, else false.
            * @param line1 The line containing the primary record 
            * @param line2 The line containing the continuation record (if it exists), blank otherwise.

</member>
        <member name="M:Csf.Utils.Nav.DRecord.#ctor">
Ctor. 
</member>
        <member name="F:Csf.Utils.Nav.DRecord.m_magVar">
Magnetic variation. 
</member>
        <member name="F:Csf.Utils.Nav.DRecord.m_biased">
Biased. 
            * @note: not sure if this is needed; legacy looked at column 91??? for a 'B' ... not indicated in -18 spec

</member>
        <member name="F:Csf.Utils.Nav.DRecord.m_facilityElev">
Facility elevation. 
</member>
        <member name="F:Csf.Utils.Nav.DRecord.m_dmeBias">
DME bias. 
</member>
        <member name="F:Csf.Utils.Nav.DRecord.m_merit">
Merit. 
</member>
        <member name="F:Csf.Utils.Nav.DRecord.m_dmeElev">
DME elevation. 
</member>
        <member name="F:Csf.Utils.Nav.DRecord.m_declination">
Declination. 
</member>
        <member name="F:Csf.Utils.Nav.DRecord.m_dmeLon">
DME longitude. 
</member>
        <member name="F:Csf.Utils.Nav.DRecord.m_dmeLat">
DME latitude. 
</member>
        <member name="F:Csf.Utils.Nav.DRecord.m_dmeIdent">
DME ident. 
</member>
        <member name="F:Csf.Utils.Nav.DRecord.m_facChar">
Facility characteristics. 
</member>
        <member name="F:Csf.Utils.Nav.DRecord.m_vorFreq">
VOR frequency. 
</member>
        <member name="F:Csf.Utils.Nav.DRecord.m_vorLon">
VOR longitude. 
</member>
        <member name="F:Csf.Utils.Nav.DRecord.m_vorLat">
VOR latitude. 
</member>
        <member name="F:Csf.Utils.Nav.DRecord.m_icao">
ICAO. 
</member>
        <member name="F:Csf.Utils.Nav.DRecord.m_name">
Name. 
</member>
        <member name="F:Csf.Utils.Nav.DRecord.m_type">
VHF type. 
</member>
        <member name="F:Csf.Utils.Nav.DRecord.m_vorIdent">
VOR ident. 
</member>
        <member name="F:Csf.Utils.Nav.DRecord.m_airfield">
Airfield ICAO. 
</member>
        <member name="T:Csf.Utils.Nav.DRecord">
424 VHF Navaid 
</member>
        <member name="M:Csf.Utils.Nav.PtRecord.insert(Csf.Osal.Database.Connection*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Inserts the record into the specified database.
            * @param db The database that should store the record.
            * @param table The name of the database table.

</member>
        <member name="M:Csf.Utils.Nav.PtRecord.parse(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Initializes a PT record from an A424 formatted line. 
            * @return true upon success, else false.
            * @param line1 The line containing the primary record 
            * @param line2 The line containing the continuation record (if it exists), blank otherwise.

</member>
        <member name="M:Csf.Utils.Nav.PtRecord.#ctor">
Ctor. 
</member>
        <member name="F:Csf.Utils.Nav.PtRecord.m_magVar">
Magnetic variation. 
</member>
        <member name="F:Csf.Utils.Nav.PtRecord.m_magVarOrientation">
Magnetic varation orientation. 
</member>
        <member name="F:Csf.Utils.Nav.PtRecord.m_stationLon">
Station longitude. 
</member>
        <member name="F:Csf.Utils.Nav.PtRecord.m_stationLat">
Station latitude. 
</member>
        <member name="F:Csf.Utils.Nav.PtRecord.m_glsApproachBearingTenths">
GLS approach bearing tenths. 
</member>
        <member name="F:Csf.Utils.Nav.PtRecord.m_glsApproachBearing">
GLS approach bearing. 
</member>
        <member name="F:Csf.Utils.Nav.PtRecord.m_glsChannelNumber">
GLS channel number. 
</member>
        <member name="F:Csf.Utils.Nav.PtRecord.m_type">
GLS category. 
</member>
        <member name="F:Csf.Utils.Nav.PtRecord.m_ident">
GLS ref path ident. 
</member>
        <member name="F:Csf.Utils.Nav.PtRecord.m_runway">
Runway name (i.e 07R). 
</member>
        <member name="F:Csf.Utils.Nav.PtRecord.m_airfield">
Airport ICAO. 
</member>
        <member name="T:Csf.Utils.Nav.PtRecord">
424 PtRecord 
</member>
        <member name="M:Csf.Utils.Nav.PpRecord.insert(Csf.Osal.Database.Connection*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Inserts the record into the specified database.
            * @param db The database that should store the record.
            * @param table The name of the database table.

</member>
        <member name="M:Csf.Utils.Nav.PpRecord.parse(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Initializes a PP record from an A424 formatted line. 
            * @return true upon success, else false.
            * @param line1 The line containing the primary record 
            * @param line2 The line containing the continuation record (if it exists), blank otherwise.

</member>
        <member name="M:Csf.Utils.Nav.PpRecord.#ctor">
Ctor. 
</member>
        <member name="F:Csf.Utils.Nav.PpRecord.m_glsChannelNumber">
GLS channel number. 
</member>
        <member name="F:Csf.Utils.Nav.PpRecord.m_verticalAlertLimit">
Vertical alert limit. 
</member>
        <member name="F:Csf.Utils.Nav.PpRecord.m_horizontalAlertLimit">
Horizontal alert limit. 
</member>
        <member name="F:Csf.Utils.Nav.PpRecord.m_tchUnits">
TCH units. 
</member>
        <member name="F:Csf.Utils.Nav.PpRecord.m_thresholdCrossingHeight">
Threshold crossing height. 
</member>
        <member name="F:Csf.Utils.Nav.PpRecord.m_courseWidthAtThreshold">
Course width at threshold. 
</member>
        <member name="F:Csf.Utils.Nav.PpRecord.m_approachBearing">
Approach bearing. 
</member>
        <member name="F:Csf.Utils.Nav.PpRecord.m_fpapLon">
High precision longitude. 
</member>
        <member name="F:Csf.Utils.Nav.PpRecord.m_fpapLat">
High precision latitude. 
</member>
        <member name="F:Csf.Utils.Nav.PpRecord.m_glidePathAngle">
Glidepath angle. 
</member>
        <member name="F:Csf.Utils.Nav.PpRecord.m_ltpAltitude">
LPT altitude. 
</member>
        <member name="F:Csf.Utils.Nav.PpRecord.m_ltpLon">
LPT longitude. 
</member>
        <member name="F:Csf.Utils.Nav.PpRecord.m_ltpLat">
LPT latitude. 
</member>
        <member name="F:Csf.Utils.Nav.PpRecord.m_type">
Type. 
</member>
        <member name="F:Csf.Utils.Nav.PpRecord.m_ident">
Ident. 
</member>
        <member name="F:Csf.Utils.Nav.PpRecord.m_runway">
Runway name (i.e 07R). 
</member>
        <member name="F:Csf.Utils.Nav.PpRecord.m_airfield">
Airfield ICAO. 
</member>
        <member name="T:Csf.Utils.Nav.PpRecord">
424 Path Point Record used for GLS 
</member>
        <member name="M:Csf.Utils.Nav.PiRecord.insert(Csf.Osal.Database.Connection*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Inserts the record into the specified database.
            * @param db The database that should store the record.
            * @param table The name of the database table.

</member>
        <member name="M:Csf.Utils.Nav.PiRecord.parse(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Initializes a PI record from and A424 formatted line. 
            * @return true upon success, else false.
            * @param line1 The line containing the primary record 
            * @param line2 The line containing the continuation record (if it exists), blank otherwise.

</member>
        <member name="M:Csf.Utils.Nav.PiRecord.#ctor">
Ctor. 
</member>
        <member name="F:Csf.Utils.Nav.PiRecord.m_declination">
Declination. 
</member>
        <member name="F:Csf.Utils.Nav.PiRecord.m_trueBearing">
True bearing. 
</member>
        <member name="F:Csf.Utils.Nav.PiRecord.m_gsAngle">
Glideslope angle. 
</member>
        <member name="F:Csf.Utils.Nav.PiRecord.m_gsWidth">
Glideslope width. 
</member>
        <member name="F:Csf.Utils.Nav.PiRecord.m_gsElev">
Glideslope elevation. 
</member>
        <member name="F:Csf.Utils.Nav.PiRecord.m_gsLon">
Glideslope longitude. 
</member>
        <member name="F:Csf.Utils.Nav.PiRecord.m_gsLat">
Glideslope latitude. 
</member>
        <member name="F:Csf.Utils.Nav.PiRecord.m_gsFromThresh">
Distance between glideslope and runway threshold. 
</member>
        <member name="F:Csf.Utils.Nav.PiRecord.m_tch">
TCH. 
</member>
        <member name="F:Csf.Utils.Nav.PiRecord.m_magBearing">
Magnetic bearing. 
</member>
        <member name="F:Csf.Utils.Nav.PiRecord.m_locWidth">
Localizer width. 
</member>
        <member name="F:Csf.Utils.Nav.PiRecord.m_frequency">
Frequency. 
</member>
        <member name="F:Csf.Utils.Nav.PiRecord.m_lon">
Localizer longitude. 
</member>
        <member name="F:Csf.Utils.Nav.PiRecord.m_lat">
Localizer latitude. 
</member>
        <member name="F:Csf.Utils.Nav.PiRecord.m_type">
Record type. 
</member>
        <member name="F:Csf.Utils.Nav.PiRecord.m_ident">
Runway ident. 
</member>
        <member name="F:Csf.Utils.Nav.PiRecord.m_runway">
Runway name (i.e. 07R). 
</member>
        <member name="F:Csf.Utils.Nav.PiRecord.m_airfield">
Airfield ICAO. 
</member>
        <member name="T:Csf.Utils.Nav.PiRecord">
424 Localizer / GS Record 
</member>
        <member name="M:Csf.Utils.Nav.EmRecord.insert(Csf.Osal.Database.Connection*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Inserts the record into the specified database.
            * @param db The database that should store the record.
            * @param table The name of the database table.

</member>
        <member name="M:Csf.Utils.Nav.EmRecord.parse(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Initializes a EM record from and A424 formatted line.             
            * @return true upon success, else false.
            * @param line1 The line containing the primary record 
            * @param line2 The line containing the continuation record (if it exists), blank otherwise.

</member>
        <member name="M:Csf.Utils.Nav.EmRecord.#ctor">
Ctor. 
</member>
        <member name="F:Csf.Utils.Nav.EmRecord.m_bearing">
Minor access true bearing. 
</member>
        <member name="F:Csf.Utils.Nav.EmRecord.m_magVar">
Magnetic variation. 
</member>
        <member name="F:Csf.Utils.Nav.EmRecord.m_elevation">
Marker elevation. 
</member>
        <member name="F:Csf.Utils.Nav.EmRecord.m_lon">
Marker longitude. 
</member>
        <member name="F:Csf.Utils.Nav.EmRecord.m_lat">
Marker latitude. 
</member>
        <member name="F:Csf.Utils.Nav.EmRecord.m_type">
Marker code (alway set to ' EM'). 
</member>
        <member name="F:Csf.Utils.Nav.EmRecord.m_ident">
Marker ident. 
</member>
        <member name="T:Csf.Utils.Nav.EmRecord">
424 Enroute Marker 
</member>
        <member name="M:Csf.Utils.Nav.PmRecord.insert(Csf.Osal.Database.Connection*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Inserts the record into the specified database.
            * @param db The database that should store the record.
            * @param table The name of the database table.

</member>
        <member name="M:Csf.Utils.Nav.PmRecord.parse(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Initializes a PM record from and A424 formatted line.
            * @return true upon success, else false.
            * @param line1 The line containing the primary record
            * @param line2 The line containing the continuation record (if it exists), blank otherwise.

</member>
        <member name="M:Csf.Utils.Nav.PmRecord.#ctor">
Ctor. 
</member>
        <member name="F:Csf.Utils.Nav.PmRecord.m_bearing">
Minor axis true bearing. 
</member>
        <member name="F:Csf.Utils.Nav.PmRecord.m_magVar">
Magnetic variation. 
</member>
        <member name="F:Csf.Utils.Nav.PmRecord.m_elevation">
Facility elevation. 
</member>
        <member name="F:Csf.Utils.Nav.PmRecord.m_locFreq">
Localizer frequency. 
</member>
        <member name="F:Csf.Utils.Nav.PmRecord.m_locFacChar">
Localizer facility characteristics. 
</member>
        <member name="F:Csf.Utils.Nav.PmRecord.m_locClass">
Localizer class. 
</member>
        <member name="F:Csf.Utils.Nav.PmRecord.m_locLon">
Localizer longitude. 
</member>
        <member name="F:Csf.Utils.Nav.PmRecord.m_locLat">
Localizer latitude. 
</member>
        <member name="F:Csf.Utils.Nav.PmRecord.m_lon">
Marker longitude. 
</member>
        <member name="F:Csf.Utils.Nav.PmRecord.m_lat">
Marker latitude. 
</member>
        <member name="F:Csf.Utils.Nav.PmRecord.m_type">
Marker type. 
</member>
        <member name="F:Csf.Utils.Nav.PmRecord.m_ident">
Runway Ident. 
</member>
        <member name="F:Csf.Utils.Nav.PmRecord.m_runway">
Runway name (i.e. 07R). 
</member>
        <member name="F:Csf.Utils.Nav.PmRecord.m_airfield">
Airport ICAO. 
</member>
        <member name="T:Csf.Utils.Nav.PmRecord">
424 Airport Marker / Locator. 
</member>
        <member name="M:Csf.Utils.Nav.PgRecord.insert(Csf.Osal.Database.Connection*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Inserts the record into the specified database.
            * @param db The database that should store the record.
            * @param table The name of the database table.

</member>
        <member name="M:Csf.Utils.Nav.PgRecord.parse(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Initializes a PG record from and A424 formatted line. 
            * @return true on success, else false.
            * @param line1 The line containing the primary record 
            * @param line2 The line containing the continuation record (if it exists), blank otherwise.

</member>
        <member name="M:Csf.Utils.Nav.PgRecord.#ctor">
Ctor. 
</member>
        <member name="F:Csf.Utils.Nav.PgRecord.m_tchvi">
TCHVI. 
</member>
        <member name="F:Csf.Utils.Nav.PgRecord.m_tdzElev">
Touchdown zone elevation. 
</member>
        <member name="F:Csf.Utils.Nav.PgRecord.m_displacedThreshold">
Displaced threshold. 
</member>
        <member name="F:Csf.Utils.Nav.PgRecord.m_landingThreshElev">
Landing threshold elevation. 
</member>
        <member name="F:Csf.Utils.Nav.PgRecord.m_locMlsGlsIdent2">
Secondary Localizer / MLS / GLS ident. 
</member>
        <member name="F:Csf.Utils.Nav.PgRecord.m_locMlsGlsIdent1">
Localizer / MLS / GLS ident. 
</member>
        <member name="F:Csf.Utils.Nav.PgRecord.m_tch">
Runway TCH. 
</member>
        <member name="F:Csf.Utils.Nav.PgRecord.m_length">
Runway length. 
</member>
        <member name="F:Csf.Utils.Nav.PgRecord.m_width">
Runway width. 
</member>
        <member name="F:Csf.Utils.Nav.PgRecord.m_magHeading">
Runway magnetic heading. 
</member>
        <member name="F:Csf.Utils.Nav.PgRecord.m_heading">
Runway heading (true heading). 
</member>
        <member name="F:Csf.Utils.Nav.PgRecord.m_tdLon">
Runway touchdown longitude. 
</member>
        <member name="F:Csf.Utils.Nav.PgRecord.m_tdLat">
Runway touchdown latitude. 
</member>
        <member name="F:Csf.Utils.Nav.PgRecord.m_lon">
Runway longitude. 
</member>
        <member name="F:Csf.Utils.Nav.PgRecord.m_lat">
Runway latitude. 
</member>
        <member name="F:Csf.Utils.Nav.PgRecord.m_airfield">
ICAO airport code. 
</member>
        <member name="F:Csf.Utils.Nav.PgRecord.m_runway">
3 character runway name (i.e. 07R). 
</member>
        <member name="T:Csf.Utils.Nav.PgRecord">
424 Runway Record 
</member>
        <member name="M:Csf.Utils.Nav.PaRecord.insert(Csf.Osal.Database.Connection*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Inserts the record into the specified database.
            * @param db The database that should store the record.
            * @param table The name of the database table.

</member>
        <member name="M:Csf.Utils.Nav.PaRecord.parse(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Initializes a PA record from and A424 formatted line. 
            * @return true upon success, else false.
            * @param line1 The line containing the primary record.
            * @param line2 The line containing the continuation record (if it exists), blank otherwise.

</member>
        <member name="M:Csf.Utils.Nav.PaRecord.#ctor">
Ctor. 
</member>
        <member name="F:Csf.Utils.Nav.PaRecord.m_magvar">
Magnetic variation. 
</member>
        <member name="F:Csf.Utils.Nav.PaRecord.m_elevation">
Airport elevation. 
</member>
        <member name="F:Csf.Utils.Nav.PaRecord.m_lon">
Airport longitude. 
</member>
        <member name="F:Csf.Utils.Nav.PaRecord.m_lat">
Airport latitude. 
</member>
        <member name="F:Csf.Utils.Nav.PaRecord.m_name">
Airport name. 
</member>
        <member name="F:Csf.Utils.Nav.PaRecord.m_airfield">
ICAO airport code. 
</member>
        <member name="T:Csf.Utils.Nav.PaRecord">
424 Airport Record 
</member>
        <member name="F:Csf.Utils.Nav.RecordBase.m_version">
Indicates the version of the 424 spec to follow for decoding. 
</member>
        <member name="F:Csf.Utils.Nav.RecordBase.m_reserved">
if true, this record is reserved. 
</member>
        <member name="F:Csf.Utils.Nav.RecordBase.m_manuallyModified">
If true, indicates this information was manually modified. 
</member>
        <member name="M:Csf.Utils.Nav.RecordBase.Dispose">
Dtor. 
</member>
        <member name="M:Csf.Utils.Nav.RecordBase.#ctor">
Ctor. 
</member>
        <member name="T:Csf.Utils.Nav.RecordBase">
The base record type for all Nav Records 
</member>
        <member name="M:Csf.Utils.Nav.purgeQuote(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Removes the single quotes from a string.
         * @return String without quotes.
         * @param s The string to remove quotes from.

</member>
        <member name="M:Csf.Utils.Nav.SpecVersionValues.addEnums">
Add the string keys to the map of values to keys. 
</member>
        <member name="M:Csf.Utils.Nav.SpecVersionValues.#ctor(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Ctor.
            * @param key OSAL string key.

</member>
        <member name="M:Csf.Utils.Nav.SpecVersionValues.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
Ctor.
            * @param key C string key.

</member>
        <member name="M:Csf.Utils.Nav.SpecVersionValues.#ctor(System.Int32)">
Ctor.
            * @param value Integer value of the enumerator.

</member>
        <member name="M:Csf.Utils.Nav.SpecVersionValues.#ctor">
Ctor. 
</member>
        <member name="F:e_undefinedSpec">
Unknown specification 
</member>
        <member name="F:e_424_22">
424-22 specification 
</member>
        <member name="F:e_424_21">
424-21 specification 
</member>
        <member name="F:e_424_20">
424-19 specification 
</member>
        <member name="F:e_424_19">
424-18 specification 
</member>
        <member name="F:e_424_18">
424-18 specification 
</member>
        <member name="T:Csf.Utils.Nav.SpecVersionValues.E">
List of specifications. 
</member>
        <member name="T:Csf.Utils.Nav.SpecVersionValues">
Spec Version enumerations. 
</member>
        <member name="M:Csf.Utils.Nav.convertToInt64(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Wrapper around Osal::Convert::toInt64 that will catch and set the result to 0 upon failure.
         * @return The integer representation of the input parameter or 0 upon failure.
         * @param str The string representation of the value to convert.

</member>
        <member name="M:Csf.Utils.Nav.convertToInt32(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Wrapper around Osal::Convert::toInt32 that will catch and set the result to 0 upon failure.
         * @return The integer representation of the input parameter or 0 upon failure.
         * @param str The string representation of the value to convert.

</member>
        <member name="F:Csf.Utils.Enumeration.s_mapMutex">
Mutex *
</member>
        <member name="F:Csf.Utils.Enumeration.m_enumerationId">
ID of this enumeration. 
</member>
        <member name="F:Csf.Utils.Enumeration.m_key">
Variable's text key. 
</member>
        <member name="F:Csf.Utils.Enumeration.m_value">
Variable's integer value. 
</member>
        <member name="F:Csf.Utils.Enumeration.s_nextEnumeratorValue">
Vector of next enumerator value - indexed by enumeration ID. 
</member>
        <member name="F:Csf.Utils.Enumeration.s_valueMaps">
Vector of maps of enumeration values. 
</member>
        <member name="F:Csf.Utils.Enumeration.s_keyMaps">
Vector of maps of enumeration keys. 
</member>
        <member name="F:Csf.Utils.Enumeration.s_enumerationIdMap">
Map of enumeration names to enumeration ID. 
</member>
        <member name="F:Csf.Utils.Enumeration.s_nextEnumerationId">
ID to be assigned to the next enumeration that is created. 
</member>
        <member name="M:Csf.Utils.Enumeration.validateValue(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Will check that the value and return the key.
         * @throws runtime_error When it can't find the value. 
         * @return the key as a string.
         * @param value The value to validate. 
</member>
        <member name="M:Csf.Utils.Enumeration.validateKey(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Will check that the key is in the key map. 
         * @throws runtime_error When it can't find the key.
         * @return the value of the key.
         * @param key The key to validate. 
</member>
        <member name="M:Csf.Utils.Enumeration.isValidValue(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns whether or not the value passed in as a parameter is valid.
         * @return True if valid false if not.
         * @param value The value to check. 
</member>
        <member name="M:Csf.Utils.Enumeration.isValidKey(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns whether or not the key passed in as a parameter is valid. 
         * @return True if valid false if not.
         * @param key The key to check.

</member>
        <member name="M:Csf.Utils.Enumeration.getIdStr">
Returns the id string used to publish enumeration on the VDN
         * @return String ID used to publish enumeration.

</member>
        <member name="M:Csf.Utils.Enumeration.op_GreaterThan(Csf.Utils.Enumeration!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Check for &gt; between 2 enumerations. Compares their values.
         * @return
         * - true: This is &gt; rhs.
         * - false: This is !&gt; rhs.
         * @param rhs Enumeration to check.

</member>
        <member name="M:Csf.Utils.Enumeration.op_Implicit~Csf.Osal.String">
Returns the string key of the enumeration. 
</member>
        <member name="M:Csf.Utils.Enumeration.op_Implicit~System.Int32">
Returns the integer value of the enumeration. 
</member>
        <member name="M:Csf.Utils.Enumeration.op_Increment">
Postincrement operator. Increments the value and then checks that there is
         * a corresponding string key (so you can't increment to an invalid enumerator.
         * @throws runtime_error The validateValue() method throws this if the value
         * is not a valid enumerator value.
         * @return Reference to the enueration object.

</member>
        <member name="M:Csf.Utils.Enumeration.op_Inequality(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Check for inequality with another enumeration variable.
          * @return
          * - true: They are not equal.
          * - false: They are equal.
          * @param rhs Enum variable to check.

</member>
        <member name="M:Csf.Utils.Enumeration.op_Inequality(Csf.Utils.Enumeration!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Check for inquality with a string key.
          * @return
          * - true: They are not equal.
          * - false: They are equal.
          * @param rhs Key to check.

</member>
        <member name="M:Csf.Utils.Enumeration.op_Inequality(System.Int32!System.Runtime.CompilerServices.IsConst)">
Check for inequality with an int value.
          * @return
          * - true: They are not equal.
          * - false: They are equal.
          * @param rhs Integer value to check.

</member>
        <member name="M:Csf.Utils.Enumeration.op_Equality(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Check for equality with another enumeration variable.
          * @return
          * - true: They are equal.
          * - false: Not equal.
          * @param rhs Enum variable to check.

</member>
        <member name="M:Csf.Utils.Enumeration.op_Equality(Csf.Utils.Enumeration!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Check for equality with a string key.
         * @return
         * - true: They are equal.
         * - false: Not equal.
         * @param rhs Key to check.

</member>
        <member name="M:Csf.Utils.Enumeration.op_Equality(System.Int32!System.Runtime.CompilerServices.IsConst)">
Check for equality with an int value.
          * @return
          * - true: They are equal.
          * - false: Not equal.
          * @param rhs Integer value to check.

</member>
        <member name="M:Csf.Utils.Enumeration.setValue(System.Int32!System.Runtime.CompilerServices.IsConst)">
Sets the value member variable. 
         * @param value The value to set it to. 

</member>
        <member name="M:Csf.Utils.Enumeration.setKey(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Sets the key member variable.
         * @param key String to set key to. 

</member>
        <member name="M:Csf.Utils.Enumeration.getNumEnumerators">
Get the # of enumerators.
         * @return Number of enumerators.

</member>
        <member name="M:Csf.Utils.Enumeration.getValue">
Get the value of the current enum.
          * @return Integer value.


Returns value
      * @return value as an Int32. 
</member>
        <member name="M:Csf.Utils.Enumeration.getKey">
Get the string key the current value.
          * @return String key for the value.


Returns key
      * @return key in string format. 
</member>
        <member name="M:Csf.Utils.Enumeration.getKey(System.Int32!System.Runtime.CompilerServices.IsConst)">
Get the string key for the given value.
          * @return key String key for the value.
          * @param value Integer value.

</member>
        <member name="M:Csf.Utils.Enumeration.getValue(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Get the value for the given string key.
          * @return Integer value for the key.
          * @param key String key.

</member>
        <member name="M:Csf.Utils.Enumeration.printEnum(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Prints enumeration map
         * @param s The stream to print to. 

</member>
        <member name="M:Csf.Utils.Enumeration.addEnum(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Adds an enumerator to this enumeration. Uses the last value as the integer
          * value, and increments the last value.
          * @param key Text for this enumeration (e.g. "e_north"). 

</member>
        <member name="M:Csf.Utils.Enumeration.addEnum(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst)">
Adds an enumerator to this enumeration. Sets the last value to the value
          * specified.
          * @param key Text for this enumeration (e.g. "e_north").
          * @param value Integer value for this enumerator. 

</member>
        <member name="M:Csf.Utils.Enumeration.Dispose">
Destructor. 
</member>
        <member name="M:Csf.Utils.Enumeration.#ctor">
Constructor. 
</member>
        <member name="M:Csf.Utils.Enumeration.#ctor(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Constructor.
          * @param name Enumeration name. 

</member>
        <member name="D:Csf.Utils.Enumeration.ValueMap">
ValueMap type definition with Int32 (type) and String (key) 
</member>
        <member name="D:Csf.Utils.Enumeration.KeyMap">
KeyMap type definition with String (key) and Int32 (type) 
</member>
        <member name="T:Csf.Utils.Enumeration">
Class used to represent enumerations.
@version 1.0

</member>
        <member name="M:Csf.Osal.Environment.getCurrentUserGroupId">
Get the ID of the current user group, as defined in the sys_users database table. 
</member>
        <member name="M:Csf.Osal.Environment.getCurrentUserId">
Get the ID of the current user, as defined in the sys_users database table. 
</member>
        <member name="M:Csf.Osal.Environment.getDbConnectionInfo(Csf.Osal.DataAccess.Settings!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsConst)">
Get the database connection parameters as a map. 
</member>
        <member name="M:Csf.Osal.Environment.getProcessId">
@brief  Returns the PID of the current process.
</member>
        <member name="F:Csf.Osal.DataAccess.Settings.m_settingsRwLock">
Read/Write to provide thread safe access to the dictionary
of settings.  Dictionary class also has a R/W lock, to prevent
any confusion, this is named uniquely.

</member>
        <member name="M:Csf.Osal.DataAccess.Settings.insertConfiguration(Csf.Osal.Collections.Dictionary!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Inserts or replaces the configuration with the new data.

</member>
        <member name="M:Csf.Osal.DataAccess.Settings.#ctor(Csf.Osal.DataAccess.Settings!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor to safe guard improper declarations of this
class.

</member>
        <member name="M:Csf.Osal.DataAccess.Settings.getInternalPointer(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns an internal pointer associated with the given key.  If no pointer is
associated with the key, it will return NULL.  This is thread safe.

</member>
        <member name="M:Csf.Osal.DataAccess.Settings.addInternalPointer(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Void*)">
Stores an internal pointer in our application wide (singleton) dictionary. 
This allows singleton's to be used throughout the application, provided they
take advantage of this class. The key used here must be application unique.
This will return true on success; false on failure ( duplicate key ).
This is thread safe.

</member>
        <member name="M:Csf.Osal.DataAccess.Settings.getSettings(Csf.Osal.Collections.Dictionary*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the dictionary of all simulation settings.

</member>
        <member name="M:Csf.Osal.DataAccess.Settings.Dispose">
Destructor.

</member>
        <member name="M:Csf.Osal.DataAccess.Settings.#ctor">
Constructor. Used by tests.

</member>
        <member name="M:Csf.Osal.DataAccess.Settings.#ctor(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Constructor.
@param file The file to open and read in the configuration from.

</member>
        <member name="T:Csf.Osal.DataAccess.Settings">
This class holds accessors for system wide configuration data.
It is also a singleton, so only one per simulation process.

</member>
        <member name="M:Csf.Osal.Collections.Dictionary.op_Assign(Csf.Osal.Collections.Dictionary!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded assignment operator.  This ensures the read/write
lock will remain unique when the dictionary is assigned
from an existing object.

</member>
        <member name="M:Csf.Utils.RequestQueueIntf.handleQueueLoggingEnable(Csf.Utils.RequestQueueIntf.RequestQueueArgs!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Requests sent by RTMM to enable and disable request
       queue logging end up here.
</member>
        <member name="M:Csf.Utils.RequestQueueIntf.updateFromBack">

@brief Updates the front queues from the back
@return true normal; false if there are no request queues or error

</member>
        <member name="F:Csf.Utils.RequestQueueIntf.s_loggingRequestName">
Name of the logging request
</member>
        <member name="F:Csf.Utils.RequestQueueIntf.s_ioQueueName">
Name of the IO queue
</member>
        <member name="F:Csf.Utils.RequestQueueIntf.s_defaultQueueName">
Name of the default queue
</member>
        <member name="F:Csf.Utils.RequestQueueIntf.s_freezeQueueName">
Name of the freeze queue
</member>
        <member name="F:Csf.Utils.RequestQueueIntf.s_resetQueueName">
Name of the reset queue
</member>
        <member name="F:Csf.Utils.RequestQueueIntf.s_malfunctionQueueName">
Name of the malfunction queue
</member>
        <member name="M:Csf.Utils.RequestQueueIntf.requestQueuePushed(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Utils.RequestQueue*,Csf.Utils.Request!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Notification Function of a push change to a particular queue.
                                                                                  
</member>
        <member name="M:Csf.Utils.RequestQueueIntf.requestQueuePopped(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Utils.RequestQueue*,Csf.Utils.Request!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst)">

Notification Function of a pop change to a particular queue.

</member>
        <member name="M:Csf.Utils.RequestQueueIntf.unpublishRequestQueue(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Interface defined signature to unpublish a request queue.

</member>
        <member name="M:Csf.Utils.RequestQueueIntf.publishRequestQueue(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Utils.RequestQueue*)">

Interface defined signature to publish a new request queue.
           
</member>
        <member name="M:Csf.Utils.RequestQueueIntf.registerQueueHandler(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced, Csf.Utils.RequestQueueIntf::*(Csf.Utils.RequestQueueIntf.RequestQueueArgs!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced))">

This overloaded version of the registerQueueHandler uses the 
default queue name "Default".

</member>
        <member name="M:Csf.Utils.RequestQueueIntf.clearAllQueues">

Removes all requests from all queues.
                
</member>
        <member name="M:Csf.Utils.RequestQueueIntf.clearQueue(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Removes all requests from a particular queue

</member>
        <member name="M:Csf.Utils.RequestQueueIntf.handleRequestQueue(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst)">

@brief Handles new messages on the specified request queue.i
       If the handeAll flag is false, this will only handle 1 request.
       All handled queues will be popped. 
@param topicName the topic name of the queue
@param queueName the queue name
@param handleAll true to handle all requests (default true)

</member>
        <member name="M:Csf.Utils.RequestQueueIntf.handleRequestQueues(System.Boolean!System.Runtime.CompilerServices.IsConst)">
Handles new messages on the request queues. All handled requests
            * will be popped (removed from their queues and deleted.
			* @return:
			* -true: Handled at least one request.
			* -false: No requests were handled.
			* @param handleAll
			* -true: Loop through all queues and handle all existing requests on all queues.
			* -false: Only handle max one requests per queue before returning.

</member>
        <member name="M:Csf.Utils.RequestQueueIntf.registerQueue(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Creates a default request queue and adds it to the local SimElement map.
The default request queue's name is "Default".

</member>
        <member name="M:Csf.Utils.RequestQueueIntf.setName(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Late Registration For Log Source Name

</member>
        <member name="M:Csf.Utils.RequestQueueIntf.Dispose">

 Destructor

</member>
        <member name="M:Csf.Utils.RequestQueueIntf.#ctor(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Constructor
    
</member>
        <member name="M:Csf.Utils.RequestQueueIntf.#ctor(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Constructor
    
</member>
        <member name="M:Csf.Utils.RequestQueueIntf.registerQueueHandler(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced, Csf.Utils.RequestQueueIntf::*(Csf.Utils.RequestQueueIntf.RequestQueueArgs!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced))">

This function registers a string handler name with a request queue.  It's
purpose is to provide a mechanism to allow people to query a queue and see
what requests it's expecting to receive. 

</member>
        <member name="M:Csf.Utils.RequestQueueIntf.registerQueue(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Creates a request queue and adds it to the local SimElement map

</member>
        <member name="D:Csf.Utils.RequestQueueIntf.RequestHandler">

Member Function Pointer for RequestQueue Handlers

</member>
        <member name="T:Csf.Utils.RequestQueueIntf.RequestQueueArgs">

RequestQueue Arguments for the RequestQueue Handler Functions 

</member>
        <member name="M:Csf.Vdn.VdnClientIfc.getKernelFrequency">
@brief Get the kernel frequency.
@return The kernel frequency in hertz.

</member>
        <member name="M:Csf.Vdn.VdnClientIfc.getUniversalSimFrame">

@brief Returns Universal Simulation Tick (aka frame) which is the nummber of ticks since the 
       beginning of simulation.
       Ticks defined as number of VDN exlusive (manage) calls
</member>
        <member name="M:Csf.Vdn.VdnClientIfc.unpublishRequestQueue(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Removes a request queue from the VDN (makes it not visbile to other particpants on the VDN)
@param topic The topic name of the queue to be removed
@param queueName The name of the queue

</member>
        <member name="M:Csf.Vdn.VdnClientIfc.publishRequestQueue(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Utils.RequestQueue*)">

@brief Publishes a request queue on the VDN (makes it visible to others on the VDN)
@param topic The topic name of the input queue
@param queueName The name of the input queue
@param newQueue The preallocated RequestQueue to be placed on the VDN
@return true if RequestQueue was sucessfully published

</member>
        <member name="M:Csf.Vdn.VdnClientIfc.registerRequest(Csf.Vdn.RequestRegistration!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Will register a request to the internal list and the database tables.
         * @param request The request that will be registered.
         * @return This Int64 is the unique ID given when the registeration is inserted into
         * the VDN request registration table.  This is needed so that we can link IC Required
         * request table entries to their request registrations.  This number will be -1 if there
         * was an error. 
</member>
        <member name="M:Csf.Vdn.VdnClientIfc.request(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Utils.Request*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Adds a request to the specified queue. DEPRECATED
@param topic The topic name of the destination queue
@param queueName The name of the destination queue
@param request The Request to be placed in the destination queue
@return true if request was sucessfully placed in the queue

</member>
        <member name="M:Csf.Vdn.VdnClientIfc.log(Csf.Vdn.Log.Severity!System.Runtime.CompilerServices.IsConst,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Log a message.
@param severity The severity level of the message. See the Severity enum.
@param modifier Optional string message.
@param code Unique message code that identifies this message type.
@param chapter ATA chapter this msg refers to.
@param section ATA section this msg refers to.
@param subsection ATA subsection this msg refers to.
@param sourceFile Source code file name.
@param sourceLine Source line number.
@param manualEntry

</member>
        <member name="M:Csf.Vdn.VdnClientIfc.commit">

@brief Method to notify the VDN that the sim element has completed execution.
       and the publications are ready to be committed to the datastore.

</member>
        <member name="M:Csf.Vdn.VdnClientIfc.read">

@brief Method to have the VDN update the local data items to which the sim element is subscribed

</member>
        <member name="M:Csf.Vdn.VdnClientIfc.subscribeDebug(Csf.Vdn.AvioA429DataType*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Vdn.Scope.ScopeLevels)">

@brief Allows debug subscription to A429 Labels
@param v The preallocated A429Label
@param busName The bus name
@param labelName The label name 
@param scope The scope of the label 

</member>
        <member name="M:Csf.Vdn.VdnClientIfc.subscribe(Csf.Vdn.BaseDataType*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String,Csf.Osal.String,Csf.Vdn.Scope.ScopeLevels)">

@brief Subscribes to a VDN data item on the VDN
@param v The preallocated VDN data type to which subscription updates will be sent
@param topicName Typically the name of the source publisher name (i.e. "Engines", "GroundHandling").
                 Could also be a panel name for cockpitIO.\n
@param varName The variable name.
@param units The name of the units the value represents (e.g. "G", "ft/s", "lbs/ft^2", "ft*lbs", etc.)
@param scope The scope level of the variable (default is output)

       Subscribers will need to match the scope, topicName, varName, and units for
       a successfull subscription (virtual link) to be established

</member>
        <member name="M:Csf.Vdn.VdnClientIfc.publish(Csf.Vdn.BaseDataType*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String,Csf.Osal.String,Csf.Vdn.Scope.ScopeLevels,System.Boolean)">

@brief Publishes any VDN data item on the VDN\n
@param v The preallocated vdn data type
@param topicName Typically the name of the source publisher name (i.e. "Engines", "GroundHandling").
                 Could also be a panel name for cockpitIO.\n
@param varName The name of the data item on the VDN (e.g. "Indicated_Airspeed")
@param units The name of the units the value represents (e.g. "G", "ft/s", "lbs/ft^2", "ft*lbs", etc.)
@param scope Optional scope level of the variable (default is output)
@param replay Replay

       Subscribers will need to match the topicName, varName, scope, and
       units for a successfull subscription (virtual link) to be established

</member>
        <member name="M:Csf.Vdn.VdnClientIfc.unregister">
@brief unregisters an entity
</member>
        <member name="M:Csf.Vdn.VdnClientIfc.registerEntity(Csf.Osal.String)">

@brief Registers a simulation element with the VDN
        Used for late registrations. Registration can occur with
        use of the appropriate constructor.
@param name  The name of the registering simulation element


</member>
        <member name="T:Csf.Vdn.VdnClientIfc">

@brief The VDN proxy class used for proetction of VdnCore class:
        Provides public registration, publish, subscribe, read, and commit methods
        for sharing data on the Virtual Data Network.

</member>
        <member name="M:Csf.Vdn.RequestRegistration.op_Assign(Csf.Vdn.RequestRegistration!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Private copy constructor to prevent warning. 
</member>
        <member name="M:Csf.Vdn.RequestRegistration.createAndPushBackRequestRegistration(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,Csf.Osal.ValueTypes.Type!System.Runtime.CompilerServices.IsConst)">
Will create and push back a request registration. 
</member>
        <member name="F:Csf.Vdn.RequestRegistration.m_icCategory">
The Request's IC Category. 
</member>
        <member name="F:Csf.Vdn.RequestRegistration.m_name">
The Request's name. 
</member>
        <member name="F:Csf.Vdn.RequestRegistration.m_queueName">
The Request's VDN Queue Name. 
</member>
        <member name="F:Csf.Vdn.RequestRegistration.m_topic">
The Request's VDN Topic 
</member>
        <member name="D:Csf.Vdn.RequestRegistration.RequestParameterDeque">
The list of request parameters. 
</member>
        <member name="M:Csf.Vdn.RequestRegistration.addEnum(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Will add a Osal::Enum request parameter to the request registration
         * @param name The name of the parameter being added.
         * @param comment The comment associated with this parameter.
         * @param required If the parameter is required for the request.
</member>
        <member name="M:Csf.Vdn.RequestRegistration.addByteArray(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Will add a Osal::ByteArray request parameter to the request registration
         * @param name The name of the parameter being added.
         * @param comment The comment associated with this parameter.
         * @param required If the parameter is required for the request.
</member>
        <member name="M:Csf.Vdn.RequestRegistration.addString(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Will add a Osal::String request parameter to the request registration
         * @param name The name of the parameter being added.
         * @param comment The comment associated with this parameter.
         * @param required If the parameter is required for the request.
</member>
        <member name="M:Csf.Vdn.RequestRegistration.addFloat64(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Will add a Osal::Float64 request parameter to the request registration
         * @param name The name of the parameter being added.
         * @param comment The comment associated with this parameter.
         * @param minimum The minimum value the parameter can be.
         * @param maximum The maximum value the parameter can be.
         * @param required If the parameter is required for the request.
</member>
        <member name="M:Csf.Vdn.RequestRegistration.addFloat64(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Will add a Osal::Float64 request parameter to the request registration
         * @param name The name of the parameter being added.
         * @param comment The comment associated with this parameter.
         * @param required If the parameter is required for the request.
</member>
        <member name="M:Csf.Vdn.RequestRegistration.addFloat32(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Will add a Osal::Float32 request parameter to the request registration
         * @param name The name of the parameter being added.
         * @param comment The comment associated with this parameter.
         * @param minimum The minimum value the parameter can be.
         * @param maximum The maximum value the parameter can be.
         * @param required If the parameter is required for the request.
</member>
        <member name="M:Csf.Vdn.RequestRegistration.addFloat32(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Will add a Osal::Float32 request parameter to the request registration
         * @param name The name of the parameter being added.
         * @param comment The comment associated with this parameter.
         * @param required If the parameter is required for the request.
</member>
        <member name="M:Csf.Vdn.RequestRegistration.addInt64(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64!System.Runtime.CompilerServices.IsConst,System.Int64!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Will add a Osal::Int64 request parameter to the request registration
         * @param name The name of the parameter being added.
         * @param comment The comment associated with this parameter.
         * @param minimum The minimum value the parameter can be.
         * @param maximum The maximum value the parameter can be.
         * @param required If the parameter is required for the request.
</member>
        <member name="M:Csf.Vdn.RequestRegistration.addInt64(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Will add a Osal::Int64 request parameter to the request registration
         * @param name The name of the parameter being added.
         * @param comment The comment associated with this parameter.
         * @param required If the parameter is required for the request.
</member>
        <member name="M:Csf.Vdn.RequestRegistration.addInt32(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Will add a Osal::Int32 request parameter to the request registration
         * @param name The name of the parameter being added.
         * @param comment The comment associated with this parameter.
         * @param minimum The minimum value the parameter can be.
         * @param maximum The maximum value the parameter can be.
         * @param required If the parameter is required for the request.
</member>
        <member name="M:Csf.Vdn.RequestRegistration.addInt32(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Will add a Osal::Int32 request parameter to the request registration
         * @param name The name of the parameter being added.
         * @param comment The comment associated with this parameter.
         * @param required If the parameter is required for the request.
</member>
        <member name="M:Csf.Vdn.RequestRegistration.addInt16(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16!System.Runtime.CompilerServices.IsConst,System.Int16!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Will add a Osal::Int16 request parameter to the request registration
         * @param name The name of the parameter being added.
         * @param comment The comment associated with this parameter.
         * @param minimum The minimum value the parameter can be.
         * @param maximum The maximum value the parameter can be.
         * @param required If the parameter is required for the request.
</member>
        <member name="M:Csf.Vdn.RequestRegistration.addInt16(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Will add a Osal::Int32 request parameter to the request registration
         * @param name The name of the parameter being added.
         * @param comment The comment associated with this parameter.
         * @param required If the parameter is required for the request.
</member>
        <member name="M:Csf.Vdn.RequestRegistration.addUInt64(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt64!System.Runtime.CompilerServices.IsConst,System.UInt64!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Will add a Osal::UInt64 request parameter to the request registration
         * @param name The name of the parameter being added.
         * @param comment The comment associated with this parameter.
         * @param minimum The minimum value the parameter can be.
         * @param maximum The maximum value the parameter can be.
         * @param required If the parameter is required for the request.
</member>
        <member name="M:Csf.Vdn.RequestRegistration.addUInt64(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Will add a Osal::UInt64 request parameter to the request registration
         * @param name The name of the parameter being added.
         * @param comment The comment associated with this parameter.
         * @param required If the parameter is required for the request.
</member>
        <member name="M:Csf.Vdn.RequestRegistration.addUInt32(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Will add a Osal::UInt32 request parameter to the request registration
         * @param name The name of the parameter being added.
         * @param comment The comment associated with this parameter.
         * @param minimum The minimum value the parameter can be.
         * @param maximum The maximum value the parameter can be.
         * @param required If the parameter is required for the request.
</member>
        <member name="M:Csf.Vdn.RequestRegistration.addUInt32(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Will add a Osal::UInt32 request parameter to the request registration
         * @param name The name of the parameter being added.
         * @param comment The comment associated with this parameter.
         * @param required If the parameter is required for the request.
</member>
        <member name="M:Csf.Vdn.RequestRegistration.addUInt16(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt16!System.Runtime.CompilerServices.IsConst,System.UInt16!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Will add a Osal::UInt16 request parameter to the request registration
         * @param name The name of the parameter being added.
         * @param comment The comment associated with this parameter.
         * @param minimum The minimum value the parameter can be.
         * @param maximum The maximum value the parameter can be.
         * @param required If the parameter is required for the request.
</member>
        <member name="M:Csf.Vdn.RequestRegistration.addUInt16(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Will add a Osal::UInt16 request parameter to the request registration
         * @param name The name of the parameter being added.
         * @param comment The comment associated with this parameter.
         * @param required If the parameter is required for the request.
</member>
        <member name="M:Csf.Vdn.RequestRegistration.addUChar(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte!System.Runtime.CompilerServices.IsConst,System.Byte!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Will add a Osal::UChar request parameter to the request registration
         * @param name The name of the parameter being added.
         * @param comment The comment associated with this parameter.
         * @param minimum The minimum value the parameter can be.
         * @param maximum The maximum value the parameter can be.
         * @param required If the parameter is required for the request.
</member>
        <member name="M:Csf.Vdn.RequestRegistration.addUChar(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Will add a Osal::UChar request parameter to the request registration
         * @param name The name of the parameter being added.
         * @param comment The comment associated with this parameter.
         * @param required If the parameter is required for the request.
</member>
        <member name="M:Csf.Vdn.RequestRegistration.addChar(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Will add a Osal::Char request parameter to the request registration
         * @param name The name of the parameter being added.
         * @param comment The comment associated with this parameter.
         * @param minimum The minimum value the parameter can be.
         * @param maximum The maximum value the parameter can be.
         * @param required If the parameter is required for the request.
</member>
        <member name="M:Csf.Vdn.RequestRegistration.addChar(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Will add a Osal::Char request parameter to the request registration
         * @param name The name of the parameter being added.
         * @param comment The comment associated with this parameter.
         * @param required If the parameter is required for the request.
</member>
        <member name="M:Csf.Vdn.RequestRegistration.addBool(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Will add a Osal::Bool request parameter to the request registration
         * @param name The name of the parameter being added.
         * @param comment The comment associated with this parameter.
         * @param required If the parameter is required for the request.
</member>
        <member name="M:Csf.Vdn.RequestRegistration.Dispose">
Destructor 
</member>
        <member name="M:Csf.Vdn.RequestRegistration.#ctor(Csf.Vdn.RequestRegistration!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy Constructor
         * @param registration The object to copy. 
</member>
        <member name="M:Csf.Vdn.RequestRegistration.#ctor(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Vdn.RequestRegistration.IcCategory!System.Runtime.CompilerServices.IsConst)">
Constructor 
         * @param topic The VDN topic of the request.
         * @param queueName The queue name of the request. 
         * @param name The name of the request.
         * @param icCategory How this request is used for IC if at all.
</member>
        <member name="T:Csf.Vdn.RequestRegistration.IcCategory">
Whether a request is required for IC 
</member>
        <member name="T:Csf.Vdn.RequestRegistration">
This class composes a request registration and provides the methods
      * for adding parameters. 
</member>
        <member name="F:Csf.Vdn.RequestParameter.m_checkRange">
Whether there is a range to check. 
</member>
        <member name="F:Csf.Vdn.RequestParameter.m_type">
The Osal value type of the parameter. 
</member>
        <member name="F:Csf.Vdn.RequestParameter.m_isRequired">
Identifies if this parameter is required for the request. 
</member>
        <member name="F:Csf.Vdn.RequestParameter.m_comment">
Any details about this request parameter. 
</member>
        <member name="F:Csf.Vdn.RequestParameter.m_name">
Name of the request parameter. 
</member>
        <member name="M:Csf.Vdn.RequestParameter.Dispose">
Destructor 
</member>
        <member name="M:Csf.Vdn.RequestParameter.#ctor(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.ValueTypes.Type!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Constructor 
         * @param name Name of the parameter.
         * @param comment Details about this parameter.
         * @param type The Osal type of the parameter.
         * @param required If true, this request if required.
         * @param checkRange Whether or not there are ranges that need to be checked.

</member>
        <member name="T:Csf.Vdn.RequestParameter">
This class defines the variables and functionality shared by all the different 
      * request parameter types. 
</member>
        <member name="M:Csf.Ig.IgInfo.loadVisualModels(Csf.Utils.Database.ConnectionInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Load visual models from database.
         * @param dbInfo The database connection info.

</member>
        <member name="M:Csf.Ig.IgInfo.loadVisualTestPatterns(Csf.Utils.Database.ConnectionInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Load visual test patterns from database.
         * @param dbInfo The database connection info.

</member>
        <member name="M:Csf.Ig.IgInfo.loadAirportInfo(Csf.Utils.Database.ConnectionInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Load airport information from database.
         * @param dbInfo The database connection info.
         *

</member>
        <member name="M:Csf.Ig.IgInfo.initialize(Csf.Utils.Database.ConnectionInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Initialization to call the methods to load the airports, test-patterns and visual models.
         * @param dbInfo The database connection info.

</member>
        <member name="F:Csf.Ig.IgInfo.m_groundSubmodelMapDefaults">
Submodel enum name to submodel number ground vehicles. 
</member>
        <member name="F:Csf.Ig.IgInfo.m_shipSubmodelMapDefaults">
Submodel enum name to submodel number for ships. 
</member>
        <member name="F:Csf.Ig.IgInfo.m_rwaSubmodelMapDefaults">
Submodel enum name to submodel number for rotary wing aircrafts. 
</member>
        <member name="F:Csf.Ig.IgInfo.m_fwaSubmodelMapDefaults">
Submodel enum name to submodel number for fixed wing aircrafts. 
</member>
        <member name="F:Csf.Ig.IgInfo.m_submodelIter">
The submodel iterator. 
</member>
        <member name="F:Csf.Ig.IgInfo.m_groundLightMapDefaults">
Light enum name to IG group number for ground vehciles. 
</member>
        <member name="F:Csf.Ig.IgInfo.m_shipLightMapDefaults">
Light enum name to IG group number fr ships. 
</member>
        <member name="F:Csf.Ig.IgInfo.m_rwaLightMapDefaults">
Light enum name to IG group number for rotary wing aircrafts. 
</member>
        <member name="F:Csf.Ig.IgInfo.m_fwaLightMapDefaults">
Light enum name to IG group number for fixed wing aircrafts. 
</member>
        <member name="F:Csf.Ig.IgInfo.m_lightIter">
The light iterator. 
</member>
        <member name="F:Csf.Ig.IgInfo.m_modelCategories">
The model category. 
</member>
        <member name="F:Csf.Ig.IgInfo.m_edmVisMapIter">
Iterator for the EDM -&gt; Vis map. 
</member>
        <member name="F:Csf.Ig.IgInfo.m_edmVisMap">
The map an edm type to its location in the model vector. 
</member>
        <member name="F:Csf.Ig.IgInfo.m_models">
The array of models. 
</member>
        <member name="F:Csf.Ig.IgInfo.m_testPatterns">
The array of test patterns. 
</member>
        <member name="F:Csf.Ig.IgInfo.s_maxAirports">
The max number of airports defined by visual. 
</member>
        <member name="F:Csf.Ig.IgInfo.m_customCount">
Number of custom airports. 
</member>
        <member name="F:Csf.Ig.IgInfo.m_customSet">
ICAO set of airports regardless of season (use for quick lookup if custom is available). 
</member>
        <member name="F:Csf.Ig.IgInfo.m_airportSeasonMap">
'ICAO + Season' map to airport index. 
</member>
        <member name="F:Csf.Ig.IgInfo.m_airports">
Array of m_airports. 
</member>
        <member name="M:Csf.Ig.IgInfo.getDefaultSubmodelGround(System.Int32)">
Returns the standard submodel mapping for the specified submodel type.
         * @param submodelEnum The type of submodel.
         * @return The associated submodel number. 

</member>
        <member name="M:Csf.Ig.IgInfo.setDefaultSubmodelGround(System.Int32,System.Int32)">
Sets up the standard submodel mapping for ground vehicles.
         * @param submodelEnum The submodel type.
         * @param id The default submodel id.         

</member>
        <member name="M:Csf.Ig.IgInfo.getDefaultSubmodelShip(System.Int32)">
Returns the standard submodel mapping for the specified submodel type.
         * @param submodelEnum The type of submodel.
         * @return The associated submodel number. 

</member>
        <member name="M:Csf.Ig.IgInfo.setDefaultSubmodelShip(System.Int32,System.Int32)">
Sets up the standard submodel mapping for ships.
         * @param submodelEnum The submodel type.
         * @param id The default submodel id.         

</member>
        <member name="M:Csf.Ig.IgInfo.getDefaultSubmodelRwa(System.Int32)">
Returns the standard submodel mapping for the specified submodel type.
         * @param submodelEnum The type of submodel.
         * @return The associated submodel number. 

</member>
        <member name="M:Csf.Ig.IgInfo.setDefaultSubmodelRwa(System.Int32,System.Int32)">
Sets up the standard submodel mapping for rotary wing aicrafts.
         * @param submodelEnum The submodel type.
         * @param id The default submodel id.         

</member>
        <member name="M:Csf.Ig.IgInfo.getDefaultSubmodelFwa(System.Int32)">
Returns the standard submodel mapping for the specified submodel type.
         * @param submodelEnum The type of submodel.
         * @return The associated submodel number. 

</member>
        <member name="M:Csf.Ig.IgInfo.setDefaultSubmodelFwa(System.Int32,System.Int32)">
Sets up the standard submodel mapping for fixed wing aicrafts.
         * @param submodelEnum The submodel type.
         * @param id The default submodel id.         

</member>
        <member name="M:Csf.Ig.IgInfo.getDefaultLightGround(System.Int32)">
Returns the standard light point mapping for the specified light type.
         * @param lightEnum The type of light.
         * @return The associated light group number. 

</member>
        <member name="M:Csf.Ig.IgInfo.setDefaultLightGround(System.Int32,System.Int32)">
Sets up the standard light point mapping for ground vehicles.
         * @param lightEnum The light type.
         * @param groupId The default light group id.

</member>
        <member name="M:Csf.Ig.IgInfo.getDefaultLightShip(System.Int32)">
Returns the standard light point mapping for the specified light type.
         * @param lightEnum The type of light.
         * @return The associated light group number. 

</member>
        <member name="M:Csf.Ig.IgInfo.setDefaultLightShip(System.Int32,System.Int32)">
Sets up the standard light point mapping for ships.
         * @param lightEnum The light type.
         * @param groupId The default light group id.

</member>
        <member name="M:Csf.Ig.IgInfo.getDefaultLightRwa(System.Int32)">
Returns the standard light point mapping for the specified light type.
         * @param lightEnum The type of light.
         * @return The associated light group number. 

</member>
        <member name="M:Csf.Ig.IgInfo.setDefaultLightRwa(System.Int32,System.Int32)">
Sets up the standard light point mapping for rotary wing aircrafts.
         * @param lightEnum The light type.
         * @param groupId The default light group id.

</member>
        <member name="M:Csf.Ig.IgInfo.getDefaultLightFwa(System.Int32)">
Returns the standard light point mapping for the specified light type.
         * @param lightEnum The type of light.
         * @return The associated light group number. 

</member>
        <member name="M:Csf.Ig.IgInfo.setDefaultLightFwa(System.Int32,System.Int32)">
Sets up the standard light point mapping for fixed wing aircrafts.
         * @param lightEnum The light type.
         * @param groupId The default light group id.

</member>
        <member name="M:Csf.Ig.IgInfo.getDefaultEdmEntity(Csf.Osal.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the default EDM entity type. 
         * This version will simply return the first entity encountered.
         * @param defaultEdmType The default EDM entity type to be used. 
         * @return True if the model lookup was successful.

</member>
        <member name="M:Csf.Ig.IgInfo.getDefaultEdmEntity(Csf.Ig.VisualModel.Category.Enum,Csf.Osal.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the default EDM entity type for the specified category.
         * @param cat The model category.
         * @param defaultEdmType The default EDM entity type for the specified category.
         * @return True if the model lookup was successful.

</member>
        <member name="M:Csf.Ig.IgInfo.getModel(Csf.Osal.String,Csf.Ig.VisualModel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the visual model that is associated with the specified EDM type.
         * @param edmType The name of the EDM entity.
         * @param model The visual model that corresponds to the EDM entity type.
         * @return True if the model lookup was successful.

</member>
        <member name="M:Csf.Ig.IgInfo.getModels(std.vector&lt;Csf.Ig.VisualModel,std.allocator&lt;Csf.Ig.VisualModel&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Get list of visual models.
         * @param models The vector passed in by user to store the list of models.
         * @return True if there is atleast one model present.

</member>
        <member name="M:Csf.Ig.IgInfo.getTestPatterns(std.vector&lt;Csf.Ig.VisualTestPattern,std.allocator&lt;Csf.Ig.VisualTestPattern&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Get list of visual test patterns.
         * @param testPatterns The reference to the vector that will store the testpatterns. 
         * @return True if atleast 1 testpattern defined.

</member>
        <member name="M:Csf.Ig.IgInfo.getAllAirfields(std.vector&lt;Csf.Ig.IgInfo.AirportInfo,std.allocator&lt;Csf.Ig.IgInfo.AirportInfo&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns a list of all airports.
         * @param airfields A reference to a list of airfields to be populated.
         * @return true if sucessful; otherwise false.

</member>
        <member name="M:Csf.Ig.IgInfo.getAirfield(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Ig.IgInfo.Seasons,Csf.Ig.IgInfo.AirportInfo*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Searches for specified airport (icao and season) and updates record if found.
         * @param icao The icao airport identifier for the airport (i.e. KMSP, KIAH, KATL).
         * @param season The season.
         * @param record the record to store the IG AirportInfo in.
         * @return true if sucessful; otherwise false.

</member>
        <member name="M:Csf.Ig.IgInfo.haveCustom(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Ig.IgInfo.Seasons)">
returns true if Ig has a custom for the specified airfield and season.
         * @param icao The icao airport identifier for the airport (i.e. KMSP, KIAH, KATL).
         * @param season The season.
         * @return true if IG has a custom for the specified airfield and season.

</member>
        <member name="M:Csf.Ig.IgInfo.isCustom(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
returns true if Ig has a custom for the specified airfield.
         * @param icao The icao airport identifier for the airport (i.e. KMSP, KIAH, KATL).
         * @return true if IG has a custom for the specified airfield.

</member>
        <member name="F:Csf.Ig.IgInfo.AirportInfo.m_runways">
Runways for the airport. 
</member>
        <member name="M:Csf.Ig.IgInfo.AirportInfo.print">
Prints all runways and info to std::cout.
            * @note Not for use in real-time or sim elements.

</member>
        <member name="M:Csf.Ig.IgInfo.AirportInfo.getRunwayList(std.vector&lt;Csf.Osal.String,std.allocator&lt;Csf.Osal.String&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
retrieve the list of runways for this airport.
            * @param list The vector to place the list in.

</member>
        <member name="M:Csf.Ig.IgInfo.AirportInfo.getRunway(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
returns a runway record constaining the specified runway.
            * @param runway The runway identifier (i.e. 30L, 12R).
            * @param valid indicates validity of return.
            * @return The runway record if found; otherwise a blank record.            

</member>
        <member name="M:Csf.Ig.IgInfo.AirportInfo.getRunway(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
returns a runway record constaining the specified runway.
            * @param runway The runway identifier (i.e. 30L, 12R).
            * @return The runway record if found; otherwise a blank record.

</member>
        <member name="M:Csf.Ig.IgInfo.AirportInfo.getLightGroup(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
returns the light group for the specified runway.
            * @param runway The runway identifier (i.e. 30L, 12R).
            * @return the light group if sucessful; -1 otherwise.

</member>
        <member name="F:Csf.Ig.IgInfo.AirportInfo.sandDust">
Indicates that this airport has the sand/dust runway contaminant. 
</member>
        <member name="F:Csf.Ig.IgInfo.AirportInfo.partiallyCleared">
Indicates that this airport has the wet runway contaminant. 
</member>
        <member name="F:Csf.Ig.IgInfo.AirportInfo.patchySnow">
Indicates that this airport has the patchy snow runway contaminant. 
</member>
        <member name="F:Csf.Ig.IgInfo.AirportInfo.snow">
Indicates that this airport has the snow runway contaminant. 
</member>
        <member name="F:Csf.Ig.IgInfo.AirportInfo.patchyIce">
Indicates that this airport has the patchy ice runway contaminant. 
</member>
        <member name="F:Csf.Ig.IgInfo.AirportInfo.ice">
Indicates that this airport has the ice runway contaminant. 
</member>
        <member name="F:Csf.Ig.IgInfo.AirportInfo.patchyWet">
Indicates that this airport has the patchy wet runway contaminant. 
</member>
        <member name="F:Csf.Ig.IgInfo.AirportInfo.wet">
Indicates that this airport has the wet runway contaminant. 
</member>
        <member name="F:Csf.Ig.IgInfo.AirportInfo.numberRunwayContaminants">
Indicates the number of runway contaminants available at this airport. 
</member>
        <member name="F:Csf.Ig.IgInfo.AirportInfo.spring">
Indicates that this airport has a spring version. 
</member>
        <member name="F:Csf.Ig.IgInfo.AirportInfo.summer">
Indicates that this airport has a summer version. 
</member>
        <member name="F:Csf.Ig.IgInfo.AirportInfo.autumn">
Indicates that this airport has a autumn version. 
</member>
        <member name="F:Csf.Ig.IgInfo.AirportInfo.winter">
Indicates that this airport has a winter version. 
</member>
        <member name="F:Csf.Ig.IgInfo.AirportInfo.guidanceControls">
Indicates that this airport has guidance controls. 
</member>
        <member name="F:Csf.Ig.IgInfo.AirportInfo.slopingRunways">
Indicates that this airport has sloping runways. 
</member>
        <member name="F:Csf.Ig.IgInfo.AirportInfo.surfMaterialCodes">
Indicates that surface material codes are available at this airport.  
</member>
        <member name="F:Csf.Ig.IgInfo.AirportInfo.smgcs">
Indicats that SMGCS is available at this airport. 
</member>
        <member name="F:Csf.Ig.IgInfo.AirportInfo.userData">
The user data that was sent in with the corresponding request. 
</member>
        <member name="F:Csf.Ig.IgInfo.AirportInfo.runwayCount">
The number of runways present at this airport. 
</member>
        <member name="F:Csf.Ig.IgInfo.AirportInfo.gateCount">
The number of gates present at this airport. 
</member>
        <member name="F:Csf.Ig.IgInfo.AirportInfo.icao">
The ICAO of the airport. 
</member>
        <member name="F:Csf.Ig.IgInfo.AirportInfo.index">
The airport index returned from the IG. 
</member>
        <member name="M:Csf.Ig.IgInfo.AirportInfo.#ctor(Csf.Ig.IgInfo.AirportInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Ctor. 
            * @param rhs The source object to copy. 

</member>
        <member name="M:Csf.Ig.IgInfo.AirportInfo.#ctor">
Ctor. 
</member>
        <member name="T:Csf.Ig.IgInfo.AirportInfo">
Airport information. 
</member>
        <member name="F:Csf.Ig.IgInfo.RunwayInfo.headingB">
The heading for side B of the runway. 
</member>
        <member name="F:Csf.Ig.IgInfo.RunwayInfo.altitudeB">
The altitude for side B of the runway. 
</member>
        <member name="F:Csf.Ig.IgInfo.RunwayInfo.lonB">
The longitude for side B of the runway. 
</member>
        <member name="F:Csf.Ig.IgInfo.RunwayInfo.latB">
The latitude for side B of the runway. 
</member>
        <member name="F:Csf.Ig.IgInfo.RunwayInfo.headingA">
The heading for side A of the runway. 
</member>
        <member name="F:Csf.Ig.IgInfo.RunwayInfo.altitudeA">
The altitude for side A of the runway. 
</member>
        <member name="F:Csf.Ig.IgInfo.RunwayInfo.lonA">
The longitude for side A of the runway. 
</member>
        <member name="F:Csf.Ig.IgInfo.RunwayInfo.latA">
The latitude for side A of the runway. 
</member>
        <member name="F:Csf.Ig.IgInfo.RunwayInfo.lightGroup">
The light group number. 
</member>
        <member name="F:Csf.Ig.IgInfo.RunwayInfo.runwayB">
The id pf runway side B. 
</member>
        <member name="F:Csf.Ig.IgInfo.RunwayInfo.runwayA">
The id of runway side A. (i.e. '34L'). 
</member>
        <member name="F:Csf.Ig.IgInfo.RunwayInfo.icao">
The airport ICAO code. 
</member>
        <member name="T:Csf.Ig.IgInfo.RunwayInfo">
Runway information structure. 
</member>
        <member name="F:e_autumn">
Autumn. 
</member>
        <member name="F:e_spring">
Spring. 
</member>
        <member name="F:e_winter">
Winter. 
</member>
        <member name="F:e_summer">
Summer. 
</member>
        <member name="T:Csf.Ig.IgInfo.Seasons">
The season enumerators. 
</member>
        <member name="M:Csf.Ig.IgInfo.Dispose">
Dtor. 
</member>
        <member name="M:Csf.Ig.IgInfo.#ctor(Csf.Utils.Database.ConnectionInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Ctor.
         * @param dbInfo The database connection info. 

</member>
        <member name="M:Csf.Ig.IgInfo.#ctor">
Ctor. 
</member>
        <member name="T:Csf.Ig.IgInfo">
The IgInfo class provides information about IgModels. 
</member>
        <member name="F:Csf.Ig.VisualModel.m_submodelIter">
Submodel iterator. 
</member>
        <member name="F:Csf.Ig.VisualModel.m_lightIter">
Light iterator. 
</member>
        <member name="F:Csf.Ig.VisualModel.m_submodel_map">
Map to store submodel information. Submodel enum name to submodel #. 
</member>
        <member name="F:Csf.Ig.VisualModel.m_light_map">
Map to store light information. Light enum name to light group Id.  
</member>
        <member name="F:Csf.Ig.VisualModel.m_zOffset">
The Z offset fopr the model origin. 
</member>
        <member name="F:Csf.Ig.VisualModel.m_subCategory">
The submodel category. 
</member>
        <member name="F:Csf.Ig.VisualModel.m_category">
The model category. 
</member>
        <member name="F:Csf.Ig.VisualModel.m_description">
The description of the model. 
</member>
        <member name="F:Csf.Ig.VisualModel.m_name">
The name of the model. 
</member>
        <member name="F:Csf.Ig.VisualModel.m_select">
The default model select. 
</member>
        <member name="F:Csf.Ig.VisualModel.m_slotNumber">
The model slot number. 
</member>
        <member name="M:Csf.Ig.VisualModel.clone(Csf.Ig.VisualModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Clone function.
         * @param copy The source object to copy.

</member>
        <member name="M:Csf.Ig.VisualModel.hasCustomSubmodels">
Indicates the presence of of custom (non-standard) submodels.
         * @return True indicates that the model deviates from the standard.

</member>
        <member name="M:Csf.Ig.VisualModel.getSubmodel(System.Int32)">
Gets the submodel information for the model.         
         * @param submodelEnum The submodel type enum.
         * @return The custom id number.   

</member>
        <member name="M:Csf.Ig.VisualModel.setSubmodel(System.Int32,System.Int32)">
Sets the submodel information for the model. 
         * @param submodelEnum The submodel type enum.
         * @param submodelId The custom id number. 

</member>
        <member name="M:Csf.Ig.VisualModel.hasCustomLights">
Indicates the presence of of custom (non-standard) lights.
         * @return True indicates that the model deviates from the standard.

</member>
        <member name="M:Csf.Ig.VisualModel.getLight(System.Int32)">
Gets the model light information.
         * @param lightEnum The light id.
         * @return The group Id.

</member>
        <member name="M:Csf.Ig.VisualModel.setLight(System.Int32,System.Int32)">
Set the model light information.
         * @param lightEnum The light type enum.
         * @param groupId The group id.

</member>
        <member name="M:Csf.Ig.VisualModel.setZOffset(System.Double)">
Set model z offset.
         * @param offset The specified Z offset from the model origin.

</member>
        <member name="M:Csf.Ig.VisualModel.getZOffset">
Get model z offset.
         * @return The specified Z offset from the model origin.

</member>
        <member name="M:Csf.Ig.VisualModel.setSubCategory(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Set model sub-category.
         * @param subCategory The model sub-category.

</member>
        <member name="M:Csf.Ig.VisualModel.getSubCategory">
Get model sub-category.
         * @return The model sub-category.

</member>
        <member name="M:Csf.Ig.VisualModel.setCategory(Csf.Ig.VisualModel.Category.Enum)">
Set model category.
         * @param category The model category.

</member>
        <member name="M:Csf.Ig.VisualModel.getCategory">
Get model category.
         * @return The model category.

</member>
        <member name="M:Csf.Ig.VisualModel.setDescription(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Set model description.
         * @param description The description of the model.

</member>
        <member name="M:Csf.Ig.VisualModel.getDescription">
Get model description.
         * @return The description of the model.

</member>
        <member name="M:Csf.Ig.VisualModel.setName(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Set model name.
         * @param name The name of the model.

</member>
        <member name="M:Csf.Ig.VisualModel.getName">
Get model name.
         * @return The name of the model.

</member>
        <member name="M:Csf.Ig.VisualModel.setSelect(System.UInt32)">
Set model select.
         * @param select The model select.

</member>
        <member name="M:Csf.Ig.VisualModel.getSelect">
Get model select.
         * @return The model select.

</member>
        <member name="M:Csf.Ig.VisualModel.setSlotNumber(System.UInt32)">
Set model slot number.
         * @param slotNumber The visual slot number.

</member>
        <member name="M:Csf.Ig.VisualModel.getSlotNumber">
Get model slot number.
         * @return The visual slot number.

</member>
        <member name="M:Csf.Ig.op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Ig.VisualModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Output Stream operator.
         * @param output The output stream.
         * @param rhs The object to redirect to the output stream.

</member>
        <member name="M:Csf.Ig.VisualModel.op_Equality(Csf.Ig.VisualModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Equality operator.
         * @param rhs The visual model to compare.

</member>
        <member name="M:Csf.Ig.VisualModel.op_LessThan(Csf.Ig.VisualModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Less than operator.
         * @param rhs Compares to see if lhs is less than rhs. 

</member>
        <member name="M:Csf.Ig.VisualModel.op_Assign(Csf.Ig.VisualModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment operator.
         * @param rhs The source object.

</member>
        <member name="M:Csf.Ig.VisualModel.Dispose">
Dtor. 
</member>
        <member name="M:Csf.Ig.VisualModel.#ctor(Csf.Ig.VisualModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy Ctor.
         * @param copy The source object to copy.

</member>
        <member name="M:Csf.Ig.VisualModel.#ctor(System.UInt32,System.UInt32,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Ig.VisualModel.Category.Enum,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
Ctor. 
         * @param slotNumber The model slot number assignment.
         * @param select The default model select.
         * @param name The name of the visual model.
         * @param description The description of the visual model.
         * @param category The category of the model.
         * @param subCategory The sub-category of the model.
         * @param offset The Z offset from the model origin.

</member>
        <member name="M:Csf.Ig.VisualModel.#ctor">
Ctor. 
</member>
        <member name="M:Csf.Ig.VisualModel.Category.#ctor">
Ctor. 
</member>
        <member name="F:e_categoryRange">
The total number of categories. 
</member>
        <member name="F:e_groundModel">
Ground model. 
</member>
        <member name="F:e_seaModel">
Sea model. 
</member>
        <member name="F:e_airModel">
Air model. 
</member>
        <member name="T:Csf.Ig.VisualModel.Category.Enum">
The list of visual model categories. 
</member>
        <member name="T:Csf.Ig.VisualModel.Category">
Visual model category enumeration. 
</member>
        <member name="T:Csf.Ig.VisualModel">
Manages the visual model types. 
</member>
        <member name="F:Csf.Ig.VisualTestPattern.m_description">
Test Pattern Description. 
</member>
        <member name="F:Csf.Ig.VisualTestPattern.m_number">
Test Pattern Number. 
</member>
        <member name="M:Csf.Ig.VisualTestPattern.setDescription(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Sets the test pattern description.
         * @param description The test pattern description.

</member>
        <member name="M:Csf.Ig.VisualTestPattern.getDescription">
Gets the test pattern description.
         * @return The test pattern description.

</member>
        <member name="M:Csf.Ig.VisualTestPattern.setNumber(System.Int32!System.Runtime.CompilerServices.IsConst)">
Sets the test pattern number.
         * @param number The test pattern number.

</member>
        <member name="M:Csf.Ig.VisualTestPattern.getNumber">
Gets the test pattern number.
         * @return The test patten number.

</member>
        <member name="M:Csf.Ig.VisualTestPattern.op_Equality(Csf.Ig.VisualTestPattern!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Equality operator.
         * @param rhs Test pattern object to compare.

</member>
        <member name="M:Csf.Ig.VisualTestPattern.op_LessThan(Csf.Ig.VisualTestPattern!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Less than operator.
         * @param rhs Checks to see if this test patten id number is less
         * than the other test pattern id number.
         * @return Returns true if lhs id number is less than rhs id number.

</member>
        <member name="M:Csf.Ig.VisualTestPattern.op_Assign(Csf.Ig.VisualTestPattern!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment operator.
         * @param rhs The source object.

</member>
        <member name="M:Csf.Ig.VisualTestPattern.Dispose">
Dtor. 
</member>
        <member name="M:Csf.Ig.VisualTestPattern.#ctor(Csf.Ig.VisualTestPattern!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy Ctor.
         * @param copy The source object to copy.

</member>
        <member name="M:Csf.Ig.VisualTestPattern.#ctor(System.Int32,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Ctor.
         * @param number The test pattern number.
         * @param description The test pattern description.

</member>
        <member name="M:Csf.Ig.VisualTestPattern.#ctor">
Ctor. 
</member>
        <member name="T:Csf.Ig.VisualTestPattern">
Manage visual test patterns. 
</member>
        <member name="M:Csf.Utils.Nav.AirwaysDb.getAirwaySize">

Queries
@brief getAirwaysize
@return number of Airways in Database

</member>
        <member name="M:Csf.Utils.Nav.AirwaysDb.getStatus">

@brief Get the status of the database 
@return Boolean describing the initialization status of the database

</member>
        <member name="M:Csf.Utils.Nav.AirwaysDb.initialize(Csf.Utils.Database.ConnectionInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Initialize
@arg dbInfo Database connection on which to get data
@throw std::runtime_error if initialization fails

</member>
        <member name="M:Csf.Utils.Nav.AirwaysDb.initialize(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Intialize database
@arg directory File containing airway data
@throw std::runtime_error if initialization fails

</member>
        <member name="M:Csf.Utils.Nav.AirwaysDb.Dispose">

@brief Destructor

</member>
        <member name="M:Csf.Utils.Nav.AirwaysDb.#ctor(System.Double,System.Double,System.Double,Csf.Utils.Database.ConnectionInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Constructor
@param centerX Latitude X coordinate of the database center
@param centerY Longitude Y coordinate of the database center
@param radiusInDegrees Radius of the database coverage area 
@param dbInfo Database connection containing airway data

</member>
        <member name="M:Csf.Utils.Nav.AirwaysDb.#ctor(System.Double,System.Double,System.Double,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Constructor
@param centerX Latitude X coordinate of the database center
@param centerY Longitude Y coordinate of the database center
@param radiusInDegrees Radius of the database coverage area 
@param file containing airway data

</member>
        <member name="M:Csf.Utils.Nav.AirwaysDb.#ctor(System.Double,System.Double,System.Double)">

@brief Constructor
@param centerX Latitude X coordinate of the database center
@param centerY Longitude Y coordinate of the database center
@param diameterInDegrees Diameter of the database coverage area 

</member>
        <member name="M:Csf.Utils.Nav.AirwaysDb.#ctor(Csf.Utils.Database.ConnectionInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Constructor - Entire world, centered at 0,0 
@param dbInfo Database connection containing airway data

</member>
        <member name="M:Csf.Utils.Nav.AirwaysDb.#ctor(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Constructor - Entire world, centered at 0,0 
@param file containing airway data

</member>
        <member name="M:Csf.Utils.Nav.AirwaysDb.#ctor">

@brief Default Constructor - Entire world, centered at 0,0 

</member>
        <member name="T:Csf.Utils.Nav.AirwaysDb">
@brief Data Store of Airways in a grid data structure

Class object to store Airways read from a database. The Airways
are organized in a hierarchical data structure to allow efficient searches
for airway near a given position. 
</member>
        <member name="M:Csf.Utils.Nav.Airway.clone(Csf.Utils.Nav.Airway!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Helper function for copy
</member>
        <member name="F:Csf.Utils.Nav.Airway.topLeft">
@brief  coordinates for the airway boundaries
</member>
        <member name="M:Csf.Utils.Nav.Airway.inRange(Csf.Utils.Nav.Position,Csf.Utils.Nav.Position)">
@brief checks to see see if current airway within the view
</member>
        <member name="M:Csf.Utils.Nav.Airway.setBoundaries">
@brief post-construction function that sets max and min 
boundaries for given Airway.
</member>
        <member name="F:Csf.Utils.Nav.Airway.m_wpList">
@brief List of waypoint Positions for a given airway
</member>
        <member name="F:Csf.Utils.Nav.Airway.m_icao">
@brief ICAO code 
</member>
        <member name="F:Csf.Utils.Nav.Airway.m_description">
@brief Description of the Airway
</member>
        <member name="F:Csf.Utils.Nav.Airway.m_uniqueDbId">
@brief Id used to uniquely distinguish every Airway entry in the database
</member>
        <member name="M:Csf.Utils.Nav.Airway.addWaypoint(Csf.Utils.Nav.Waypoint,System.Int32)">
@brief waypoint adder takes sequence number (Int32) as key.
</member>
        <member name="F:Csf.Utils.Nav.Airway.m_identifier">
@brief Airway identifier
</member>
        <member name="M:Csf.Utils.Nav.Airway.put(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Output function
</member>
        <member name="M:Csf.Utils.Nav.op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Utils.Nav.Airway!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief output stream operator
</member>
        <member name="M:Csf.Utils.Nav.Airway.op_Equality(Csf.Utils.Nav.Airway!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Equality operator
</member>
        <member name="M:Csf.Utils.Nav.Airway.op_LessThan(Csf.Utils.Nav.Airway!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Less than operator
</member>
        <member name="M:Csf.Utils.Nav.Airway.op_Assign(Csf.Utils.Nav.Airway!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Assignment operator
</member>
        <member name="M:Csf.Utils.Nav.Airway.Dispose">
@brief Destructor
</member>
        <member name="M:Csf.Utils.Nav.Airway.#ctor(Csf.Utils.Nav.Airway!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Copy Constructor
</member>
        <member name="M:Csf.Utils.Nav.Airway.#ctor">
@brief Constructor
</member>
        <member name="M:Csf.Utils.Nav.Waypoint.clone(Csf.Utils.Nav.Waypoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Helper function for copy
</member>
        <member name="M:Csf.Utils.Nav.Waypoint.getYCoordinate(Csf.Utils.Nav.Waypoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Get Y Coordinate
</member>
        <member name="M:Csf.Utils.Nav.Waypoint.getXCoordinate(Csf.Utils.Nav.Waypoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Get X Coordinate 
</member>
        <member name="F:Csf.Utils.Nav.Waypoint.m_icao">
@brief ICAO code 
</member>
        <member name="F:Csf.Utils.Nav.Waypoint.m_description">
@brief Description of the waypoint
</member>
        <member name="F:Csf.Utils.Nav.Waypoint.m_uniqueDbId">
@brief Id used to uniquely distinguish every waypoint entry in the database
</member>
        <member name="F:Csf.Utils.Nav.Waypoint.m_magneticVariation">
@brief Magnetic Variation at waypoint position
</member>
        <member name="F:Csf.Utils.Nav.Waypoint.m_identifier">
@brief Waypoint identifier
</member>
        <member name="F:Csf.Utils.Nav.Waypoint.m_position">
@brief Latitude and Logitude position of the waypoint
</member>
        <member name="M:Csf.Utils.Nav.Waypoint.put(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Output function
</member>
        <member name="M:Csf.Utils.Nav.op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Utils.Nav.Waypoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief output stream operator
</member>
        <member name="M:Csf.Utils.Nav.Waypoint.op_Equality(Csf.Utils.Nav.Waypoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Equality operator
</member>
        <member name="M:Csf.Utils.Nav.Waypoint.op_LessThan(Csf.Utils.Nav.Waypoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Less than operator
</member>
        <member name="M:Csf.Utils.Nav.Waypoint.op_Assign(Csf.Utils.Nav.Waypoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Assignment operator
</member>
        <member name="M:Csf.Utils.Nav.Waypoint.Dispose">
@brief Destructor
</member>
        <member name="M:Csf.Utils.Nav.Waypoint.#ctor(Csf.Utils.Nav.Waypoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Copy Constructor
</member>
        <member name="M:Csf.Utils.Nav.Waypoint.#ctor">
@brief Constructor
</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.getCollocatedDme(Csf.Utils.Nav.Position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64,Csf.Utils.Nav.Dme*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Get the collocated DME
@param pos Position of main navaid
@param uniqueDbId Database Id of main navaid 
@param collocatedDme Reference to facility
@return Success

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.getAllDmes(Csf.Utils.Nav.Position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,std.list&lt;Csf.Utils.Nav.Dme,std.allocator&lt;Csf.Utils.Nav.Dme&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Get all VORs in a specified region
@param pos Position on which to center the search
@param radiusInDegrees Search radius
@param dmeList Reference to facility list
@return Success

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.getClosestDmeWithFrequency(Csf.Utils.Nav.Position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64,System.Double,Csf.Utils.Nav.Dme*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Find the closest DME with the specified frequency
@param pos Position on which to center search 
@param frequency Desired frequency
@param radiusInDegrees Search radius
@param closestDme Reference to facility
@return Success

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.getClosestDme(Csf.Utils.Nav.Position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,Csf.Utils.Nav.Dme*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Find the closest DME
@param pos Position on which to center search
@param radiusInDegrees Search radius
@param closestDme Reference to facility
@return Success

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.getDmeSize">
DME Queries

@brief getDmeSize
@return Number of DMEs in Database

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.getCollocatedTacan(Csf.Utils.Nav.Position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64,Csf.Utils.Nav.Tacan*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief 
@param pos Position of main navaid
@param uniqueDbId Database Id of main navaid 
@param collocatedTacan Reference to facility
@return Success

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.getAllTacans(Csf.Utils.Nav.Position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,std.list&lt;Csf.Utils.Nav.Tacan,std.allocator&lt;Csf.Utils.Nav.Tacan&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Get all Tacans in a specified region
@param pos center of the search
@param radiusInDegrees search radius
@param tacanList Reference to facility list 
@return Success

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.getClosestTacanWithFrequency(Csf.Utils.Nav.Position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64,System.Double,Csf.Utils.Nav.Tacan*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Find the closest Tacan with the specified frequency
@param pos Position on which to center the search
@param frequency Desired frequency
@param radiusInDegrees Search radius
@param closestTacan Reference to facility
@return Success

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.getClosestTacan(Csf.Utils.Nav.Position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,Csf.Utils.Nav.Tacan*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Get the closest Tacan to the specified position
@param pos Position on which to center the search
@param radiusInDegrees Search radius
@param closestTacan Reference to facility
@return Success

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.getTacanSize">
TACAN Queries

@brief getTacanSize
@return number of TACANs in Database

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.getAllVors(Csf.Utils.Nav.Position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,std.list&lt;Csf.Utils.Nav.Vor,std.allocator&lt;Csf.Utils.Nav.Vor&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Get all VORs in a specified region
@param pos center of the search
@param radiusInDegrees search radius
@param vorList Reference to facility list 
@return Success

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.getClosestVorWithFrequency(Csf.Utils.Nav.Position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64,System.Double,Csf.Utils.Nav.Vor*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Get the closest Vor with the specified frequency
@param pos Position on which to center the search
@param frequency Desired frequency
@param radiusInDegrees Search radius
@param closestVor The closest Vor with desired frequency
@return Success

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.getClosestVor(Csf.Utils.Nav.Position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,Csf.Utils.Nav.Vor*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Find Closest VOR to specified position
@param pos Position on which to center the search
@param radiusInDegrees Search Readus
@param closestVor The closest Vor with desired frequency   
@return Success

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.getVorSize">
VOR Queries

@brief getVorSize
@return number of VORs in Database

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.getAllNdbs(Csf.Utils.Nav.Position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,std.list&lt;Csf.Utils.Nav.Ndb,std.allocator&lt;Csf.Utils.Nav.Ndb&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Get all Non-directional Beacons in a specified region
@param pos Position on which to center the search
@param radiusInDegrees Search radius
@param ndbList Reference to facility list
@return Success

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.getClosestNdbWithFrequency(Csf.Utils.Nav.Position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64,System.Double,Csf.Utils.Nav.Ndb*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Find closest NDB with specified frequency
@param pos Position on which to center the search
@param frequency Desired frequency
@param radiusInDegrees Search radius
@param closestNdb Reference to facility
@return Success

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.getClosestNdb(Csf.Utils.Nav.Position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,Csf.Utils.Nav.Ndb*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Find closest Non-directional Beacon to specified position
@param pos Position on which to center the search
@param radiusInDegrees Search radius
@param closestNdb Reference to facility
@return Success

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.getNdbSize">
NDB Queries

@brief getNdbSize
@return number of NDBs in Database

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.getAllMarkerBeacons(Csf.Utils.Nav.Position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,std.list&lt;Csf.Utils.Nav.MarkerBeacon,std.allocator&lt;Csf.Utils.Nav.MarkerBeacon&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Find all Marker Beacons in search region
@param pos Position on which to center the search
@param radiusInDegrees Search radius
@param markerBeaconList Reference to facility list
@return Success

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.getClosestMarkerBeacon(Csf.Utils.Nav.Position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,Csf.Utils.Nav.MarkerBeacon*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Find closest Marker Beacon to specified position
@param pos Position on which to center the search
@param radiusInDegrees Search radius
@param closestMarkerBeacon Reference to facility
@return Success

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.getMarkerBeaconSize">
Marker Beacon Queries

@brief getMarkerBeaconSize
@return number of Marker Beacons in Database

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.getAllCommFacilities(Csf.Utils.Nav.Position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,std.list&lt;Csf.Utils.Nav.CommFacility,std.allocator&lt;Csf.Utils.Nav.CommFacility&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Find all COMM Facilities in the specified region
@param pos Position on which to center the search
@param radiusInDegrees Search radius
@param commList Reference to facility list
@return Success

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.getClosestCommFacilityWithFrequency(Csf.Utils.Nav.Position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64,System.Double,Csf.Utils.Nav.CommFacility*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Find closest COMM Facility with specified Frequency
@param pos Position on which to center the search
@param frequency Desired frequency
@param radiusInDegrees Search radius
@param closestComm Reference to facility
@return Success

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.getClosestCommFacility(Csf.Utils.Nav.Position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,Csf.Utils.Nav.CommFacility*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Find closest COMM Facility to specified position
@param pos Position on which to center the search
@param radiusInDegrees Search radius
@param closestComm Reference to facility
@return Success

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.getCommFacilitySize">
Comm Facility Queries

@brief getCommFacilitySize
@return number of Comm Facilities in Database

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.getAllGlsApproaches(Csf.Utils.Nav.Position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,std.list&lt;Csf.Utils.Nav.GlsApproach,std.allocator&lt;Csf.Utils.Nav.GlsApproach&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Get all GLS Approaches in specified region
@param pos Position on which to center the search
@param radiusInDegrees Search radius
@param glsList Reference to facility list
@return Success

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.getGlsApproach(Csf.Utils.Nav.Position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64,System.Double,Csf.Utils.Nav.GlsApproach*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Get GLS Approach that matches specified GLS Channel Number
@param pos Position on which to center the search
@param glsChannelNumber The gls channel number.
@param radiusInDegrees Search radius
@param matchingGls Reference to facility
@return Success

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.getGlsApproachSize">
GLS Queries

@brief getGlsApproachSize
@return number of GLS Approaches in Database

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.getAllIlsFacilities(Csf.Utils.Nav.Position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,std.list&lt;Csf.Utils.Nav.IlsFacility,std.allocator&lt;Csf.Utils.Nav.IlsFacility&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Get all ILS Facilities in specified region
@param pos Position on which to center the search
@param radiusInDegrees Search radius
@param ilsList Reference to facility list
@return Success

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.getClosestIlsFacilityWithLocalizerFrequency(Csf.Utils.Nav.Position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64,System.Double,Csf.Utils.Nav.IlsFacility*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Find closest ILS Facility with specified Frequency
@param pos&gt; Position on which to center the search
@param frequency Desired frequency
@param radiusInDegrees Search radius
@param closestIls Reference to facility
@return Success

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.getClosestIlsFacility(Csf.Utils.Nav.Position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,Csf.Utils.Nav.IlsFacility*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Get closest ILS Facility to specified position
@param pos Position on which to center the search
@param radiusInDegrees Search radius
@param closestIls Reference to facility
@return Success

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.getIlsFacilitySize">

Queries

ILS Queries

@brief getIlsFacilitySize
@return number of ILS Facilities in Database

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.getStatus">

@brief Get the status of the database 
@return Boolean describing the initialization status of the database

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.initialize(Csf.Utils.Database.ConnectionInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Initialize
@arg dbInfo Database connection on which to get data
@throw std::runtime_error if initialization fails

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.initialize(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Intialize database
@arg directory File containing navaid data
@throw std::runtime_error if initialization fails

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.Dispose">

@brief Destructor

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.#ctor(System.Double,System.Double,System.Double,Csf.Utils.Database.ConnectionInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Constructor
@param centerX Latitude X coordinate of the database center
@param centerY Longitude Y coordinate of the database center
@param radiusInDegrees Radius of the database coverage area 
@param dbInfo Database connection containing navaid data

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.#ctor(System.Double,System.Double,System.Double,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Constructor
@param centerX Latitude X coordinate of the database center
@param centerY Longitude Y coordinate of the database center
@param radiusInDegrees Radius of the database coverage area 
@param file containing navaid data

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.#ctor(System.Double,System.Double,System.Double)">

@brief Constructor
@param centerX Latitude X coordinate of the database center
@param centerY Longitude Y coordinate of the database center
@param diameterInDegrees Diameter of the database coverage area 

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.#ctor(Csf.Utils.Database.ConnectionInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Constructor - Entire world, centered at 0,0 
@param dbInfo Database connection containing navaid data

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.#ctor(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Constructor - Entire world, centered at 0,0 
@param file containing navaid data

</member>
        <member name="M:Csf.Utils.Nav.NavAidsDb.#ctor">

@brief Default Constructor - Entire world, centered at 0,0 

</member>
        <member name="T:Csf.Utils.Nav.NavAidsDb">
@brief Data Store of nav aids in a grid data structure

Class object to store nav aids read from a database. The nav aids
are organized in a hierarchical data structure to allow efficient searches
for nav aids near a given position. 
</member>
        <member name="M:Csf.Utils.Nav.Dme.clone(Csf.Utils.Nav.Dme!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Helper function for copy
</member>
        <member name="M:Csf.Utils.Nav.Dme.getYCoordinate(Csf.Utils.Nav.Dme!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Get Y Coordinate
</member>
        <member name="M:Csf.Utils.Nav.Dme.getXCoordinate(Csf.Utils.Nav.Dme!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Get X Coordinate 
</member>
        <member name="M:Csf.Utils.Nav.Dme.put(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Output function
</member>
        <member name="M:Csf.Utils.Nav.op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Utils.Nav.Dme!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Output stream operator
</member>
        <member name="M:Csf.Utils.Nav.Dme.op_Assign(Csf.Utils.Nav.Dme!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Assignment operator
</member>
        <member name="M:Csf.Utils.Nav.Dme.Dispose">
@brief Destructor
</member>
        <member name="M:Csf.Utils.Nav.Dme.#ctor(Csf.Utils.Nav.Dme!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Copy Constructor
</member>
        <member name="M:Csf.Utils.Nav.Dme.#ctor">
@brief Constructor
</member>
        <member name="T:Csf.Utils.Nav.Dme">
@brief Distance Measuring Equipment Facility
</member>
        <member name="M:Csf.Utils.Nav.Tacan.clone(Csf.Utils.Nav.Tacan!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Helper function for copy
</member>
        <member name="M:Csf.Utils.Nav.Tacan.getYCoordinate(Csf.Utils.Nav.Tacan!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Get Y Coordinate
</member>
        <member name="M:Csf.Utils.Nav.Tacan.getXCoordinate(Csf.Utils.Nav.Tacan!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Get X Coordinate 
</member>
        <member name="M:Csf.Utils.Nav.Tacan.put(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Output function
</member>
        <member name="M:Csf.Utils.Nav.op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Utils.Nav.Tacan!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Output stream operator
</member>
        <member name="M:Csf.Utils.Nav.Tacan.op_Assign(Csf.Utils.Nav.Tacan!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Assignment operator
</member>
        <member name="M:Csf.Utils.Nav.Tacan.Dispose">
@brief Destructor
</member>
        <member name="M:Csf.Utils.Nav.Tacan.#ctor(Csf.Utils.Nav.Tacan!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Copy Constructor
</member>
        <member name="M:Csf.Utils.Nav.Tacan.#ctor">
@brief Constructor
</member>
        <member name="T:Csf.Utils.Nav.Tacan">
@brief Tactical Air Navigation Facility
</member>
        <member name="M:Csf.Utils.Nav.Vor.clone(Csf.Utils.Nav.Vor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Helper function for copy
</member>
        <member name="M:Csf.Utils.Nav.Vor.getYCoordinate(Csf.Utils.Nav.Vor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Get Y Coordinate
</member>
        <member name="M:Csf.Utils.Nav.Vor.getXCoordinate(Csf.Utils.Nav.Vor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Get X Coordinate 
</member>
        <member name="M:Csf.Utils.Nav.Vor.put(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Output function
</member>
        <member name="M:Csf.Utils.Nav.op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Utils.Nav.Vor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Output stream operator
</member>
        <member name="M:Csf.Utils.Nav.Vor.op_Assign(Csf.Utils.Nav.Vor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Assignment operator
</member>
        <member name="M:Csf.Utils.Nav.Vor.Dispose">
@brief Destructor
</member>
        <member name="M:Csf.Utils.Nav.Vor.#ctor(Csf.Utils.Nav.Vor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Copy Constructor
</member>
        <member name="M:Csf.Utils.Nav.Vor.#ctor">
@brief Constructor
</member>
        <member name="T:Csf.Utils.Nav.Vor">
@brief VHF Omnidirectional Range Facility 
</member>
        <member name="M:Csf.Utils.Nav.VhfNavAid.clone(Csf.Utils.Nav.VhfNavAid!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Helper function for copy
</member>
        <member name="M:Csf.Utils.Nav.VhfNavAid.getYCoordinate(Csf.Utils.Nav.VhfNavAid!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Get Y Coordinate
</member>
        <member name="M:Csf.Utils.Nav.VhfNavAid.getXCoordinate(Csf.Utils.Nav.VhfNavAid!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Get X Coordinate 
</member>
        <member name="M:Csf.Utils.Nav.VhfNavAid.put(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief output function
</member>
        <member name="M:Csf.Utils.Nav.op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Utils.Nav.VhfNavAid!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Output stream operator
</member>
        <member name="M:Csf.Utils.Nav.VhfNavAid.op_Assign(Csf.Utils.Nav.VhfNavAid!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Assignment operator
</member>
        <member name="M:Csf.Utils.Nav.VhfNavAid.Dispose">
@brief Destructor
</member>
        <member name="M:Csf.Utils.Nav.VhfNavAid.#ctor(Csf.Utils.Nav.VhfNavAid!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Copy Constructor
</member>
        <member name="M:Csf.Utils.Nav.VhfNavAid.#ctor">
@brief Constructor
</member>
        <member name="T:Csf.Utils.Nav.VhfNavAid">
@brief Base class for VHF Navigation Aids 
</member>
        <member name="M:Csf.Utils.Nav.Ndb.clone(Csf.Utils.Nav.Ndb!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Helper function for copy
</member>
        <member name="M:Csf.Utils.Nav.Ndb.getYCoordinate(Csf.Utils.Nav.Ndb!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Get Y Coordinate
</member>
        <member name="M:Csf.Utils.Nav.Ndb.getXCoordinate(Csf.Utils.Nav.Ndb!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Get X Coordinate 
</member>
        <member name="F:Csf.Utils.Nav.Ndb.m_toneRepetitionRate">
Char 5 of Facility Characteristics 5.93 - repetitions per minute
</member>
        <member name="F:Csf.Utils.Nav.Ndb.m_tonePitch">
Char 4 of Facility Characteristics 5.93 (400Hz or 1020Hz)
</member>
        <member name="F:Csf.Utils.Nav.Ndb.m_emissionType">
Char 3 of Facility Characteristics 5.93 (A0, A1, A2, A3)
</member>
        <member name="F:Csf.Utils.Nav.Ndb.m_power">
from ARINC 424-18 section 5.35 column 30 range/power 
</member>
        <member name="F:Csf.Utils.Nav.Ndb.m_bfoOperationRequired">
from ARINC 424-18 section 5.35 column 32 collocation
indicates the type of signal emitted by the Navaid 
requires the use of a Beat Frequency Oscillator (BFO) 
to make the morse identifier transmission audible

</member>
        <member name="M:Csf.Utils.Nav.Ndb.put(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Output function
</member>
        <member name="M:Csf.Utils.Nav.op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Utils.Nav.Ndb!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Output stream operator
</member>
        <member name="M:Csf.Utils.Nav.Ndb.op_Assign(Csf.Utils.Nav.Ndb!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Assignment operator
</member>
        <member name="M:Csf.Utils.Nav.Ndb.Dispose">
@brief Destructor
</member>
        <member name="M:Csf.Utils.Nav.Ndb.#ctor(Csf.Utils.Nav.Ndb!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Copy Constructor
</member>
        <member name="M:Csf.Utils.Nav.Ndb.#ctor">
@brief Constructor
</member>
        <member name="T:Csf.Utils.Nav.Ndb">
@brief Non-directional Beacon Facility
</member>
        <member name="M:Csf.Utils.Nav.MarkerBeacon.clone(Csf.Utils.Nav.MarkerBeacon!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Helper function for copy
</member>
        <member name="M:Csf.Utils.Nav.MarkerBeacon.getYCoordinate(Csf.Utils.Nav.MarkerBeacon!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Get Y Coordinate
</member>
        <member name="M:Csf.Utils.Nav.MarkerBeacon.getXCoordinate(Csf.Utils.Nav.MarkerBeacon!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Get X Coordinate 
</member>
        <member name="M:Csf.Utils.Nav.MarkerBeacon.put(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Output function
</member>
        <member name="M:Csf.Utils.Nav.op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Utils.Nav.MarkerBeacon!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Output stream operator
</member>
        <member name="M:Csf.Utils.Nav.MarkerBeacon.op_Assign(Csf.Utils.Nav.MarkerBeacon!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Assignment operator
</member>
        <member name="M:Csf.Utils.Nav.MarkerBeacon.Dispose">
@brief Destructor
</member>
        <member name="M:Csf.Utils.Nav.MarkerBeacon.#ctor(Csf.Utils.Nav.MarkerBeacon!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Copy Constructor
</member>
        <member name="M:Csf.Utils.Nav.MarkerBeacon.#ctor">
@brief Constructor
</member>
        <member name="T:Csf.Utils.Nav.MarkerBeacon">
@brief Marker Beacon Facility
</member>
        <member name="M:Csf.Utils.Nav.CommFacility.clone(Csf.Utils.Nav.CommFacility!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Helper function for copy
</member>
        <member name="M:Csf.Utils.Nav.CommFacility.getYCoordinate(Csf.Utils.Nav.CommFacility!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Get Y Coordinate
</member>
        <member name="M:Csf.Utils.Nav.CommFacility.getXCoordinate(Csf.Utils.Nav.CommFacility!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Get X Coordinate 
</member>
        <member name="F:Csf.Utils.Nav.CommFacility.m_remoteFacility">
@brief defines the Navaid or airports that a Remote
Communications Outlet (RCO) will be transmitting through.
</member>
        <member name="F:Csf.Utils.Nav.CommFacility.m_callSign">
@brief specifies the name of the facility being called.
</member>
        <member name="M:Csf.Utils.Nav.CommFacility.put(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Output function
</member>
        <member name="M:Csf.Utils.Nav.op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Utils.Nav.CommFacility!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Output stream operator
</member>
        <member name="M:Csf.Utils.Nav.CommFacility.op_Assign(Csf.Utils.Nav.CommFacility!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Assignment operator
</member>
        <member name="M:Csf.Utils.Nav.CommFacility.Dispose">
@brief Destructor
</member>
        <member name="M:Csf.Utils.Nav.CommFacility.#ctor(Csf.Utils.Nav.CommFacility!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Copy Constructor
</member>
        <member name="M:Csf.Utils.Nav.CommFacility.#ctor">
@brief Constructor
</member>
        <member name="T:Csf.Utils.Nav.CommFacility">
@brief Communications Facility
</member>
        <member name="M:Csf.Utils.Nav.GlsApproach.clone(Csf.Utils.Nav.GlsApproach!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Helper function for copy
</member>
        <member name="M:Csf.Utils.Nav.GlsApproach.getYCoordinate(Csf.Utils.Nav.GlsApproach!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Get Y Coordinate
</member>
        <member name="M:Csf.Utils.Nav.GlsApproach.getXCoordinate(Csf.Utils.Nav.GlsApproach!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Get X Coordinate 
</member>
        <member name="M:Csf.Utils.Nav.GlsApproach.put(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Output function
</member>
        <member name="M:Csf.Utils.Nav.op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Utils.Nav.GlsApproach!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Output stream operator
</member>
        <member name="M:Csf.Utils.Nav.GlsApproach.op_Assign(Csf.Utils.Nav.GlsApproach!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Assignment operator
</member>
        <member name="M:Csf.Utils.Nav.GlsApproach.Dispose">
@brief Destructor
</member>
        <member name="M:Csf.Utils.Nav.GlsApproach.#ctor(Csf.Utils.Nav.GlsApproach!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Copy Constructor
</member>
        <member name="M:Csf.Utils.Nav.GlsApproach.#ctor">
@brief Constructor
</member>
        <member name="T:Csf.Utils.Nav.GlsApproach">
@brief GLS Facility Approach
</member>
        <member name="M:Csf.Utils.Nav.IlsFacility.clone(Csf.Utils.Nav.IlsFacility!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Helper function for copy
</member>
        <member name="M:Csf.Utils.Nav.IlsFacility.getYCoordinate(Csf.Utils.Nav.IlsFacility!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Get Y Coordinate
</member>
        <member name="M:Csf.Utils.Nav.IlsFacility.getXCoordinate(Csf.Utils.Nav.IlsFacility!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Get X Coordinate 
</member>
        <member name="M:Csf.Utils.Nav.IlsFacility.put(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Output function
</member>
        <member name="M:Csf.Utils.Nav.op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Utils.Nav.IlsFacility!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Output stream operator
</member>
        <member name="M:Csf.Utils.Nav.IlsFacility.op_Assign(Csf.Utils.Nav.IlsFacility!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Assignment operator
</member>
        <member name="M:Csf.Utils.Nav.IlsFacility.Dispose">
@brief Destructor
</member>
        <member name="M:Csf.Utils.Nav.IlsFacility.#ctor(Csf.Utils.Nav.IlsFacility!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Copy Constructor
</member>
        <member name="M:Csf.Utils.Nav.IlsFacility.#ctor">
@brief Constructor
</member>
        <member name="T:Csf.Utils.Nav.IlsFacility">
@brief ILS Facility 
</member>
        <member name="M:Csf.Utils.Nav.NavFacility.clone(Csf.Utils.Nav.NavFacility!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Helper function for copy
</member>
        <member name="M:Csf.Utils.Nav.NavFacility.getYCoordinate(Csf.Utils.Nav.NavFacility!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Get Y Coordinate
</member>
        <member name="M:Csf.Utils.Nav.NavFacility.getXCoordinate(Csf.Utils.Nav.NavFacility!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Get X Coordinate 
</member>
        <member name="F:Csf.Utils.Nav.NavFacility.m_uniqueDbId">
@brief Id used to uniquely distinguish every navaid entry in the database
</member>
        <member name="F:Csf.Utils.Nav.NavFacility.m_magneticVariation">
@brief Magnetic Variation at NavFacility position
</member>
        <member name="F:Csf.Utils.Nav.NavFacility.m_elevation">
@brief NavFacility elevation
</member>
        <member name="F:Csf.Utils.Nav.NavFacility.m_identifier">
@brief NavFacility identifier
</member>
        <member name="F:Csf.Utils.Nav.NavFacility.m_position">
@brief Latitude and Logitude position of the NavFacility
</member>
        <member name="M:Csf.Utils.Nav.NavFacility.put(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Output function
</member>
        <member name="M:Csf.Utils.Nav.op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Utils.Nav.NavFacility!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief output stream operator
</member>
        <member name="M:Csf.Utils.Nav.NavFacility.op_Equality(Csf.Utils.Nav.NavFacility!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Equality operator
</member>
        <member name="M:Csf.Utils.Nav.NavFacility.op_LessThan(Csf.Utils.Nav.NavFacility!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Less than operator
</member>
        <member name="M:Csf.Utils.Nav.NavFacility.op_Assign(Csf.Utils.Nav.NavFacility!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Assignment operator
</member>
        <member name="M:Csf.Utils.Nav.NavFacility.Dispose">
@brief Destructor
</member>
        <member name="M:Csf.Utils.Nav.NavFacility.#ctor(Csf.Utils.Nav.NavFacility!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Copy Constructor
</member>
        <member name="M:Csf.Utils.Nav.NavFacility.#ctor">
@brief Constructor
</member>
        <member name="T:Csf.Utils.Nav.NavFacility">
@brief Base class for all Navigation Facilities
</member>
        <member name="T:Csf.Utils.Nav.NdbEmissionTypes">
@brief NDB Emission Types Enumeration
</member>
        <member name="T:Csf.Utils.Nav.DmeTypes">
@brief Distance Measuring Equipment (DME) Types Enumeration
</member>
        <member name="T:Csf.Utils.Nav.TacanTypes">
@brief Tactical Air Navigation (TACAN) Facility Types Enumeration
</member>
        <member name="T:Csf.Utils.Nav.VorTypes">
@brief VHF Omnidirectional Range (VOR) Facility Types Enumeration
</member>
        <member name="T:Csf.Utils.Nav.PowerTypes">
@brief Facility Power Enumeration
</member>
        <member name="T:Csf.Utils.Nav.RangeTypes">
@brief Facility Range Enumeration
</member>
        <member name="T:Csf.Utils.Nav.FigureOfMeritTypes">
@brief Figure of Merit Enumeration
</member>
        <member name="T:Csf.Utils.Nav.MarkerBeaconTypes">
@brief Marker Beacon Types Enumeration
</member>
        <member name="T:Csf.Utils.Nav.CommTypes">
@brief Communications Facility Types Enumeration
</member>
        <member name="T:Csf.Utils.Nav.CommBands">
@brief Communications Bands Enumeration
</member>
        <member name="T:Csf.Utils.Nav.IlsMlsGlsCategory">
@brief Ils/Mls/Gls Categories Enumeration
</member>
        <member name="M:Csf.Utils.Nav.FlightPositionDb.addAndSaveFlightPosition(Csf.Utils.Nav.FlightPosition!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Utils.Database.ConnectionInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Add and Save FlightPosition
</member>
        <member name="M:Csf.Utils.Nav.FlightPositionDb.addFlightPosition(Csf.Utils.Nav.FlightPosition!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Add FlightPosition
</member>
        <member name="M:Csf.Utils.Nav.FlightPositionDb.getAllFlightPositions(std.list&lt;Csf.Utils.Nav.FlightPosition,std.allocator&lt;Csf.Utils.Nav.FlightPosition&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Get all FlightPositions at runway in sorted list
@return Success
</member>
        <member name="M:Csf.Utils.Nav.FlightPositionDb.getFlightPosition(Csf.Utils.Nav.FlightPosition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Get FlightPosition at location
@return Success
</member>
        <member name="M:Csf.Utils.Nav.FlightPositionDb.loadFlightPositions(Csf.Utils.Database.ConnectionInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Load Flight Positions from specified DB connection
</member>
        <member name="M:Csf.Utils.Nav.FlightPositionDb.Dispose">
@brief Destructor
</member>
        <member name="M:Csf.Utils.Nav.FlightPositionDb.#ctor(Csf.Utils.Database.ConnectionInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Constructor
</member>
        <member name="M:Csf.Utils.Nav.FlightPositionDb.#ctor">
@brief Constructor
</member>
        <member name="M:Csf.Utils.Nav.FlightPosition.clone(Csf.Utils.Nav.FlightPosition!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Helper function for copy
</member>
        <member name="F:Csf.Utils.Nav.FlightPosition.m_description">
@brief Description
</member>
        <member name="F:Csf.Utils.Nav.FlightPosition.m_disabled">
@brief Disabled
</member>
        <member name="F:Csf.Utils.Nav.FlightPosition.m_gear">
@brief Gear Position
</member>
        <member name="F:Csf.Utils.Nav.FlightPosition.m_flap">
@brief Flap Position
</member>
        <member name="F:Csf.Utils.Nav.FlightPosition.m_flightPathAngle">
@brief
</member>
        <member name="F:Csf.Utils.Nav.FlightPosition.m_airspeed">
@brief Airspeed
</member>
        <member name="F:Csf.Utils.Nav.FlightPosition.m_heading">
@brief Heading
</member>
        <member name="F:Csf.Utils.Nav.FlightPosition.m_altitude">
@brief Altitude
</member>
        <member name="F:Csf.Utils.Nav.FlightPosition.m_position">
@brief Latitude and Logitude position
</member>
        <member name="F:Csf.Utils.Nav.FlightPosition.m_name">
@brief Name
</member>
        <member name="F:Csf.Utils.Nav.FlightPosition.m_runway">
@brief Runway ID
</member>
        <member name="F:Csf.Utils.Nav.FlightPosition.m_airfield">
@brief Airfield ICAO
</member>
        <member name="M:Csf.Utils.Nav.FlightPosition.put(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Output function
</member>
        <member name="M:Csf.Utils.Nav.op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Utils.Nav.FlightPosition!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief output stream operator
</member>
        <member name="M:Csf.Utils.Nav.FlightPosition.op_Equality(Csf.Utils.Nav.FlightPosition!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Equality operator
</member>
        <member name="M:Csf.Utils.Nav.FlightPosition.op_LessThan(Csf.Utils.Nav.FlightPosition!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Less than operator
</member>
        <member name="M:Csf.Utils.Nav.FlightPosition.op_Assign(Csf.Utils.Nav.FlightPosition!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Assignment operator
</member>
        <member name="M:Csf.Utils.Nav.FlightPosition.Dispose">
@brief Destructor
</member>
        <member name="M:Csf.Utils.Nav.FlightPosition.#ctor(Csf.Utils.Nav.FlightPosition!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Copy Constructor
</member>
        <member name="M:Csf.Utils.Nav.FlightPosition.#ctor(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Utils.Nav.Position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst">
@brief Constructor
</member>
        <member name="M:Csf.Utils.Nav.FlightPosition.#ctor(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Constructor
</member>
        <member name="M:Csf.Utils.Nav.FlightPosition.#ctor">
@brief Constructor
</member>
        <member name="M:Csf.Utils.Nav.AirfieldsDb.exportGroundPositions(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Save ground position database to pipe delimited text file
</member>
        <member name="M:Csf.Utils.Nav.AirfieldsDb.exportGatePositions(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Save gate position database to pipe delimited text file
</member>
        <member name="M:Csf.Utils.Nav.AirfieldsDb.exportAirfields(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Save airfields database to pipe delimited text file
</member>
        <member name="M:Csf.Utils.Nav.AirfieldsDb.addGroundPosition(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Utils.Nav.Position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Utils.Database.ConnectionInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerSe">
@brief Adds runway position to database
       Note: If position already exists, existing is updated
             with new information
</member>
        <member name="M:Csf.Utils.Nav.AirfieldsDb.addGatePosition(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Utils.Nav.Position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Utils.Database.ConnectionInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Adds gate position to database
       Note: If position already exists, existing is updated
             with new information   
</member>
        <member name="M:Csf.Utils.Nav.AirfieldsDb.getGroundPosition(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Routine for retrieving runway position information
</member>
        <member name="M:Csf.Utils.Nav.AirfieldsDb.getGatePositions(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Routine for retrieving gate position information
</member>
        <member name="M:Csf.Utils.Nav.AirfieldsDb.getRunway(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Get runway specified by ICAO id and runway name
</member>
        <member name="M:Csf.Utils.Nav.AirfieldsDb.getAirfield(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Get airfield specified by given ICAO id
</member>
        <member name="M:Csf.Utils.Nav.AirfieldsDb.getStatus">
@brief Get validity status
Status is true iff the database has been loaded successfully
</member>
        <member name="M:Csf.Utils.Nav.AirfieldsDb.getOppositeId(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Get runway ID of opposite runway
</member>
        <member name="M:Csf.Utils.Nav.AirfieldsDb.initialize(Csf.Utils.Database.ConnectionInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Load database containing airfields
</member>
        <member name="M:Csf.Utils.Nav.AirfieldsDb.initialize(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Load flat file database containing airfields/parking files
</member>
        <member name="T:Csf.Utils.Nav.AirfieldsDb">
@brief Data Store of airfields in a grid data structure

Class object to store airfields read from a database. The airfields
are organized in a hierarchical data structure to allow efficient searches
for airfields near a given position. The airfields are also sorted based
on their ICAO id.
</member>
        <member name="T:Csf.Utils.Nav.AirfieldsDbPimpl">
@brief private implementation
</member>
        <member name="T:Csf.Utils.Nav.GroundPosition">
@brief Store ground position information
</member>
        <member name="T:Csf.Utils.Nav.GatePosition">
@brief Store ground position information
</member>
        <member name="F:Csf.Utils.Nav.Airfield.Runway.m_magneticHeading">
Magnetic heading of the runway. 
</member>
        <member name="T:Csf.Utils.Nav.Airfield.Runway">
@brief Store a runway on a airfield read from a database

Information about runways is retrieved by users through Get routines.
</member>
        <member name="T:Csf.Utils.Nav.Airfield">
@brief Store an airfield read from a database

Information about airfields is retrieved by users through Get routines.
</member>
        <member name="F:Csf.Osal.Database.Connection.m_pimpl">
PIMPL for OS/DB specific implementation. 
</member>
        <member name="M:Csf.Osal.Database.Connection.updateTableFields(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;Csf.Osal.String,Csf.Osal.Database.FieldAttributes,std.less&lt;Csf.Osal.String&gt;,std.allocator&lt;std.pair&lt;Csf.Osal.String!System.Runtime.CompilerServices.IsConst,Csf.Osal.Database.FieldAttributes&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.list&lt;Csf.Osal.String,std.allocator&lt;Csf.Osal.String&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Check the attributes of the listed table columns for the specified table to
            * see if the schema matches.  If there is a discrepancy (mismatch or missing attribute)
            * then this function will update the table to either add the column or adjust the 
            * attributes of an existing column.  Changes to column name, ordering or data type are not
            * supported and will return an error in logMessages.
            * @param tableName Name of the table whose schema it to be checked.
            * @param fieldMap Map of field names to field attributes expected values.
            * @param columnsInError Output parameter. This is cleared on entry and will
            * contain the list of mismatches found on return.
            * @return True if an update was performed. False if there was a problem.
</member>
        <member name="M:Csf.Osal.Database.Connection.checkTableFields(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;Csf.Osal.String,Csf.Osal.Database.FieldAttributes,std.less&lt;Csf.Osal.String&gt;,std.allocator&lt;std.pair&lt;Csf.Osal.String!System.Runtime.CompilerServices.IsConst,Csf.Osal.Database.FieldAttributes&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.list&lt;Csf.Osal.String,std.allocator&lt;Csf.Osal.String&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Check the attributes of the listed table columns for the specified table to 
            * see if the schema matches. Discrepancies are reported as a string that is
            * added to the output paramter logMessages. If the size of logMessages &gt; 0 when
            * this function returns, it means there was at least one discrepancy. The strings
            * in logMessages are suitable for logging (they contain expected and actual values).
            * The field attributes checked are ordinal_position, column_default, is_nullable, and data_type.
            * @param tableName Name of the table whose schema it to be checked.
            * @param fieldMap Map of field names to field attributes expected values.
            * @param logMessages[out] Output parameter. This is cleared on entry and will
            * contain the list of mismatches found on return.

</member>
        <member name="M:Csf.Osal.Database.Connection.execPrepared(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;Csf.Osal.Database.Parameter**,std.allocator&lt;Csf.Osal.Database.Parameter**&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst)">
Execute a prepared statement using a vector of parameters which can be
            * text or binary. This was added so that we use a prepared statement (which is parsed
            * only once and planned only once on the server) and  pass binary arguments and
            * receive binary results. Using binary args eliminates the need to escape 
            * strings and is faster for large binary data (e.g. bytea).
            * @return Number of rows affected by the command.
            * @param statementName Server-side name of the statement. This was set on the server
            * by the prepare() call.
            * @param params Vector of paramters to be used with the command. Make sure these
            * are only deleted AFTER this function returns because the memory for the values
            * is used by the called function.
            * @param resultFormat Format of the results of the command or query. 
            * - 0: Text
            * - 1: Binary

</member>
        <member name="M:Csf.Osal.Database.Connection.prepare(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst)">
Prepare a query statement for execution on the server. This causes
            * the server to parse the query and prepare the plan once instead of every
            * time like if you use execQuery() or execCommand().
            * @throws On error.
            * @param statementName Name of the statement (must be unique this session).
            * @param query Query to prepare.
            * @param numParams Number of parameters the statement needs. 

</member>
        <member name="M:Csf.Osal.Database.Connection.checkIfColumnExistsInTable(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Determines is a given column exists in the given table. 
            * @param tableName - The name of the table to check for the column.
            * @param columnName - The name of the column to look for.
            * @return True if the column exists in the table.  False if it doesn't

</member>
        <member name="M:Csf.Osal.Database.Connection.checkIfTableExists(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Determine if a table exists (by name)
            * @return
            * - true : Table exists
            * - false : Table does not exist
            * @param name Table name.

</member>
        <member name="M:Csf.Osal.Database.Connection.checkIfDatabaseExists(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Determine if a database exists (by name)
            * @return
            * - true : Database exists
            * - false : Database does not exist
            * @param name Database name.

</member>
        <member name="M:Csf.Osal.Database.Connection.insert(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;Csf.Osal.String,Csf.Osal.String,std.less&lt;Csf.Osal.String&gt;,std.allocator&lt;std.pair&lt;Csf.Osal.String!System.Runtime.CompilerServices.IsConst,Csf.Osal.String&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Insert a tuple using a map of column names and values.
            * @param table Name of the table to insert into.
            * @param values The tuple to be inserted (as a map of column names and values).

</member>
        <member name="M:Csf.Osal.Database.Connection.print(_iobuf*)">
Print the result set to the specified file. 
</member>
        <member name="M:Csf.Osal.Database.Connection.rollBack">
Roll back a transaction. 
</member>
        <member name="M:Csf.Osal.Database.Connection.commit">
Commit a transaction. 
</member>
        <member name="M:Csf.Osal.Database.Connection.startTransaction">
Start a transaction. 
</member>
        <member name="M:Csf.Osal.Database.Connection.closeLargeObject(System.Int32!System.Runtime.CompilerServices.IsConst)">
Close the large object.
@throws std::runtime_error Thrown if an error occurs.
@param loDesc The large object descriptor.

</member>
        <member name="M:Csf.Osal.Database.Connection.truncateLargeObject(System.Int32!System.Runtime.CompilerServices.IsConst,System.Int64!System.Runtime.CompilerServices.IsConst)">
Truncate a large object to a given length.
@throws std::runtime_error Thrown if an error occurs.
@param loDesc The large object descriptor.
@param tLen Length of the final truncated large object.

</member>
        <member name="M:Csf.Osal.Database.Connection.tellLargeObject(System.Int32!System.Runtime.CompilerServices.IsConst)">
Report current position in large object's data stream.
@return The current position in the large object.
@throws std::runtime_error Thrown if an error occurs.
@param loDesc The large object descriptor.

</member>
        <member name="M:Csf.Osal.Database.Connection.readLargeObject(System.Int32!System.Runtime.CompilerServices.IsConst,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt64!System.Runtime.CompilerServices.IsConst)">
Read data from large object.
@return Number of bytes read, which may be less than the number requested if the end of the large object is reached.
@throws std::runtime_error Thrown if an error occurs.
@param loDesc The large object descriptor.
@param rBuf Location to store the read data in.
@param rLen Number of bytes to try and read.

</member>
        <member name="M:Csf.Osal.Database.Connection.writeLargeObject(System.Int32!System.Runtime.CompilerServices.IsConst,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt64!System.Runtime.CompilerServices.IsConst)">
Write data to large object.
@return Number of bytes written.
@throws std::runtime_error Thrown if an error occurs.
@param loDesc The large object descriptor.
@param wBuf Data to write.
@param wLen Number of bytes from Buf to write.

</member>
        <member name="M:Csf.Osal.Database.Connection.seekLargeObject(System.Int32!System.Runtime.CompilerServices.IsConst,System.Int64!System.Runtime.CompilerServices.IsConst,Csf.Osal.Database.Connection.SeekDir!System.Runtime.CompilerServices.IsConst)">
Seeking in the large object's data stream.
@return The new location pointer.
@throws std::runtime_error Thrown if an error occurs.
@param loDesc The large object descriptor.
@param sOffset The seek position.
@param sDir Enumerated value for seek direction, defaults to e_beg.

</member>
        <member name="M:Csf.Osal.Database.Connection.openLargeObject(System.UInt32!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Open a large object.
@return A non-negative large object descriptor.
@throws std::runtime_error Thrown if an error occurs.
@param loId OID of the large object to open.
@param readWrite Access mode; true means INV_WRITE|INV_READ, false means INV_READ, defaults to true.   

</member>
        <member name="M:Csf.Osal.Database.Connection.removeLargeObject(System.UInt32!System.Runtime.CompilerServices.IsConst)">
Delete large object from database.
@throws std::runtime_error Thrown if an error occurs.
@param loId OID of the large object to remove.

</member>
        <member name="M:Csf.Osal.Database.Connection.exportLargeObject(System.UInt32!System.Runtime.CompilerServices.IsConst,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Writes the data stored in the large object to the given file.
@throws std::runtime_error Thrown if an error occurs.
@param loId OID of the large object to export.
@param fileName Filename on the client's filesystem.

</member>
        <member name="M:Csf.Osal.Database.Connection.importLargeObject(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Create a large object containing the data found in the given file.
@return Oid that was assigned to the new large object.
@throws std::runtime_error Thrown if an error occurs.
@param fileName Filename on the client program's filesystem.

</member>
        <member name="M:Csf.Osal.Database.Connection.createLargeObject(System.UInt32!System.Runtime.CompilerServices.IsConst)">
Create a large object.
@return Oid that was assigned to the new large object.
@throws std::runtime_error Thrown if an error occurs.
@param loId OID of the large object to create, defaults to InvalidOid(zero).

</member>
        <member name="M:Csf.Osal.Database.Connection.unescapeBytea(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Unescape a string.
@return An unescaped ByteArray from the specified string 
@param str the escaped string to unescape

</member>
        <member name="M:Csf.Osal.Database.Connection.escapeBytea(Csf.Osal.ByteArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Generates a ByteArray with characters escaped depending on connection
settings.   Typically used when creating a command to insert or update
an SQL bytea data type
@return  The escaped byte array 
@param from The byte array to produce the escaped ByteArray from

</member>
        <member name="M:Csf.Osal.Database.Connection.isNull(System.Int32,System.Int32)">
Determines if a field is NULL (NULL in the database means "no value set"). This
is different from an empty string, or a null pointer.
@return
- true: The field is NULL.
- false: The field is not NULL.

@param rowNum    Row # in the result set.
@param colNum    Column # in the result set.

</member>
        <member name="M:Csf.Osal.Database.Connection.getBinaryValue(System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst)">
Gets a binary result and stores the bytes that comprise it in the output
argument passed in. If the result is null, the byte array will be empty. Use isNull() to
distinguish NULL results from empty string results.
@return Byte array containing the binary result. This as efficient as passing in an 
output reference because of RVO and copy-elision.
@param rowNum    Row # in the result set.
@param colNum    Column # in the result set.

</member>
        <member name="M:Csf.Osal.Database.Connection.getValue(System.Int32,System.Int32)">
Returns the value of the field in the result set at the given row and
column. Returns an empty string if the result was NULL. Use isNull() to
distinguish NULL results from empty string results.
@return Value of the specified field, as a string.

@param rowNum    Row # in the result set.
@param colNum    Column # in the result set.

</member>
        <member name="M:Csf.Osal.Database.Connection.getColNum(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the column # associated with the given column name, or -1 if the given
name doesn't match any columns.

@param colName    Column name. The column name is downcased if it is
not double quoted (e.g. foo is the same as foo, but "FOO" is not the same as
"foo").

</member>
        <member name="M:Csf.Osal.Database.Connection.getColName(System.Int32!System.Runtime.CompilerServices.IsConst)">
Gets the column name of the specified column (columns numbers start at 0).
@return Column name.
@param colNum    Column number (first column is column 0).

</member>
        <member name="M:Csf.Osal.Database.Connection.getNumCols">
Returns the # of columns in each row of the query result.
@return # of columns in each row.

</member>
        <member name="M:Csf.Osal.Database.Connection.getCmdRows">
Get # of rows affected by the command. This only returns a valid # for INSERT,
UPDATE, DELTE, MOVE or FETCH statements. Otherwise an empty string is returned
by PQcmdTuples() and translated to -1 by this function.
@return # of rows affected by the command, or -1 if the command does not return
a # of rows affected.

</member>
        <member name="M:Csf.Osal.Database.Connection.getNumRows">
Get # of rows in the result set of the last query.
@return # of rows in the result set.

</member>
        <member name="M:Csf.Osal.Database.Connection.sendQuery(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;Csf.Osal.String,std.allocator&lt;Csf.Osal.String&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Execute the specified SQL query asynchronously.
@return True if the query was dispatched, false if not.
@param query    Query to execute.
@param paramValues Array of parameter values.

</member>
        <member name="M:Csf.Osal.Database.Connection.execQuery(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;Csf.Osal.String,std.allocator&lt;Csf.Osal.String&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Execute the specified SQL query.
@return Number of rows returned.
@param query    Query to execute.
@param paramValues Array of parameter values.

</member>
        <member name="M:Csf.Osal.Database.Connection.execQuery(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst)">
Execute the specified SQL query.
            * @return Number of rows returned.
            * @param query    Query to execute.
            * @param resultFormat Format of the results returned by the DB.
            * - 0: Text format (a string).
            * - 1: Binary format.

</member>
        <member name="M:Csf.Osal.Database.Connection.execCommandParams(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;Csf.Osal.Database.Parameter**,std.allocator&lt;Csf.Osal.Database.Parameter**&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst)">
Execute a command or query using a vector of parameters which can be
            * text or binary. This was added so that we could pass binary arguments and
            * receive binary results. Using binary args eliminates the need to escape 
            * strings and is faster for large binary data (e.g. bytea).
            * @return Number of rows affected by the command.
            * @param command Command to execute.
            * @param params Vector of paramters to be used with the command.
            * @param resultFormat Format of the results of the command or query. 
            * - 0: Text
            * - 1: Binary

</member>
        <member name="M:Csf.Osal.Database.Connection.execCommand(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;Csf.Osal.String,std.allocator&lt;Csf.Osal.String&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Execute the specified SQL command.
@return Number of rows affected by the command, or -1 if the command doesn't return # of rows.
@param command    Command to execute.
@param params Array of parameter values.

</member>
        <member name="M:Csf.Osal.Database.Connection.execCommand(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Execute a command.
@return # of rows affected by the command.
@param command    Command to be executed.

</member>
        <member name="M:Csf.Osal.Database.Connection.getLastErrorMessage">
Returns a ptr to the last error message.
@return Pointer to the last error message. Do not free this memory.

</member>
        <member name="M:Csf.Osal.Database.Connection.isConnectionOk">
Checks the status of the DB connection.
@return - true: Connection is ok. - false: Connection is bad.

</member>
        <member name="M:Csf.Osal.Database.Connection.connect">
Connect to the database.

</member>
        <member name="M:Csf.Osal.Database.Connection.Dispose">
Destructor.

</member>
        <member name="M:Csf.Osal.Database.Connection.#ctor(Csf.Utils.Database.ConnectionInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Constructor.

@param connectionInfo Database connection info.

</member>
        <member name="F:e_end">
Corresponds to SEEK_END for both Linux and Win. 
</member>
        <member name="F:e_cur">
Corresponds to SEEK_CUR for both Linux and Win. 
</member>
        <member name="F:e_beg">
Corresponds to SEEK_SET for both Linux and Win. 
</member>
        <member name="T:Csf.Osal.Database.Connection.SeekDir">
Seek direction: beg, cur, end. 
</member>
        <member name="D:Csf.Osal.Database.Connection.FieldAttributesMap">
Map of DB field names to field attributes. 
</member>
        <member name="D:Csf.Osal.Database.Connection.ParameterVector">
Vector of parameters. This is used to pass parameters in as a vector of values
            * rather than as strings, so it can be used to pass parameters in binary form,
            * removing the risk/complexity of escaping strings.

</member>
        <member name="D:Csf.Osal.Database.Connection.Record">
Map of tuples used to store column name, value pairs. 
</member>
        <member name="D:Csf.Osal.Database.Connection.LargeObjectFd">
Large object file descriptor type. 
</member>
        <member name="T:Csf.Osal.Database.Connection">
Database connection class. Used for all DB access. This class is NOT thread 
safe because the only implementation is using libpq for PostgreSQL and 
that library is thread-safe but a single PGConn object can't be used by 
multiple threads. Bottom line if multiple threads need to use the DB
either serialize access to this class or use multiple instances of this
class, one per thread.

</member>
        <member name="M:Csf.Osal.Database.op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.Database.FieldAttributes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded stream insertion operator. Prints out all info about this object.
          * @return Output stream.
          * @param out Output stream to insert into.
          * @param rhs Object to insert into the stream.

</member>
        <member name="M:Csf.Osal.Database.FieldAttributes.op_Inequality(Csf.Osal.Database.FieldAttributes*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Test for inequality.
            * @return True if the two are not equal, false if they are equal.
            * @param rhs Right hand side operand..

</member>
        <member name="M:Csf.Osal.Database.FieldAttributes.op_Equality(Csf.Osal.Database.FieldAttributes*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Test for equality.
            * @return True if the two are equal, false if not.
            * @param rhs Right hand side operand.

</member>
        <member name="M:Csf.Osal.Database.FieldAttributes.Dispose">
Dtor. 
</member>
        <member name="F:Csf.Osal.Database.FieldAttributes.m_dataType">
The database data type of the column. 
</member>
        <member name="F:Csf.Osal.Database.FieldAttributes.m_isNullable">
Can the value be NULL (no value)? 
</member>
        <member name="F:Csf.Osal.Database.FieldAttributes.m_columnDefault">
The default value of the column if an insert is made an no value is provded. 
</member>
        <member name="F:Csf.Osal.Database.FieldAttributes.m_ordinalPosition">
The ordinal position in the table of the field. First column is 1. 
</member>
        <member name="F:Csf.Osal.Database.FieldAttributes.m_columnName">
Name of the DB field. 
</member>
        <member name="M:Csf.Osal.Database.FieldAttributes.#ctor(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Ctor.
               * @param columnName Name of the DB field.
               * @param ordinalPosition The ordinal position in the table of the field. First column is 1.
               * @param columnDefault The default value for this column.
               * @param isNullable YES if the field can be NULL, NO if it is set to NOT NULL.
               * @param dataType The text version of the field data type (e.g. text, bigint, etc.) These
               * are defined by PostgreSQL.

</member>
        <member name="M:Csf.Osal.Database.FieldAttributes.#ctor">
Ctor. 
</member>
        <member name="T:Csf.Osal.Database.FieldAttributes">
Contains the attributes of a field in the DB. Used for checking
         * DB schemas.

</member>
        <member name="F:Csf.Utils.Database.ConnectionInfo.m_timeout">
Connection timeout in seconds. Give up trying to connect after this many
seconds. 0 = infinite timeout.

</member>
        <member name="F:Csf.Utils.Database.ConnectionInfo.m_password">
Database password.

</member>
        <member name="F:Csf.Utils.Database.ConnectionInfo.m_userId">
Database user id.

</member>
        <member name="F:Csf.Utils.Database.ConnectionInfo.m_dbName">
Database name.

</member>
        <member name="F:Csf.Utils.Database.ConnectionInfo.m_port">
Database host port.

</member>
        <member name="F:Csf.Utils.Database.ConnectionInfo.m_hostname">
Database host name.

</member>
        <member name="M:Csf.Utils.Database.ConnectionInfo.getString">
Return the connection parameters as a postgres connection string. 
             * @return The postgres connection string used by libpq. 

</member>
        <member name="M:Csf.Utils.Database.ConnectionInfo.Dispose">
Dtor. 
</member>
        <member name="M:Csf.Utils.Database.ConnectionInfo.#ctor(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst)">
Constructor.

@param hostname    DB hostname.
@param port    DB host port #.
@param dbName    Name of the database to connect to.
@param userId    Database user id.
@param password    Database password.
@param timeout    Timeout in seconds before we give up on making the connection.

</member>
        <member name="T:Csf.Utils.Database.ConnectionInfo">
Postgres connection information. 
</member>
        <member name="M:Csf.Utils.EnumBaseNamed.mapEnum(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64)">
@brief not used;private to prevent usage of base class method
</member>
        <member name="M:Csf.Utils.EnumBaseNamed.mapEnum(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Adds an enum string and enumerated value pair to the map
@brief Adds an enum string, an enumerated value, and a name to the map
@param strVal the string representation of the enumeration value (i.e. e_enum1)
@param intVal the integer value of the enumerated value, should use raw enumeration as arguement
@param name the readable name of this entry i.e. "Enumeration1")        

       All entries must be mapped in order by intVal, staring at zero,
       and with no gaps; otherwise an exception is thrown
</member>
        <member name="F:Csf.Utils.EnumBaseNamed.m_nameMap">
@brief map of names to enum value
</member>
        <member name="F:Csf.Utils.EnumBaseNamed.m_size">
@brief number of named entries;         
</member>
        <member name="M:Csf.Utils.EnumBaseNamed.size">
@brief Returns the number of entries 
</member>
        <member name="M:Csf.Utils.EnumBaseNamed.getIntVal(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Returns the enumeration value matching the specified name
@param name The name to match
</member>
        <member name="M:Csf.Utils.EnumBaseNamed.getName(System.Int64)">
@brief Returns the first string name associated with the specified enumerated integer value 
@param index The specified enumerated integer value 
       Does not support non-unique enuration values
       Named enumerations for use in array publishing cannot have gaps in values and must start at zero.
</member>
        <member name="T:Csf.Utils.EnumBaseNamed">
@brief The EnumBase class is the base class used to create enumerations
</member>
        <member name="M:Csf.Utils.Nav.Position.findDirectionTo(Csf.Utils.Nav.Position)">
@brief  Determine initial bearing to given position (latitude, longitude)

        Determine initial bearing in degrees from current position to
        given positionn.
@pre    Assuming a spherical earth model.

@param  To          Other position 
@return Float64     Bearing, in degrees 
</member>
        <member name="M:Csf.Utils.Nav.Position.findDistanceTo(Csf.Utils.Nav.Position)">
@brief  Determine distance to given position (latitude, longitude)

        Determine great circle distance in nautical miles between
        current position and given position.
@pre    Assuming a spherical earth model.

@param  To          Other position 
@return Float64     Distance, in nautical miles
</member>
        <member name="M:Csf.Utils.Nav.Position.findLocationAt(System.Double,System.Double)">
@brief  Determine position at given bearing and distance

        Determine position at given bearing and distance from the
        current position.
@pre    Assuming a spherical earth model.

@param  bearing  Bearing from current position, in degrees
@param  distance Distance from current position, in nautical miles
@return Position New position
</member>
        <member name="M:Csf.Utils.Nav.Position.getLongitude">
@brief  Get longitude as a Longitude object

@return Longitude   Longitude 
</member>
        <member name="M:Csf.Utils.Nav.Position.getLatitude">
@brief  Get latitude as a Latitude object

@return Latitude    Latitude
</member>
        <member name="M:Csf.Utils.Nav.Position.setLongitude(Csf.Utils.Nav.Longitude)">
@brief  Set longitude, given as a Longitude object 

@param  longitude   Longitude
</member>
        <member name="M:Csf.Utils.Nav.Position.setLatitude(Csf.Utils.Nav.Latitude)">
@brief  Set latitude, given as a Latitude object

@param  latitude    Latitude
</member>
        <member name="M:Csf.Utils.Nav.Position.op_Assign(Csf.Utils.Nav.Position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  Assignment operator
</member>
        <member name="M:Csf.Utils.Nav.op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Utils.Nav.Position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief stream opperator
</member>
        <member name="M:Csf.Utils.Nav.Position.#ctor(Csf.Utils.Nav.Position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  Copy Constructor
</member>
        <member name="M:Csf.Utils.Nav.Position.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
@brief  Constructor - Accept position as ASCII strings
</member>
        <member name="M:Csf.Utils.Nav.Position.#ctor(System.Double,System.Double)">
@brief  Constructor - Accept position as floating-point values
</member>
        <member name="M:Csf.Utils.Nav.Position.#ctor(Csf.Utils.Nav.Latitude,Csf.Utils.Nav.Longitude)">
@brief  Constructor - Accept Latitude and Longitude objects
</member>
        <member name="M:Csf.Utils.Nav.Position.#ctor">
@brief  Constructor - Initalize position to (0,0)
</member>
        <member name="T:Csf.Utils.Nav.Position">
@brief Defines a position (latitude, longitude) and operations on 
position. Allows specification and retrieval of positions in various
formats.
</member>
        <member name="M:Csf.Utils.Nav.Longitude.op_GreaterThanOrEqual(Csf.Utils.Nav.Longitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Allow &gt;= operation on longitudes

@return bool     Boolean value
</member>
        <member name="M:Csf.Utils.Nav.Longitude.op_GreaterThan(Csf.Utils.Nav.Longitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Allow &gt; operation on longitudes

@return bool     Boolean value
</member>
        <member name="M:Csf.Utils.Nav.Longitude.op_SubtractionAssignment(Csf.Utils.Nav.Longitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Allow -= operation on longitudes

@return Longitude  New longitude
</member>
        <member name="M:Csf.Utils.Nav.Longitude.op_AdditionAssignment(Csf.Utils.Nav.Longitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Allow += operation on longitudes

@return Longitude  New longitude
</member>
        <member name="M:Csf.Utils.Nav.Longitude.op_Subtraction(Csf.Utils.Nav.Longitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Allow arithmetic minus operation on longitudes

@return Longitude  New longitude
</member>
        <member name="M:Csf.Utils.Nav.Longitude.op_Addition(Csf.Utils.Nav.Longitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Allow arithmetic plus operation on longitudes

@return Longitude  New longitude
</member>
        <member name="M:Csf.Utils.Nav.Longitude.op_Assign(Csf.Utils.Nav.Longitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Allow assignment operation on longitudes

@return Longitude  New longitude
</member>
        <member name="M:Csf.Utils.Nav.Longitude.#ctor(Csf.Utils.Nav.Longitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  Copy Constructor
</member>
        <member name="M:Csf.Utils.Nav.Longitude.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
@brief  Constructor - Accept Longitude as a ASCII string
</member>
        <member name="M:Csf.Utils.Nav.Longitude.#ctor(System.Double)">
@brief  Constructor - Accept Longitude as a float value in degrees
</member>
        <member name="M:Csf.Utils.Nav.Longitude.#ctor">
@brief  Provides a longitude type.
        Allows specification and retrieval of longitude in various formats. 
@brief  Constructor - Longitude is assigned an invalid status
</member>
        <member name="M:Csf.Utils.Nav.Latitude.op_GreaterThanOrEqual(Csf.Utils.Nav.Latitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Allow &gt;= operation on latitudes

@return bool     Boolean value
</member>
        <member name="M:Csf.Utils.Nav.Latitude.op_GreaterThan(Csf.Utils.Nav.Latitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Allow &gt; operation on latitudes

@return bool     Boolean value
</member>
        <member name="M:Csf.Utils.Nav.Latitude.op_SubtractionAssignment(Csf.Utils.Nav.Latitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Allow -= operation on latitudes

@return Latitude  New latitude
</member>
        <member name="M:Csf.Utils.Nav.Latitude.op_AdditionAssignment(Csf.Utils.Nav.Latitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Allow += operation on latitudes

@return Latitude  New latitude
</member>
        <member name="M:Csf.Utils.Nav.Latitude.op_Subtraction(Csf.Utils.Nav.Latitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Allow arithmetic minus operation on latitudes

@return Latitude  New latitude
</member>
        <member name="M:Csf.Utils.Nav.Latitude.op_Addition(Csf.Utils.Nav.Latitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Allow arithmetic plus operation on latitudes

@return Latitude  New latitude
</member>
        <member name="M:Csf.Utils.Nav.Latitude.op_Assign(Csf.Utils.Nav.Latitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Allow assignment operation on latitudes

@return Latitude  New latitude
</member>
        <member name="M:Csf.Utils.Nav.Latitude.#ctor(Csf.Utils.Nav.Latitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  Copy Constructor
</member>
        <member name="M:Csf.Utils.Nav.Latitude.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
@brief  Constructor - Accept Latitude as a ASCII string
</member>
        <member name="M:Csf.Utils.Nav.Latitude.#ctor(System.Double)">
@brief  Constructor - Accept Latitude as a float value in degrees
</member>
        <member name="M:Csf.Utils.Nav.Latitude.#ctor">
@brief  Constructor - Latitude is assigned an invalid status
</member>
        <member name="T:Csf.Utils.Nav.Latitude">
@brief  Provides a latitude type.
        Allows specification and retrieval of latitude in various formats. 
</member>
        <member name="F:Csf.Utils.Nav.Coordinate.m_isValid">
@brief Validity of coordinate
</member>
        <member name="F:Csf.Utils.Nav.Coordinate.m_coordinateType">
@brief Type of coordinate - latitude or longitude
</member>
        <member name="F:Csf.Utils.Nav.Coordinate.m_coordinate">
@brief Storage for latitude or longitude
</member>
        <member name="M:Csf.Utils.Nav.Coordinate.setLongitudeAscii(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
@brief Helper function for setInAscii()
</member>
        <member name="M:Csf.Utils.Nav.Coordinate.setLatitudeAscii(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
@brief Helper function for setInAscii()
</member>
        <member name="M:Csf.Utils.Nav.Coordinate.getSeconds">
@brief Get seconds in coordinate, as represented in ASCII string

@return Float64  Seconds 
</member>
        <member name="M:Csf.Utils.Nav.Coordinate.getMinutes">
@brief Get minutes in coordinate, as represented in ASCII string

@return UInt32   Minutes 
</member>
        <member name="M:Csf.Utils.Nav.Coordinate.getDegrees">
@brief Get degrees in coordinate as represented in ASCII string

@return UInt32   Degrees
</member>
        <member name="M:Csf.Utils.Nav.Coordinate.getHemisphere">
@brief Get hemisphere in coordinate, as represented in ASCII string

@return Char     Character
</member>
        <member name="M:Csf.Utils.Nav.Coordinate.getInAscii">
@brief  Get coordinate in ASCII format (e.g. "N22:35:22.090")

        The fractional portion of the seconds will get rounded
        to 3 decimal places. 

@return Float64  Coordinate
</member>
        <member name="M:Csf.Utils.Nav.Coordinate.getInRadians">
@brief  Get coordinate in radians

@return Float64  Coordinate
</member>
        <member name="M:Csf.Utils.Nav.Coordinate.get">
@brief  Get coordinate in degrees

@return Float64  Coordinate
</member>
        <member name="M:Csf.Utils.Nav.Coordinate.setInAscii(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
@brief  Set coordinate, given as a ASCII string (e.g. "N22:35:22.09")

        Sets object status as invalid if given string is in invalid
        format or if values in string are not within range.

@param  coordinate    Coordinate
</member>
        <member name="M:Csf.Utils.Nav.Coordinate.setInRadians(System.Double)">
@brief  Set coordinate in radians

        Allows a value outside of range to be set.

@param  coordinate    Coordinate
</member>
        <member name="M:Csf.Utils.Nav.Coordinate.set(System.Double)">
@brief  Set coordinate in degrees

        Allows a value outside of range to be set.

@param  coordinate    Coordinate
</member>
        <member name="M:Csf.Utils.Nav.Coordinate.isValid">
@brief  Return validity of coordinate

        If object is not initialized or object could not be set to 
        requested value during object construction or during a Set 
        operation, this routine returns true.

@return bool     Validity of coordinate
</member>
        <member name="M:Csf.Utils.Nav.Coordinate.#ctor(Csf.Utils.Nav.Coordinate!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  Copy Constructor
</member>
        <member name="M:Csf.Utils.Nav.Coordinate.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,Csf.Utils.Nav.Coordinate.CoordinateType)">
@brief  Constructor - Accept coordinate as a ASCII string
</member>
        <member name="M:Csf.Utils.Nav.Coordinate.#ctor(System.Double,Csf.Utils.Nav.Coordinate.CoordinateType)">
@brief  Constructor - Accept coordinate as a float value in degrees
</member>
        <member name="M:Csf.Utils.Nav.Coordinate.#ctor(Csf.Utils.Nav.Coordinate.CoordinateType)">
@brief  Constructor - Set coordinate type to given type
Coordinate is given an invalid status
</member>
        <member name="T:Csf.Utils.Nav.Coordinate.CoordinateType">
@brief  Type of coordinate 
</member>
        <member name="T:Csf.Utils.Nav.Coordinate">
@brief Abstract base class for a Latitude or Longitude class
</member>
        <member name="F:Csf.Imets.ToolCore.Vdn.NetVdnClientWrapper.m_NetVdnClient">
            <summary>
A point to the wrapped net vdn client
</summary>
        </member>
        <member name="M:Csf.Imets.ToolCore.Vdn.NetVdnClientWrapper.Shutdown">
            <summary>
This force shutsdown the net vdn client.
Making the wrapper class unusable after calling.
</summary>
        </member>
        <member name="M:Csf.Imets.ToolCore.Vdn.NetVdnClientWrapper.SendRequest(System.String,System.String,Csf.Imets.ToolCore.Vdn.VdnRequest)">
            <summary>
Send a request.
</summary>
            <param name="topic">The VDN Topic Name of the queue.</param>
            <param name="queueName">The VDN Queue Name of the queue.</param>
            <param name="request">The request to send.</param>
        </member>
        <member name="M:Csf.Imets.ToolCore.Vdn.NetVdnClientWrapper.SendRequest(System.String,Csf.Imets.ToolCore.Vdn.VdnRequest)">
            <summary>
Send a request to the default queue.
</summary>
            <param name="topic">The VDN Topic Name of the queue.</param>
            <param name="request">The request to send.</param>
        </member>
        <member name="M:Csf.Imets.ToolCore.Vdn.NetVdnClientWrapper.Commit">
            <summary>
Commit changes to the VDN. NOTE: Do not call this faster
than the rate you specified in the call to connect. You
MUST call read before commit. No data will be sent to the server
until commit is called. You can only call commit once
per frame. Commit will return false if you have not done
a full read for this read/commit cycle. It will return
true if the commit was successfull.
</summary>
        </member>
        <member name="M:Csf.Imets.ToolCore.Vdn.NetVdnClientWrapper.Read">
            <summary>
Read the latest frame of data from the VDN. You must
call read at least once per frame. You can call read
multiple times per frame to get a new frame of data that
may be pending. 
</summary>
            <returns>True if more frame data is available.(Typically returns true when in buffered mode)</returns>
        </member>
        <member name="M:Csf.Imets.ToolCore.Vdn.NetVdnClientWrapper.GetPublishedQueues">
            <summary>
Get details about the published queues on the VDN.
</summary>
        </member>
        <member name="M:Csf.Imets.ToolCore.Vdn.NetVdnClientWrapper.GetPublishedVariables">
            <summary>
Get details about the published items on the VDN.
</summary>
        </member>
        <member name="M:Csf.Imets.ToolCore.Vdn.NetVdnClientWrapper.UnpublishRequestQueue(Csf.Imets.ToolCore.Vdn.VdnRequestQueue)">
            <summary>
Unpublish a request queue.
</summary>
            <param name="queue">The queue to unpublish.</param>
        </member>
        <member name="M:Csf.Imets.ToolCore.Vdn.NetVdnClientWrapper.PublishRequestQueue(System.String,System.String,Csf.Imets.ToolCore.Vdn.VdnRequestQueue)">
            <summary>
Publish a request queue to the VDN.
</summary>
            <param name="topicName">The VDN Topic Name of the queue.</param>
            <param name="queueName">The VDN Variable Name of the queue.</param>
            <param name="queue">The queue to publish.</param>
        </member>
        <member name="M:Csf.Imets.ToolCore.Vdn.NetVdnClientWrapper.Unsubscribe(Csf.Imets.ToolCore.Vdn.BaseDataType,System.String,System.String,System.String,System.Int32)">
            <summary>
Unsubscribe from an item on the VDN.
</summary>
            <param name="variable">The variable to unsubscribe.</param>
            <param name="topicName">The VDN Topic Name of the item.</param>
            <param name="variableName">The VDN Variable Name of the item.</param>
            <param name="units">The units of measure of the item.</param>
            <param name="scope">The VDN scope of the item.</param>
        </member>
        <member name="M:Csf.Imets.ToolCore.Vdn.NetVdnClientWrapper.Subscribe(Csf.Imets.ToolCore.Vdn.BaseDataType,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
Subscribe to an item on the VDN.
</summary>
            <param name="variable">The variable to subscribe.</param>
            <param name="topicName">The VDN Topic Name of the item.</param>
            <param name="variableName">The VDN Variable Name of the item.</param>
            <param name="units">The units of measure of the item.</param>
            <param name="scope">The VDN scope of the item.</param>
            <param name="createDummy">
 If set to true and the variable does not exist,
 a dummy variable will be created. If set to false and the variable
 does not exist, the subscription will fail.
</param>
        </member>
        <member name="M:Csf.Imets.ToolCore.Vdn.NetVdnClientWrapper.Subscribe(Csf.Imets.ToolCore.Vdn.BaseDataType,System.String,System.String,System.String,System.Int32)">
            <summary>
Subscribe to an item on the VDN. This subscribe
will not create a dummy variable if it does not exist.
</summary>
            <param name="variable">The variable to publish.</param>
            <param name="topicName">The VDN Topic Name of the item.</param>
            <param name="variableName">The VDN Variable Name of the item.</param>
            <param name="units">The units of measure of the item.</param>
            <param name="scope">The VDN scope of the item.</param>
        </member>
        <member name="M:Csf.Imets.ToolCore.Vdn.NetVdnClientWrapper.Disconnect">
            <summary>
Closes the connection to the NetVdnServer and releases 
allocated resources. All links to published/subscribed variables
and queues are removed. You must re-publish/subscribe when you
connect again. 
</summary>
        </member>
        <member name="M:Csf.Imets.ToolCore.Vdn.NetVdnClientWrapper.Connect(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
Connect to the NetVdnServer. Throws an exception if it fails.
</summary>
            <param name="uniquename">The name of the client. Must be unique. Blank for anonymous.</param>
            <param name="ip"> The ip address of the VDN to connect to.</param>
            <param name="port">The port of the VDN to connect to.</param>
            <param name="rate">The rate in Hertz to receive updates from the VDN.</param>
            <param name="buffered">False to sample the data at the requested rate, true to queue the data and receive every single frame.</param>
            <exception cref="!:System.Exception">Thrown when ever connect fails.</exception>
        </member>
        <member name="M:Csf.Imets.ToolCore.Vdn.NetVdnClientWrapper.Dispose">
            <summary>
Default destructor.
</summary>
        </member>
        <member name="M:Csf.Imets.ToolCore.Vdn.NetVdnClientWrapper.#ctor">
            <summary>
Default constructor.
</summary>
        </member>
        <member name="P:Csf.Imets.ToolCore.Vdn.NetVdnClientWrapper.UniversalSimFrame">
            <summary>
Gets the universal simulation frame number of the client.
</summary>
        </member>
        <member name="P:Csf.Imets.ToolCore.Vdn.NetVdnClientWrapper.NodeName">
            <summary>
Gets the name of the node the client is connected to.
</summary>
        </member>
        <member name="P:Csf.Imets.ToolCore.Vdn.NetVdnClientWrapper.KernelName">
            <summary>
Gets the name of the Kernel the client is connected to.
</summary>
            <exception cref="!:System.Exception">Throw when the kernel name fails to convert to a string</exception>
        </member>
        <member name="P:Csf.Imets.ToolCore.Vdn.NetVdnClientWrapper.Timeout">
            <summary>
Gets or sets the timeout for the client in microseconds.               
</summary>
        </member>
        <member name="P:Csf.Imets.ToolCore.Vdn.NetVdnClientWrapper.Connected">
            <summary>
Gets a value indicating that the client is in a connected state.
</summary>
        </member>
        <member name="T:Csf.Imets.ToolCore.Vdn.NetVdnClientWrapper">
            <summary>
Provides access to the NetVdnClient class found in 
the libApex library.
The NetVdnClient class provides a network interface to the VDN.            
</summary>
        </member>
        <member name="F:Csf.Imets.ToolCore.Vdn.BaseDataType.m_BaseDataType">
            <summary>
Pointer to the baseDataType.
</summary>
        </member>
        <member name="M:Csf.Imets.ToolCore.Vdn.BaseDataType.CreateDataObject(System.Int32,System.String)">
            <summary>
Factory to create the actual VdnType based
on the given vdnType.
</summary>
            <returns>The VdnType as a BaseDataType</returns>
        </member>
        <member name="M:Csf.Imets.ToolCore.Vdn.BaseDataType.Reset">
            <summary>
Abstract method that resets the value
back to a default value (ie 0)
</summary>
        </member>
        <member name="M:Csf.Imets.ToolCore.Vdn.BaseDataType.ToString">
            <summary>
Returns a string representation of the 
baseDataType
</summary>
            <returns>The BaseDataType as a string.</returns>
        </member>
        <member name="P:Csf.Imets.ToolCore.Vdn.BaseDataType.IsOverriden">
            <summary>
Gets whether or not the value has been
overriden.
</summary>
        </member>
        <member name="P:Csf.Imets.ToolCore.Vdn.BaseDataType.IsValid">
            <summary>
Gets whether or not this 
BaseDataType is valid.
</summary>
        </member>
        <member name="P:Csf.Imets.ToolCore.Vdn.BaseDataType.Value">
            <summary>
Gets or sets the current Value of the 
BaseDataType.
</summary>
        </member>
        <member name="P:Csf.Imets.ToolCore.Vdn.BaseDataType.InternalData">
            <summary>
Gets a pointer to the actual BaseDataType
class.
</summary>
        </member>
        <member name="M:Csf.Imets.ToolCore.Vdn.BaseDataType.#ctor">
            <summary>
Default Constructor
</summary>
        </member>
        <member name="T:Csf.Imets.ToolCore.Vdn.BaseDataType">
            <summary>
Abstract class used by all VdnVariable
types. 
</summary>
        </member>
        <member name="P:Csf.Imets.ToolCore.Vdn.PublishedVariable.Size">
            <summary>
Gets the size of the published variable. 
This is currently only used for block data types.
</summary>
        </member>
        <member name="F:Csf.NetVdn.NetVdnClient.m_licenseContainer">
Used to check/check out licenses. 
</member>
        <member name="F:Csf.NetVdn.NetVdnClient.m_messageLength">
The current message length being received. 
</member>
        <member name="F:Csf.NetVdn.NetVdnClient.m_messageType">
The current message type being received. 
</member>
        <member name="F:Csf.NetVdn.NetVdnClient.m_bytesReceived">
The number of bytes received in the current message. 
</member>
        <member name="F:Csf.NetVdn.NetVdnClient.m_updateQueue">
Queue of buffers with update messages ready to be processed. 
</member>
        <member name="F:Csf.NetVdn.NetVdnClient.m_releasedRequestQueueIds">
A set of ids that are available to be reused for queues. 
</member>
        <member name="F:Csf.NetVdn.NetVdnClient.m_releasedVariableIds">
A set of ids that are available to be reused for variables. 
</member>
        <member name="F:Csf.NetVdn.NetVdnClient.m_nextRequestQueueId">
The highest used queue id. 
</member>
        <member name="F:Csf.NetVdn.NetVdnClient.m_nextVariableId">
The highest used variable id. 
</member>
        <member name="F:Csf.NetVdn.NetVdnClient.m_requestsToSend">
This vector stores requests that need to be sent to the server on commit. 
</member>
        <member name="F:Csf.NetVdn.NetVdnClient.m_requestQueueIds">
This map stores the local ids for request queues indexed by queue topic and name. 
</member>
        <member name="F:Csf.NetVdn.NetVdnClient.m_requestQueues">
Map of queue pointers indexed by id. 
</member>
        <member name="F:Csf.NetVdn.NetVdnClient.m_variableIds">
Map of local ids indexed by identity and address. 
</member>
        <member name="F:Csf.NetVdn.NetVdnClient.IdentityAddress.m_address">
The address of the storage location for the VDN variable. 
</member>
        <member name="F:Csf.NetVdn.NetVdnClient.IdentityAddress.m_identity">
The VDN identity of the variable. 
</member>
        <member name="M:Csf.NetVdn.NetVdnClient.IdentityAddress.op_Equality(Csf.NetVdn.NetVdnClient.IdentityAddress!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded equality operator. 
             * @return True if the left hand side is equal to the right.
             * @param right Right hand operand.

</member>
        <member name="M:Csf.NetVdn.NetVdnClient.IdentityAddress.op_LessThan(Csf.NetVdn.NetVdnClient.IdentityAddress!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded less than comparison operator. 
             * @return True if the left hand side is less than the right.
             * @param right Right hand operand.

</member>
        <member name="M:Csf.NetVdn.NetVdnClient.IdentityAddress.#ctor(Csf.Vdn.Identity!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Vdn.BaseDataType*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Constructor
             * @param identity The identity of the VDN variable.
             * @param address The address where the data will be stored.

</member>
        <member name="T:Csf.NetVdn.NetVdnClient.IdentityAddress">
This is a sub class that is used as a key value into the variableIds map. 
          * It combines the address of the local variable supplied by the user and
          * the Identity. The reason this is required is that you can subscribe
          * to same variable more than once. So the address is used as an additional
          * identifier to keep the subscription unique.

</member>
        <member name="F:Csf.NetVdn.NetVdnClient.m_subscribedVariables">
Map of Subscribed variables indexed by id. 
</member>
        <member name="F:Csf.NetVdn.NetVdnClient.m_publishedVariables">
Map of Published variables indexed by id. 
</member>
        <member name="F:Csf.NetVdn.NetVdnClient.m_variables">
Map of variable pointers indexed by id. 
</member>
        <member name="F:Csf.NetVdn.NetVdnClient.m_frameNumber">
Vdn Frame Number. 
</member>
        <member name="F:Csf.NetVdn.NetVdnClient.m_kernelFrequency">
Frequency of the kernel that the client is connected to. 
</member>
        <member name="F:Csf.NetVdn.NetVdnClient.m_name">
Name of the client. 
</member>
        <member name="F:Csf.NetVdn.NetVdnClient.m_nodeName">
Name of the node that the client is connected to. 
</member>
        <member name="F:Csf.NetVdn.NetVdnClient.m_kernelName">
Name of the kernel that the client is connected to. 
</member>
        <member name="F:Csf.NetVdn.NetVdnClient.m_updateBuffer">
Buffer to receive update messages. 
</member>
        <member name="F:Csf.NetVdn.NetVdnClient.m_recvBuffer">
Buffer to receive data. 
</member>
        <member name="F:Csf.NetVdn.NetVdnClient.m_sendBuffer">
Buffer to send data. 
</member>
        <member name="F:Csf.NetVdn.NetVdnClient.m_queueData">
Queued data mode. True to receive every single frame of data.
          * False to receive sampled data at the configured rate.

</member>
        <member name="F:Csf.NetVdn.NetVdnClient.m_hasEverCommitted">
Has the client performed its first commit? 
</member>
        <member name="F:Csf.NetVdn.NetVdnClient.m_hasCommitted">
Has the client performed a commit in this frame. 
</member>
        <member name="F:Csf.NetVdn.NetVdnClient.m_hasRead">
Has the client performed a read in this frame. In queued mode
          * This will only be true if all the frames for this cycle have been read.
</member>
        <member name="F:Csf.NetVdn.NetVdnClient.m_timeout">
The socket timeout value. 
</member>
        <member name="F:Csf.NetVdn.NetVdnClient.m_socket">
Socket to send and receive data on. 
</member>
        <member name="F:Csf.NetVdn.NetVdnClient.m_mutex">
Mutex to protect api methods in a multithreaded environment. 
</member>
        <member name="M:Csf.NetVdn.NetVdnClient.releaseRequestQueueId(System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Release a request queue id so that it can be reused.
          * @param id The id to be released.

</member>
        <member name="M:Csf.NetVdn.NetVdnClient.getNextRequestQueueId">
Get the next available request queue id.
          * @return The next available request queue id.

</member>
        <member name="M:Csf.NetVdn.NetVdnClient.releaseVariableId(System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Release a variable id so that it can be reused.
          * @param id The id to be released.

</member>
        <member name="M:Csf.NetVdn.NetVdnClient.getNextVariableId">
Get the next available variable id.
          * @return The next available variable id.

</member>
        <member name="M:Csf.NetVdn.NetVdnClient.sendMessage(System.UInt32,Csf.NetVdn.Messages.Message*)">
Serialize a message into the outgoing buffer and send it. This method appends the message type,
         * length and value into the outgoing buffer so that it can be 
         * sent out to the client. Type is passed in, and length is pulled 
         * from the message itself. If no message is passed in, a length 
         * of zero will be serialized.
         * @param type The message type.
         * @param message The message to serialize (optional).

</member>
        <member name="M:Csf.NetVdn.NetVdnClient.receiveMessage(System.UInt32,Csf.NetVdn.Messages.Message*)">
This method will parse data coming in on the socket until it finds a message
         *  of the requested type. It will then deserialize the message using the 
         *  message pointer passed in. If timeout occurs the method will return false. 
         *  If the message is received and deserialized, the method will return true. 
         *  If a socket error occurs, it will throw an exception. If no message 
         *  parameter is passed in, the data will be discarded.
         * @param type The message type to look for.
         * @param message Where to deserialize the message when it is received (optional).
         * @throws runtime_error if the client is not connected.

</member>
        <member name="M:Csf.NetVdn.NetVdnClient.unsubscribe(Csf.Vdn.BaseDataType*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Vdn.Scope.ScopeLevels!System.Runtime.CompilerServices.IsConst)">
Unsubscribe from an item on the VDN.
         * @return True on success, false on failure.
         * @param variable The variable to unsubscribe.
         * @param topicName The VDN Topic Name of the item.
         * @param variableName The VDN Variable Name of the item.
         * @param units The units of measure of the item.
         * @param scope The VDN scope of the item.
         * @throws runtime_error if the client is not connected.

</member>
        <member name="M:Csf.NetVdn.NetVdnClient.unpublishRequestQueue(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Unpublish a request queue.
         * @return True on success, false on failure.
         * @param topicName The VDN Topic Name of the queue.
         * @param queueName The VDN Queue Name of the queue.
         * @throws runtime_error if the client is not connected.

</member>
        <member name="M:Csf.NetVdn.NetVdnClient.subscribe(Csf.Vdn.BaseDataType*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Vdn.Scope.ScopeLevels!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Subscribe to an item on the VDN.
         * @return True on success, false on failure.
         * @param variable The variable to subscribe.
         * @param topicName The VDN Topic Name of the item.
         * @param variableName The VDN Variable Name of the item.
         * @param units The units of measure of the item.
         * @param scope The VDN scope of the item.
         * @param createDummy If set to true and the variable does not exist,
         *  a dummy variable will be created. If set to false and the variable
         *  does not exist, the subscription will fail.
         * @throws runtime_error if the client is not connected.

</member>
        <member name="M:Csf.NetVdn.NetVdnClient.request(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Utils.Request*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Send a request.
         * @param topicName The VDN Topic Name of the queue.
         * @param queueName The VDN Queue Name of the queue.
         * @param request The request to send.
         * @throws runtime_error if the client is not connected.

</member>
        <member name="M:Csf.NetVdn.NetVdnClient.publishRequestQueue(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Utils.RequestQueue*)">
Publish a request queue to the VDN.
         * NOTE: This method is here for backward compatability.
         * This method is depreciated and should not be used.
         * @return True on success, false on failure.
         * @param topicName The VDN Topic Name of the queue.
         * @param queueName The VDN Variable Name of the queue.
         * @param queue The queue to publish.
         * @throws runtime_error if the client is not connected.

</member>
        <member name="M:Csf.NetVdn.NetVdnClient.publishRequestQueue(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Utils.RequestQueue*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Publish a request queue to the VDN.
         * @return True on success, false on failure.
         * @param topicName The VDN Topic Name of the queue.
         * @param queueName The VDN Variable Name of the queue.
         * @param queue The queue to publish.
         * @throws runtime_error if the client is not connected.

</member>
        <member name="M:Csf.NetVdn.NetVdnClient.publish(Csf.Vdn.BaseDataType*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Vdn.Scope.ScopeLevels!System.Runtime.CompilerServices.IsConst)">
Publish an item to the VDN.
         * @return True on success, false on failure.
         * @param variable The variable to publish.
         * @param topicName The VDN Topic Name of the item.
         * @param variableName The VDN Variable Name of the item.
         * @param units The units of measure of the item.
         * @param scope The VDN scope of the item.
         * @throws runtime_error if the client is not connected.

</member>
        <member name="M:Csf.NetVdn.NetVdnClient.log(Csf.Vdn.Log.Severity!System.Runtime.CompilerServices.IsConst,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Post a log item to the VDN.
         * @param severity The severity of the log item.
         * @param description The description of the log item.
         * @param code
         * @param chapter
         * @param section
         * @param subsection
         * @param sourceFile The name of the file where the item occured.
         * @param sourceLine The line of the file where the item occured.
         * @param manualEntry True if manually entered from a GUI.
         * @throws runtime_error if the client is not connected.

</member>
        <member name="M:Csf.NetVdn.NetVdnClient.isRequestRegistered(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Query to see if a request name is already published on the VDN.
         * @return True if the request name is already published, 
         *  false otherwise.
         * @param topicName The VDN Topic Name of the queue to check.
         * @param queueName The VDN Queue Name of the queue to check.
         * @param requestName The name of the request to check.
         * @throws runtime_error if the client is not connected.

</member>
        <member name="M:Csf.NetVdn.NetVdnClient.isRequestQueuePublished(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Query to see if a queue is already published on the VDN.
         * @return True if the queue is already published, false otherwise.
         * @param topicName The VDN Topic Name of the queue to check.
         * @param queueName The VDN Queue Name of the queue to check.
         * @throws runtime_error if the client is not connected.

</member>
        <member name="M:Csf.NetVdn.NetVdnClient.isPublished(Csf.Vdn.DataTypes.Types!System.Runtime.CompilerServices.IsConst,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Vdn.Scope.ScopeLevels!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,Csf.Osal.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Query to see if an item is already published on the VDN.
         * The method will also provide the name of the source
         * publisher if the sourceName parameter is provided.
         * @return True if the item is already published, false otherwise.
         * @param type The data type of the item to check.
         * @param topicName The VDN Topic Name of the item to check.
         * @param variableName The VDN Variable Name of the item to check.
         * @param units The VDN Units of the item to check.
         * @param scope The VDN Scope of the item to check.
         * @param includeDummies True to include dummy publishers in
         *  the result set. Defaults to true.
         * @param sourceName The location where the name of the source
         *  publisher should be stored.
         * @throws runtime_error if the client is not connected.

</member>
        <member name="M:Csf.NetVdn.NetVdnClient.isPublished(Csf.Vdn.DataTypes.Types!System.Runtime.CompilerServices.IsConst,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Vdn.Scope.ScopeLevels!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Query to see if an item is already published on the VDN.
         * @return True if the item is already published, false otherwise.
         * @param type The data type of the item to check.
         * @param topicName The VDN Topic Name of the item to check.
         * @param variableName The VDN Variable Name of the item to check.
         * @param units The VDN Units of the item to check.
         * @param scope The VDN Scope of the item to check.
         * @param includeDummies True to include dummy publishers in
         *  the result set. Defaults to true.
         * @throws runtime_error if the client is not connected.

</member>
        <member name="M:Csf.NetVdn.NetVdnClient.getUniversalSimFrame">
Get the universal simulation frame number.
         * @return The universal simulation frame number.
         * @throws runtime_error if the client is not connected.

</member>
        <member name="M:Csf.NetVdn.NetVdnClient.getPublishedQueues(std.vector&lt;Csf.Vdn.RequestQueueInfo,std.allocator&lt;Csf.Vdn.RequestQueueInfo&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Get details about the published queues on the VDN.
         * @param queues The location where to store the data
         *  about published queues on the VDN.
         * @throws runtime_error if the client is not connected.

</member>
        <member name="M:Csf.NetVdn.NetVdnClient.getPublishedVariables(std.vector&lt;Csf.Vdn.VariableInfo,std.allocator&lt;Csf.Vdn.VariableInfo&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Get details about the published items on the VDN.
         * @param variables The location where to store the data
         *  about published variables on the VDN.
         * @throws runtime_error if the client is not connected.

</member>
        <member name="M:Csf.NetVdn.NetVdnClient.getName">
Get the client name.
         * @return The client name.
         * @throws runtime_error if the client is not connected.

</member>
        <member name="M:Csf.NetVdn.NetVdnClient.getNodeName">
Get the name of the Node that the client
         *  is connected to.
         * @return The name of the Node that the client
         *  is connected to.
         * @throws runtime_error if the client is not connected.

</member>
        <member name="M:Csf.NetVdn.NetVdnClient.getKernelName">
Get the name of the Kernel that the client
         *  is connected to.
         * @return The name of the Kernel that the client
         *  is connected to.
         * @throws runtime_error if the client is not connected.

</member>
        <member name="M:Csf.NetVdn.NetVdnClient.getKernelFrequency">
Get the Kernel's frequency in microseconds.
         * @throws runtime_error if the client is not connected.
         * @return The Kernel's frequency in microseconds.

</member>
        <member name="M:Csf.NetVdn.NetVdnClient.commit">
Commit changes to the VDN. NOTE: Do not call this faster
         * than the rate you specified in the call to connect. You
         * MUST call read before commit. No data will be sent to the server
         * until commit is called. You can only call commit once
         * per frame. Commit will return false if you have not done
         * a full read for this read/commit cycle. It will return
         * true if the commit was successfull.
         * @return True on success, false if a full read has not
         * been done.
         * @throws runtime_error if the client is not connected.

</member>
        <member name="M:Csf.NetVdn.NetVdnClient.read">
Read the latest frame of data from the VDN. You must
         * call read at least once per frame. You can call read
         * multiple times per frame to get a new frame of data that
         * may be pending. This will return false if no more data
         * is available for this read/commit cycle.
         * @return True if frame data was available, false on timeout.
         * @throws runtime_error if the client is not connected.

</member>
        <member name="M:Csf.NetVdn.NetVdnClient.setTimeout(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Set the current timeout value. A negative number indicates
         *  that operations should block forever.
         * @param milliseconds The new timeout value in milliseconds.

</member>
        <member name="M:Csf.NetVdn.NetVdnClient.getTimeout">
Get the current timeout value.
         * @return The current timeout value in milliseconds.

</member>
        <member name="M:Csf.NetVdn.NetVdnClient.isConnected">
Returns true if the client is connected, false otherwise.
         * @return True if connected, false if not.

</member>
        <member name="M:Csf.NetVdn.NetVdnClient.close">
Closes the connection to the NetVdnServer and releases 
         * allocated resources. All links to published/subscribed variables
         * and queues are removed. You must re-publish/subscribe when you
         * connect again. 

</member>
        <member name="M:Csf.NetVdn.NetVdnClient.connect(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt16!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,Csf.Vdn.Log.Severity!System.Runtime.CompilerServices.IsConst)">
Connect to the NetVdnServer. Throws an exception if it fails.
         * NOTE: It is important that you do not commit faster than the
         *       rate you specify, otherwise you may flood the server.
         * @param ipAddress The ip address of the VDN to connect to. The client
         *        will attempt to do dynamic name resolution for host names.
         * @param port The port of the VDN to connect to.
         * @param rate The rate in Hertz to receive updates from the VDN.
         *        A value of 0 will indicate to use the executive's rate.
         * @param name The name of the client. Must be unique. Blank for anonymous.
         * @param queueData False to sample the data at the requested rate, true to
         *        queue the data and receive every single frame.
         * @param reportLateFrames True to report late frames, false otherwise.
         * @param lostConnectionSeverity The severity of the log message generated
         *        when the client disconnects from the server.
         * @throws runtime_error if a connection cannot be made.

</member>
        <member name="M:Csf.NetVdn.NetVdnClient.op_Assign(Csf.NetVdn.NetVdnClient!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment operrator. 
          * @param r The client to copy.

</member>
        <member name="M:Csf.NetVdn.NetVdnClient.#ctor(Csf.NetVdn.NetVdnClient!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor. 
          * @param r The client to copy.

</member>
        <member name="M:Csf.NetVdn.NetVdnClient.Dispose">
Destructor. 
</member>
        <member name="M:Csf.NetVdn.NetVdnClient.#ctor">
Constructor 
</member>
        <member name="T:Csf.NetVdn.NetVdnClient">
Net VDN Client Class 
</member>
        <member name="F:Csf.Utils.LicenseContainer.m_defaultCmActFirmCode">
Default CmAct firm code used for all license checks if none is provided. 
</member>
        <member name="F:Csf.Utils.LicenseContainer.m_defaultCmDongleFirmCode">
Default CmDongle firm code used for all license checks if none is provided. 
</member>
        <member name="F:Csf.Utils.LicenseContainer.m_licenseList">
List of items to check for licenses. 
</member>
        <member name="F:Csf.Utils.LicenseContainer.m_licenseListMutex">
Protects the item list. 
</member>
        <member name="M:Csf.Utils.LicenseContainer.returnAllLicenses(std.list&lt;Csf.Osal.String,std.allocator&lt;Csf.Osal.String&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns all currently checked out licenses.
         * @param logMessages A list of strings where error messages should be placed.

</member>
        <member name="M:Csf.Utils.LicenseContainer.setDefaultCmActFirmCode(System.UInt32!System.Runtime.CompilerServices.IsConst)">
Sets the default CM Act firm code for the container and each already added license.
         * @param cmActFirmCode Default Act firm code to use for all items added to this License's list.

</member>
        <member name="M:Csf.Utils.LicenseContainer.setDefaultCmDongleFirmCode(System.UInt32!System.Runtime.CompilerServices.IsConst)">
Sets the default CM Dongle firm code for the container and each already added license. 
         * cmDongleFirmCode Default dongle firm code to use for all items added to this License's list.

</member>
        <member name="M:Csf.Utils.LicenseContainer.checkOutAllLicenses(std.list&lt;Csf.Osal.String,std.allocator&lt;Csf.Osal.String&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst)">
This will iterate through the list of Licenses and call checkOutFirstValidLicense
         * which will check out the license using up one license until the license is returned
         * (per the access rules, so station share will cause only 1 license to be checked out
         * regardless of the # of instances as long as they are all from the same session).
         * @return
         * - 0 : Success, at least one of the items was licensed.
         * nonzero: Error, license failure.
         * @param logMessages A list of strings where error messages should be placed.
         * @param decrementUnitCounter If true, the unit counter (# of remaining runs) for a particular
         * product license will be decremented by one. This is used
         * with demo licenses that are limited by # of runs usually.

</member>
        <member name="M:Csf.Utils.LicenseContainer.checkAllLicenses(std.list&lt;Csf.Osal.String,std.allocator&lt;Csf.Osal.String&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Will iterate through the list of Licenses and call checkForAnyValidLicense 
         * which only only check the license (not checkout).
         * It will first attempt to verify the license with the firm code it was set to.
         * If that fails it will use the default firm code that is used when none is provided.
         * @return
         * - 0 : Success, at least one of the items was licensed.
         * - -1 : Did not find any of the licenses.
         * - All other nonzero values: Error, license failure.
         * @param logMessages A list of strings where error messages should be placed.
         * @param decrementUnitCounter If true, the unit counter (# of remaining runs) for a particular
         * product license will be decremented by one. This is used
         * with demo licenses that are limited by # of runs usually.

</member>
        <member name="M:Csf.Utils.LicenseContainer.clearLicenseList">
Will iterate through the license list, delete memory allocated for a license and
         * then clear the list of the pointers to those licenses. 

</member>
        <member name="M:Csf.Utils.LicenseContainer.addLicense(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,Csf.Utils.License.AccessType.E!System.Runtime.CompilerServices.IsConst,Csf.Utils.License.AccessOptions.E!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst)">
Creates an instance of a License based on the input parameters then
         * adds it to the list of licenses in the container.
         * @param productCode Product code of the item.
         * @param featureMap Feature map of the item.
         * @param accessType Defines the type of access. Most common is e_stationShare.
         * @param accessOptions Defines where we look for licenses (local, LAN, both, and what order).
         * @param majorVersion Major version of the item (defaults to -2, which means
         * no version specified, use the default version). Use -1 to mean any version.
         * @param minorVersion Minor version of the item (defaults to -2, which means
         * no version specified, use the default version). Use -1 to mean any version.

</member>
        <member name="M:Csf.Utils.LicenseContainer.Dispose">
Dtor. This will iterate through the list and delete the allocated memory for hte license
         * then clear the list of all the License pointers. 

</member>
        <member name="M:Csf.Utils.LicenseContainer.#ctor(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst)">
Ctor.
         * @param cmDongleFirmCode Default dongle firm code to use for all items added to this License's
         * list. Default to the CSF dongle firm code.
         * @param cmActFirmCode Default Act firm code to use for all items added to this License's
         * list. Default to the CSF Act firm code.

</member>
        <member name="D:Csf.Utils.LicenseContainer.LicenseList">
List of items, usually used to check for licenses. 
</member>
        <member name="T:Csf.Utils.LicenseContainer">
Class that implements licensing with the WIBU CodeMeter system. 
</member>
        <member name="M:Csf.Osal.Threading.AutoMutex.op_Assign(Csf.Osal.Threading.AutoMutex*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment operator is private because it is invalid
				* to assign one AutoMutex to another. It throws if it
				* is called. 
				* @return Ref to the left hand side.
				* @param rhs Right hand side ref.

</member>
        <member name="F:Csf.Osal.Threading.AutoMutex.m_mutex">
Reference to the mutex being locked/unlocked. 
</member>
        <member name="M:Csf.Osal.Threading.AutoMutex.Dispose">
Destructor. Unlocks the mutex. 
</member>
        <member name="M:Csf.Osal.Threading.AutoMutex.#ctor(Csf.Osal.Threading.Mutex*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Constructor. 
				* @param mutex Reference to the mutex you are going to lock. 
				* This locks the mutex.

</member>
        <member name="T:Csf.Osal.Threading.AutoMutex">
This class represents a AutoMutex. You declare one at the start
			* of a scope block (curly braces) and then when you leave that scope
			* block, it will automatically unlock the mutex, even if you threw an
			* exception. This way you don't have to have one unlock call for
			* every place you might exit a function. 
</member>
        <member name="F:Csf.Osal.Net.TcpSocket.m_pimpl">
Private Implementation 
</member>
        <member name="T:Csf.Osal.Net.TcpSocket.TcpSocketPimpl">
Forward declaration for private implementation 
</member>
        <member name="M:Csf.Osal.Net.TcpSocket.op_Assign(Csf.Osal.Net.TcpSocket!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment Operator. 
</member>
        <member name="M:Csf.Osal.Net.TcpSocket.#ctor(Csf.Osal.Net.TcpSocket!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy Constructor. 
</member>
        <member name="M:Csf.Osal.Net.TcpSocket.#ctor(System.UInt64!System.Runtime.CompilerServices.IsConst)">
Constructor
             * @throws runtime_error On socket creation failure.
             * @param socket Socket descriptor.

</member>
        <member name="M:Csf.Osal.Net.TcpSocket.getSocketDescriptor">
Get the socket descriptor used by the socket class.
             * @return The Socket Descriptor.

</member>
        <member name="M:Csf.Osal.Net.TcpSocket.getPeerAddress">
Get peer address.
             * @throws runtime_error On operation failure.
             * @return The address of the peer that the socket is connected to.

</member>
        <member name="M:Csf.Osal.Net.TcpSocket.getReuseAddress">
Get reuse address.
             * @throws runtime_error On operation failure.
             * @return Reuse address.

</member>
        <member name="M:Csf.Osal.Net.TcpSocket.setReuseAddress(System.Boolean!System.Runtime.CompilerServices.IsConst)">
Set reuse address.
             * @throws runtime_error On operation failure.
             * @param reuse Enable/disable.

</member>
        <member name="M:Csf.Osal.Net.TcpSocket.getNoDelay">
Get No Delay (Nagel)
             * @throws runtime_error On operation failure.
             * @return Nagel algorithm enabled/disabled.

</member>
        <member name="M:Csf.Osal.Net.TcpSocket.setNoDelay(System.Boolean)">
Set No Delay (Nagel).
             * @throws runtime_error On operation failure.
             * @param noDelay Enable/disable.

</member>
        <member name="M:Csf.Osal.Net.TcpSocket.getSendTimeout">
Gets the send timeout on the socket.
             * @return Timeout in milliseconds.
             *         0 = non-blocking
             *        -1 = block forever

</member>
        <member name="M:Csf.Osal.Net.TcpSocket.setSendTimeout(System.Int32!System.Runtime.CompilerServices.IsConst)">
Sets the send timeout on the socket.
             * @throws runtime_error On failure to set timeout.
             * @param msec Timeout in milliseconds.
             *         0 = non-blocking
             *        -1 = block forever
             * @warning Setting non-blocking is global on the socket.
             *          Both send and receive will be non-blocking.

</member>
        <member name="M:Csf.Osal.Net.TcpSocket.getRecvTimeout">
Gets the receive timeout on the socket
             * @return Timeout in milliseconds.
             *         0 = non-blocking
             *        -1 = block forever

</member>
        <member name="M:Csf.Osal.Net.TcpSocket.setRecvTimeout(System.Int32!System.Runtime.CompilerServices.IsConst)">
Sets the receive timeout on the socket. This will also
             * affect the time that connect blocks.
             * @throws runtime_error On failure to set timeout.
             * @param msec Timeout in milliseconds.
             *         0 = non-blocking
             *        -1 = block forever
             * @warning Setting non-blocking is global on the socket.
             *          Both send and receive will be non-blocking.

</member>
        <member name="M:Csf.Osal.Net.TcpSocket.recvAll(System.Void*,System.UInt64!System.Runtime.CompilerServices.IsConst)">
Receives the specified amount of data before returning.
             * Be careful using this when a timeout is set or in
             * nonblocking mode. This method will not timeout.
             * @throws runtime_error On socket error.
             * @param buffer Buffer for received data.
             * @param size Amount in bytes of data to receive.

</member>
        <member name="M:Csf.Osal.Net.TcpSocket.sendAll(System.Void*!System.Runtime.CompilerServices.IsConst,System.UInt64!System.Runtime.CompilerServices.IsConst)">
Sends the specified amount of data before returning.
             * Be careful using this when a timeout is set or in
             * nonblocking mode. This method will not timeout.
             * @throws runtime_error On socket error.
             * @param buffer Data to send
             * @param size Amount of data in bytes to send.

</member>
        <member name="M:Csf.Osal.Net.TcpSocket.recv(System.Void*,System.UInt64!System.Runtime.CompilerServices.IsConst)">
Receive data into a buffer.
             * @throws runtime_error On socket error.
             * @return Number of bytes received. 0 if timed out.
             * @param buffer Buffer where received data is to be placed.
             * @param size Size of the receive buffer. 

</member>
        <member name="M:Csf.Osal.Net.TcpSocket.send(System.Void*!System.Runtime.CompilerServices.IsConst,System.UInt64!System.Runtime.CompilerServices.IsConst)">
Send data on socket. May send size or less bytes.
             * @throws runtime_error On socket error.
             * @return The number of bytes that were sent.
             * @param buffer Data to send.
             * @param size Number of bytes to send.

</member>
        <member name="M:Csf.Osal.Net.TcpSocket.accept">
Accept client connections on socket. You can
             * limit the time that the accept call blocks by using 
             * setRecvTimeout before calling accept. Note that if
             * you set a timeout, you must check the return value
             * because it can be NULL.
             * @throws runtime_error On invalid socket.
             * @return Client socket, 0 if timed out.

</member>
        <member name="M:Csf.Osal.Net.TcpSocket.listen(System.Int32!System.Runtime.CompilerServices.IsConst)">
Listen for incoming connections.
             * @throws runtime_error
             * @param backlog The number of waiting connections until 
             *                clients are rejected. Default value of 5.

</member>
        <member name="M:Csf.Osal.Net.TcpSocket.bind(Csf.Osal.Net.SocketAddress!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
Bind to port on a specific interface.
             * Note: Bind must come before any connect call.
             * @throws runtime_error On socket error.
             * @param address The address of the interface to bind to.
             * @param reuseAddressOnLinux Set the SO_REUSEADDR socket option
             * on Linux. If false, leave SO_REUSEADDR as is.
             * from "man 7 socket"
             * SO_REUSEADDR
             *    Indicates  that  the  rules used in validating addresses supplied in a bind(2) call
             *    should allow reuse of local addresses.  For  AF_INET  sockets  this  means  that  a
             *    socket  may  bind,  except  when  there  is an active listening socket bound to the
             *    address.  When the listening socket is bound to INADDR_ANY  with  a  specific  port
             *    then it is not possible to bind to this port for any local address.

</member>
        <member name="M:Csf.Osal.Net.TcpSocket.bind(Csf.Osal.Net.SocketAddress!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Bind to port on a specific interface.
             * Note: Bind must come before any connect call.
             * @throws runtime_error On socket error.
             * @param address The address of the interface to bind to.

</member>
        <member name="M:Csf.Osal.Net.TcpSocket.connect(Csf.Osal.Net.SocketAddress!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Connnect to specified address. You can
             * limit the time that the connect call blocks by using 
             * setRecvTimeout before calling connect.
             * @throws runtime_error On socket error.
             * @param address The address to connect to.

</member>
        <member name="M:Csf.Osal.Net.TcpSocket.Dispose">
Destructor 
</member>
        <member name="M:Csf.Osal.Net.TcpSocket.#ctor">
Constructor
             * @throws runtime_error On socket creation failure.

</member>
        <member name="T:Csf.Osal.Net.TcpSocket">
This class provides functionality to send and receive data on a TCP socket.
         * @warning If an exception is thrown by any of the class methods, the socket
         *       is no longer usable and should be deleted.

</member>
        <member name="M:Csf.Osal.Net.PeerShutdownException.#ctor">
Constructor. 
</member>
        <member name="T:Csf.Osal.Net.PeerShutdownException">
Exception that occurs when a peer connection performs a
          * graceful shutdown. 
</member>
        <member name="M:Csf.Osal.Net.Socket.op_Assign(Csf.Osal.Net.Socket!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment Operator. 
</member>
        <member name="M:Csf.Osal.Net.Socket.#ctor(Csf.Osal.Net.Socket!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy Constructor. 
</member>
        <member name="M:Csf.Osal.Net.Socket.#ctor(System.UInt64!System.Runtime.CompilerServices.IsConst)">
Constructor
             * @throws runtime_error On socket creation failure.
             * @param socket Socket descriptor 

</member>
        <member name="M:Csf.Osal.Net.Socket.getSocketDescriptor">
Get the socket descriptor used by the socket class.
             * @return The Socket Descriptor.

</member>
        <member name="M:Csf.Osal.Net.Socket.getReuseAddress">
Get reuse address.
             * @throws runtime_error On operation failure.
             * @return Reuse address.

</member>
        <member name="M:Csf.Osal.Net.Socket.setReuseAddress(System.Boolean!System.Runtime.CompilerServices.IsConst)">
Set reuse address.
             * @throws runtime_error On operation failure.
             * @param reuse Enable/disable.

</member>
        <member name="M:Csf.Osal.Net.Socket.getSendTimeout">
Gets the send timeout on the socket.
             * @return Timeout in milliseconds.
             *         0 = non-blocking
             *        -1 = block forever

</member>
        <member name="M:Csf.Osal.Net.Socket.setSendTimeout(System.Int32!System.Runtime.CompilerServices.IsConst)">
Sets the send timeout on the socket.
             * @throws runtime_error On failure to set timeout.
             * @param msec Timeout in milliseconds.
             *         0 = non-blocking
             *        -1 = block forever
             * @warning Setting non-blocking is global on the socket.
             *          Both send and receive will be non-blocking.

</member>
        <member name="M:Csf.Osal.Net.Socket.getRecvTimeout">
Gets the receive timeout on the socket
             * @return Timeout in milliseconds.
             *         0 = non-blocking
             *        -1 = block forever

</member>
        <member name="M:Csf.Osal.Net.Socket.setRecvTimeout(System.Int32!System.Runtime.CompilerServices.IsConst)">
Sets the receive timeout on the socket. This will also
             * affect the time that connect blocks.
             * @throws runtime_error On failure to set timeout.
             * @param msec Timeout in milliseconds.
             *         0 = non-blocking
             *        -1 = block forever
             * @warning Setting non-blocking is global on the socket.
             *          Both send and receive will be non-blocking.

</member>
        <member name="M:Csf.Osal.Net.Socket.recv(System.Void*,System.UInt64!System.Runtime.CompilerServices.IsConst)">
Receive data into a buffer.
             * @throws runtime_error On socket error.
             * @return 0 if the peer has performed an orderly shutdown,
             * else the # of bytes sent. If 0 is returned the socket should be 
             * deleted.
             * @param buffer Buffer where received data is to be placed.
             * @param size Size of the receive buffer. 

</member>
        <member name="M:Csf.Osal.Net.Socket.send(System.Void*!System.Runtime.CompilerServices.IsConst,System.UInt64!System.Runtime.CompilerServices.IsConst)">
Send data on socket. May send size or less bytes.
             * @throws runtime_error On socket error.
             * @return The number of bytes that were sent.
             * @param buffer Data to send.
             * @param size Number of bytes to send.

</member>
        <member name="M:Csf.Osal.Net.Socket.bind(Csf.Osal.Net.SocketAddress!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Bind to port on a specific interface. 
             * Note: Bind must come before any connect call.
             * @throws runtime_error On socket error.
             * @param address The address of the interface to bind to.

</member>
        <member name="M:Csf.Osal.Net.Socket.connect(Csf.Osal.Net.SocketAddress!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Connnect to specified address. You can
             * limit the time that the connect call blocks by using 
             * setRecvTimeout before calling connect.
             * @throws runtime_error On socket error.
             * @param address The address to connect to.

</member>
        <member name="M:Csf.Osal.Net.Socket.Dispose">
Destructor. 
</member>
        <member name="M:Csf.Osal.Net.Socket.#ctor">
Constructor. 
</member>
        <member name="T:Csf.Osal.Net.Socket">
Base class for all Osal::Net sockets. 
</member>
        <member name="D:Csf.Osal.Net.SocketDescriptor">
Defines a socket descriptor. 
</member>
        <member name="M:Csf.Osal.Net.op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.Net.SocketAddress!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded stream insertion operator. Prints out all info about this class.
          * @return Output stream.
          * @param out Output stream to insert into.
          * @param rhs Object to insert into the stream.

</member>
        <member name="F:Csf.Osal.Net.SocketAddress.m_port">
Port number 
</member>
        <member name="F:Csf.Osal.Net.SocketAddress.m_ipAddress">
IP address. 
</member>
        <member name="M:Csf.Osal.Net.SocketAddress.toString">
Get as a string.
             * @return String with the IP address in dotted notation followed
             * by a colon and the port number (e.g. "192.168.2.3:1024")

</member>
        <member name="M:Csf.Osal.Net.SocketAddress.getPort">
Get the Port number
             * @return Port number of the socket.

</member>
        <member name="M:Csf.Osal.Net.SocketAddress.getIpAddress">
Get the IP address.
             * @return IP address of the socket.

</member>
        <member name="M:Csf.Osal.Net.SocketAddress.setPort(System.UInt16!System.Runtime.CompilerServices.IsConst)">
Set the Port number
             * @param port Port number to set.

</member>
        <member name="M:Csf.Osal.Net.SocketAddress.setIpAddress(Csf.Osal.Net.IpAddress!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Set the IP address.
             * @param ipAddress IP address to set.

</member>
        <member name="M:Csf.Osal.Net.SocketAddress.op_Inequality(Csf.Osal.Net.SocketAddress!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Inequality operator.
             * @return True = they are not equal, false = they are equal. 
             * @param right SocketAddress to perform inequality check with.

</member>
        <member name="M:Csf.Osal.Net.SocketAddress.op_Equality(Csf.Osal.Net.SocketAddress!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Equality operator.
             * @return True = they are equal, false = they are not equal. 
             * @param right SocketAddress to perfrom equality check with.

</member>
        <member name="M:Csf.Osal.Net.SocketAddress.op_Assign(Csf.Osal.Net.SocketAddress!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment operator.
             * @return Reference to this.
             * @param right SocketAddress to use for assignment.

</member>
        <member name="M:Csf.Osal.Net.SocketAddress.Dispose">
Destructor. 
</member>
        <member name="M:Csf.Osal.Net.SocketAddress.#ctor(Csf.Osal.Net.SocketAddress!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor.
             * @param copy SocketAddress to copy.

</member>
        <member name="M:Csf.Osal.Net.SocketAddress.#ctor(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt16!System.Runtime.CompilerServices.IsConst)">
Constructor using a String.
             * @param ipAddress IP address.
             * @param port Port number (defaults to 0).

</member>
        <member name="M:Csf.Osal.Net.SocketAddress.#ctor(Csf.Osal.Net.IpAddress!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt16!System.Runtime.CompilerServices.IsConst)">
Constructor using an IpAddress.
             * @param ipAddress IP address in dotted in notation (e.g. "192.168.1.2").
             * Defaults to "0.0.0.0".
             * @param port Port number (defaults to 0).

</member>
        <member name="T:Csf.Osal.Net.SocketAddress">
The Socket Address class represents a socket address (IP address + port number 
</member>
        <member name="F:Csf.Osal.Net.IpAddress.CSF_IPDATA.m_addressDword">
The address represented as a UInt32. 
</member>
        <member name="F:Csf.Osal.Net.IpAddress.CSF_IPDATA.m_address">
The address represented as 4 octets. 
</member>
        <member name="T:Csf.Osal.Net.IpAddress.CSF_IPDATA">
Four octets for an IPV4 address.

</member>
        <member name="M:Csf.Osal.Net.IpAddress.getInAddrAny">
Get an IpAddress representing the "any" address.
                * @return An IpAddress representing the "any" address.

</member>
        <member name="M:Csf.Osal.Net.IpAddress.op_Equality(Csf.Osal.Net.IpAddress!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Equality operator. Compares the addresses.
                * @return True = they are equal, false = they are not equal.
                * @param right Right hand side.

</member>
        <member name="M:Csf.Osal.Net.IpAddress.toString">
Get the string representation in dotted octet notation (e.g. "192.168.1.20").
                * @return String version of the IP address.

</member>
        <member name="M:Csf.Osal.Net.IpAddress.getDword">
Get the address represented as a UInt32.
                * @return The address in UInt32 format.
                * The octets will be in reverse order on a little endian machine.

</member>
        <member name="M:Csf.Osal.Net.IpAddress.getOctet(System.UInt32)">
Get the specified octet.
                * @return String representing octet
                * @param octet (1 - 4)
                * @throws  If it fails, this method will throw a runtime_error.

</member>
        <member name="M:Csf.Osal.Net.IpAddress.getOctets(System.Byte*)">
Get a copy of the octets.
                * @param data Where to store the octets.

</member>
        <member name="M:Csf.Osal.Net.IpAddress.Dispose">
Destructor. 
</member>
        <member name="M:Csf.Osal.Net.IpAddress.#ctor(System.Byte!System.Runtime.CompilerServices.IsConst*)">
Constructor.
                * @param ip IP address as an array of octets.

</member>
        <member name="M:Csf.Osal.Net.IpAddress.#ctor(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Constructor.
                * @param address IP address in dotted notation (e.g. "192.168.1.20"). Default is "0.0.0.0".

</member>
        <member name="M:Csf.Osal.Net.op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.Net.IpAddress!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Stream insertion operator for Ip Address. 
                * @return The resulting stream.
                * @param output The stream to write to.
                * @param rhs The IpAddress to write to the stream.

</member>
        <member name="T:Csf.Osal.Net.IpAddress">
The IpAddress class is used for IP address representation  
</member>
        <member name="M:Csf.NetVdn.NetVdnClientIfc.unsubscribe(Csf.Vdn.BaseDataType*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Vdn.Scope.ScopeLevels!System.Runtime.CompilerServices.IsConst)">
Unsubscribe from an item on the VDN.
         * @return True on success, false on failure.
         * @param variable The variable to unsubscribe.
         * @param topicName The VDN Topic Name of the item.
         * @param variableName The VDN Variable Name of the item.
         * @param units The units of measure of the item.
         * @param scope The VDN scope of the item.

</member>
        <member name="M:Csf.NetVdn.NetVdnClientIfc.unpublishRequestQueue(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Unpublish a request queue.
         * @return True on success, false on failure.
         * @param topicName The VDN Topic Name of the queue.
         * @param queueName The VDN Queue Name of the queue.

</member>
        <member name="M:Csf.NetVdn.NetVdnClientIfc.subscribe(Csf.Vdn.BaseDataType*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Vdn.Scope.ScopeLevels!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Subscribe to an item on the VDN.
         * @return True on success, false on failure.
         * @param variable The variable to subscribe.
         * @param topicName The VDN Topic Name of the item.
         * @param variableName The VDN Variable Name of the item.
         * @param units The units of measure of the item.
         * @param scope The VDN scope of the item.
         * @param createDummy If set to true and the variable does not exist,
         *  a dummy variable will be created. If set to false and the variable
         *  does not exist, the subscription will fail.

</member>
        <member name="M:Csf.NetVdn.NetVdnClientIfc.request(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Utils.Request*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Send a request.
         * @param topicName The VDN Topic Name of the queue.
         * @param queueName The VDN Queue Name of the queue.
         * @param request The request to send.

</member>
        <member name="M:Csf.NetVdn.NetVdnClientIfc.publishRequestQueue(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Utils.RequestQueue*)">
Publish a request queue to the VDN.
         * NOTE: This method is here for backward compatability.
         * This method is depreciated and should not be used.
         * @return True on success, false on failure.
         * @param topicName The VDN Topic Name of the queue.
         * @param queueName The VDN Variable Name of the queue.
         * @param queue The queue to publish.

</member>
        <member name="M:Csf.NetVdn.NetVdnClientIfc.publishRequestQueue(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Utils.RequestQueue*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Publish a request queue to the VDN.
         * @return True on success, false on failure.
         * @param topicName The VDN Topic Name of the queue.
         * @param queueName The VDN Variable Name of the queue.
         * @param queue The queue to publish.

</member>
        <member name="M:Csf.NetVdn.NetVdnClientIfc.publish(Csf.Vdn.BaseDataType*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Vdn.Scope.ScopeLevels!System.Runtime.CompilerServices.IsConst)">
Publish an item to the VDN.
         * @return True on success, false on failure.
         * @param variable The variable to publish.
         * @param topicName The VDN Topic Name of the item.
         * @param variableName The VDN Variable Name of the item.
         * @param units The units of measure of the item.
         * @param scope The VDN scope of the item.

</member>
        <member name="M:Csf.NetVdn.NetVdnClientIfc.log(Csf.Vdn.Log.Severity!System.Runtime.CompilerServices.IsConst,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Post a log item to the VDN.
         * @param severity The severity of the log item.
         * @param description The description of the log item.
         * @param code
         * @param chapter
         * @param section
         * @param subsection
         * @param sourceFile The name of the file where the item occured.
         * @param sourceLine The line of the file where the item occured.
         * @param manualEntry True if manually entered from a GUI.

</member>
        <member name="M:Csf.NetVdn.NetVdnClientIfc.isRequestRegistered(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Query to see if a request name is already published on the VDN.
         * @return True if the request name is already published, 
         *  false otherwise.
         * @param topicName The VDN Topic Name of the queue to check.
         * @param queueName The VDN Queue Name of the queue to check.
         * @param requestName The name of the request to check.

</member>
        <member name="M:Csf.NetVdn.NetVdnClientIfc.isRequestQueuePublished(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Query to see if a queue is already published on the VDN.
         * @return True if the queue is already published, false otherwise.
         * @param topicName The VDN Topic Name of the queue to check.
         * @param queueName The VDN Queue Name of the queue to check.

</member>
        <member name="M:Csf.NetVdn.NetVdnClientIfc.isPublished(Csf.Vdn.DataTypes.Types!System.Runtime.CompilerServices.IsConst,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Vdn.Scope.ScopeLevels!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,Csf.Osal.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Query to see if an item is already published on the VDN.
         * The method will also provide the name of the source
         * publisher if the sourceName parameter is provided.
         * @return True if the item is already published, false otherwise.
         * @param type The data type of the item to check.
         * @param topicName The VDN Topic Name of the item to check.
         * @param variableName The VDN Variable Name of the item to check.
         * @param units The VDN Units of the item to check.
         * @param scope The VDN Scope of the item to check.
         * @param includeDummies True to include dummy publishers in
         *  the result set. Defaults to true.
         * @param sourceName The location where the name of the source
         *  publisher should be stored.

</member>
        <member name="M:Csf.NetVdn.NetVdnClientIfc.isPublished(Csf.Vdn.DataTypes.Types!System.Runtime.CompilerServices.IsConst,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Vdn.Scope.ScopeLevels!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Query to see if an item is already published on the VDN.
         * @return True if the item is already published, false otherwise.
         * @param type The data type of the item to check.
         * @param topicName The VDN Topic Name of the item to check.
         * @param variableName The VDN Variable Name of the item to check.
         * @param units The VDN Units of the item to check.
         * @param scope The VDN Scope of the item to check.
         * @param includeDummies True to include dummy publishers in
         *  the result set. Defaults to true.

</member>
        <member name="M:Csf.NetVdn.NetVdnClientIfc.getUniversalSimFrame">
Get the universal simulation frame number.
         * @return The universal simulation frame number.

</member>
        <member name="M:Csf.NetVdn.NetVdnClientIfc.getPublishedQueues(std.vector&lt;Csf.Vdn.RequestQueueInfo,std.allocator&lt;Csf.Vdn.RequestQueueInfo&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Get details about the published queues on the VDN.
         * @param queues The location where to store the data
         *  about published queues on the VDN.

</member>
        <member name="M:Csf.NetVdn.NetVdnClientIfc.getPublishedVariables(std.vector&lt;Csf.Vdn.VariableInfo,std.allocator&lt;Csf.Vdn.VariableInfo&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Get details about the published items on the VDN.
         * @param variables The location where to store the data
         *  about published variables on the VDN.

</member>
        <member name="M:Csf.NetVdn.NetVdnClientIfc.getName">
Get the client name.
         * @return The client name.

</member>
        <member name="M:Csf.NetVdn.NetVdnClientIfc.getNodeName">
Get the name of the Node that the client
         *  is connected to.
         * @return The name of the Node that the client
         *  is connected to.

</member>
        <member name="M:Csf.NetVdn.NetVdnClientIfc.getKernelName">
Get the name of the Kernel that the client
         *  is connected to.
         * @return The name of the Kernel that the client
         *  is connected to.

</member>
        <member name="M:Csf.NetVdn.NetVdnClientIfc.getKernelFrequency">
Get the Kernel's frequency in microseconds.
         * @return The Kernel's frequency in microseconds.

</member>
        <member name="M:Csf.NetVdn.NetVdnClientIfc.commit">
Commit changes to the VDN. NOTE: Do not call this faster
         * than the rate you specified in the call to connect. You
         * MUST call read before commit. No data will be sent to the server
         * until commit is called. You can only call commit once
         * per frame. Commit will return false if you have not done
         * a full read for this read/commit cycle. It will return
         * true if the commit was successfull.
         * @return True on success, false if a full read has not
         * been done.

</member>
        <member name="M:Csf.NetVdn.NetVdnClientIfc.read">
Read the latest frame of data from the VDN. You must
         * call read at least once per frame. You can call read
         * multiple times per frame to get a new frame of data that
         * may be pending. This will return false if no more data
         * is available for this read/commit cycle.
         * @return True if frame data was available, false on timeout.

</member>
        <member name="M:Csf.NetVdn.NetVdnClientIfc.setTimeout(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Set the current timeout value. A negative number indicates
         *  that operations should block forever.
         * @param milliseconds The new timeout value in milliseconds.

</member>
        <member name="M:Csf.NetVdn.NetVdnClientIfc.getTimeout">
Get the current timeout value.
         * @return The current timeout value in milliseconds.

</member>
        <member name="M:Csf.NetVdn.NetVdnClientIfc.isConnected">
Returns true if the client is connected, false otherwise.
         * @return True if connected, false if not.

</member>
        <member name="M:Csf.NetVdn.NetVdnClientIfc.close">
Closes the connection to the NetVdnServer and releases 
         * allocated resources. All links to published/subscribed variables
         * and queues are removed. You must re-publish/subscribe when you
         * connect again. 

</member>
        <member name="M:Csf.NetVdn.NetVdnClientIfc.connect(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt16!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,Csf.Vdn.Log.Severity!System.Runtime.CompilerServices.IsConst)">
Connect to the NetVdnServer. Throws an exception if it fails.
         * NOTE: It is important that you do not commit faster than the
         *       rate you specify, otherwise you may flood the server.
         * @param ipAddress The ip address of the VDN to connect to. The client
         *        will attempt to do dynamic name resolution for host names.
         * @param port The port of the VDN to connect to.
         * @param rate The rate in Hertz to receive updates from the VDN.
         *        A value of 0 will indicate to use the executive's rate.
         * @param name The name of the client. Must be unique. Blank for anonymous.
         * @param queueData False to sample the data at the requested rate, true to
         *        queue the data and receive every single frame.
         * @param reportLateFrames True to report late frames, false otherwise.
         * @param lostConnectionSeverity The severity of the log message generated
         *        when the client disconnects from the server.

</member>
        <member name="M:Csf.NetVdn.NetVdnClientIfc.Dispose">
Destructor. 
</member>
        <member name="T:Csf.NetVdn.NetVdnClientIfc">
Net VDN Client Interface 
</member>
        <member name="M:Csf.NetVdn.Messages.Message.serializeSize(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*)">
Returns the number of bytes that will be needed to serialize the value.
             * @return The number of bytes that will be needed to serialize the value.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serialize(System.Boolean,Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Vdn.BaseDataType*)">
Encodes a value to an XDR buffer or decodes it from the buffer to the value.
             * @param encode True to encode value into buffer, false to decode from the buffer to value.
             * @param buffer The XDR buffer to use for encoding/decoding.
             * @param value The value to use for encoding/decodeing.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serializeSize(Csf.Vdn.Block!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the number of bytes that will be needed to serialize the value.
             * @return The number of bytes that will be needed to serialize the value.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serialize(System.Boolean,Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Vdn.Block*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a value to an XDR buffer or decodes it from the buffer to the value.
             * @param encode True to encode value into buffer, false to decode from the buffer to value.
             * @param buffer The XDR buffer to use for encoding/decoding.
             * @param value The value to use for encoding/decodeing.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serializeSize(Csf.Vdn.SerialPort!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the number of bytes that will be needed to serialize the value.
             * @return The number of bytes that will be needed to serialize the value.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serialize(System.Boolean,Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Vdn.SerialPort*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a value to an XDR buffer or decodes it from the buffer to the value.
             * @param encode True to encode value into buffer, false to decode from the buffer to value.
             * @param buffer The XDR buffer to use for encoding/decoding.
             * @param value The value to use for encoding/decodeing.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serializeSize(Csf.Vdn.AvioA708Channel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the number of bytes that will be needed to serialize the value.
             * @return The number of bytes that will be needed to serialize the value.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serialize(System.Boolean,Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Vdn.AvioA708Channel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a value to an XDR buffer or decodes it from the buffer to the value.
             * @param encode True to encode value into buffer, false to decode from the buffer to value.
             * @param buffer The XDR buffer to use for encoding/decoding.
             * @param value The value to use for encoding/decodeing.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serializeSize(Csf.Vdn.AvioA429Channel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the number of bytes that will be needed to serialize the value.
             * @return The number of bytes that will be needed to serialize the value.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serialize(System.Boolean,Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Vdn.AvioA429Channel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a value to an XDR buffer or decodes it from the buffer to the value.
             * @param encode True to encode value into buffer, false to decode from the buffer to value.
             * @param buffer The XDR buffer to use for encoding/decoding.
             * @param value The value to use for encoding/decodeing.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serializeSize(Csf.Vdn.AvioA429DataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the number of bytes that will be needed to serialize the value.
             * @return The number of bytes that will be needed to serialize the value.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serialize(System.Boolean,Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Vdn.AvioA429DataType*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a value to an XDR buffer or decodes it from the buffer to the value.
             * @param encode True to encode value into buffer, false to decode from the buffer to value.
             * @param buffer The XDR buffer to use for encoding/decoding.
             * @param value The value to use for encoding/decodeing.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serializeSize(Csf.Vdn.Text!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the number of bytes that will be needed to serialize the value.
             * @return The number of bytes that will be needed to serialize the value.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serialize(System.Boolean,Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Vdn.Text*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a value to an XDR buffer or decodes it from the buffer to the value.
             * @param encode True to encode value into buffer, false to decode from the buffer to value.
             * @param buffer The XDR buffer to use for encoding/decoding.
             * @param value The value to use for encoding/decodeing.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serializeSize(Csf.Vdn.Bool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the number of bytes that will be needed to serialize the value.
             * @return The number of bytes that will be needed to serialize the value.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serialize(System.Boolean,Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Vdn.Bool*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a value to an XDR buffer or decodes it from the buffer to the value.
             * @param encode True to encode value into buffer, false to decode from the buffer to value.
             * @param buffer The XDR buffer to use for encoding/decoding.
             * @param value The value to use for encoding/decodeing.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serializeSize(Csf.Vdn.Int64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the number of bytes that will be needed to serialize the value.
             * @return The number of bytes that will be needed to serialize the value.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serialize(System.Boolean,Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Vdn.Int64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a value to an XDR buffer or decodes it from the buffer to the value.
             * @param encode True to encode value into buffer, false to decode from the buffer to value.
             * @param buffer The XDR buffer to use for encoding/decoding.
             * @param value The value to use for encoding/decodeing.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serializeSize(Csf.Vdn.Float64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the number of bytes that will be needed to serialize the value.
             * @return The number of bytes that will be needed to serialize the value.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serialize(System.Boolean,Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Vdn.Float64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a value to an XDR buffer or decodes it from the buffer to the value.
             * @param encode True to encode value into buffer, false to decode from the buffer to value.
             * @param buffer The XDR buffer to use for encoding/decoding.
             * @param value The value to use for encoding/decodeing.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serializeSize(Csf.Vdn.Identity!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the number of bytes that will be needed to serialize the value.
             * @return The number of bytes that will be needed to serialize the value.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serialize(System.Boolean,Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Vdn.Identity*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a value to an XDR buffer or decodes it from the buffer to the value.
             * @param encode True to encode value into buffer, false to decode from the buffer to value.
             * @param buffer The XDR buffer to use for encoding/decoding.
             * @param value The value to use for encoding/decodeing.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serializeSize(Csf.Vdn.Scope.ScopeLevels!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the number of bytes that will be needed to serialize the value.
             * @return The number of bytes that will be needed to serialize the value.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serialize(System.Boolean,Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Vdn.Scope.ScopeLevels*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a value to an XDR buffer or decodes it from the buffer to the value.
             * @param encode True to encode value into buffer, false to decode from the buffer to value.
             * @param buffer The XDR buffer to use for encoding/decoding.
             * @param value The value to use for encoding/decodeing.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serializeSize(Csf.Vdn.DataTypes.Types!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the number of bytes that will be needed to serialize the value.
             * @return The number of bytes that will be needed to serialize the value.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serialize(System.Boolean,Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Vdn.DataTypes.Types*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a value to an XDR buffer or decodes it from the buffer to the value.
             * @param encode True to encode value into buffer, false to decode from the buffer to value.
             * @param buffer The XDR buffer to use for encoding/decoding.
             * @param value The value to use for encoding/decodeing.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serializeSize(Csf.Utils.Request!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the number of bytes that will be needed to serialize the value.
             * @return The number of bytes that will be needed to serialize the value.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serialize(System.Boolean,Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Utils.Request*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a value to an XDR buffer or decodes it from the buffer to the value.
             * @param encode True to encode value into buffer, false to decode from the buffer to value.
             * @param buffer The XDR buffer to use for encoding/decoding.
             * @param value The value to use for encoding/decodeing.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serializeSize(Csf.Osal.ByteArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the number of bytes that will be needed to serialize the value.
             * @return The number of bytes that will be needed to serialize the value.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serialize(System.Boolean,Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.ByteArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a value to an XDR buffer or decodes it from the buffer to the value.
             * @param encode True to encode value into buffer, false to decode from the buffer to value.
             * @param buffer The XDR buffer to use for encoding/decoding.
             * @param value The value to use for encoding/decodeing.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serializeSize(System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst)">
Returns the number of bytes that will be needed to serialize the value.
             * @return The number of bytes that will be needed to serialize the value.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serialize(System.Boolean,Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsConst)">
Encodes a value to an XDR buffer or decodes it from the buffer to the value.
             * @param encode True to encode value into buffer, false to decode from the buffer to value.
             * @param buffer The XDR buffer to use for encoding/decoding.
             * @param data A pointer to a buffer of data to use for encoding/decoding.
             * @param size The size of the buffer of data to use for encoding/decoding.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serializeSize(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the number of bytes that will be needed to serialize the value.
             * @return The number of bytes that will be needed to serialize the value.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serialize(System.Boolean,Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a value to an XDR buffer or decodes it from the buffer to the value.
             * @param encode True to encode value into buffer, false to decode from the buffer to value.
             * @param buffer The XDR buffer to use for encoding/decoding.
             * @param value The value to use for encoding/decodeing.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serializeSize(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the number of bytes that will be needed to serialize the value.
             * @return The number of bytes that will be needed to serialize the value.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serialize(System.Boolean,Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a value to an XDR buffer or decodes it from the buffer to the value.
             * @param encode True to encode value into buffer, false to decode from the buffer to value.
             * @param buffer The XDR buffer to use for encoding/decoding.
             * @param value The value to use for encoding/decodeing.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serializeSize(System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the number of bytes that will be needed to serialize the value.
             * @return The number of bytes that will be needed to serialize the value.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serialize(System.Boolean,Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a value to an XDR buffer or decodes it from the buffer to the value.
             * @param encode True to encode value into buffer, false to decode from the buffer to value.
             * @param buffer The XDR buffer to use for encoding/decoding.
             * @param value The value to use for encoding/decodeing.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serializeSize(System.UInt64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the number of bytes that will be needed to serialize the value.
             * @return The number of bytes that will be needed to serialize the value.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serialize(System.Boolean,Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a value to an XDR buffer or decodes it from the buffer to the value.
             * @param encode True to encode value into buffer, false to decode from the buffer to value.
             * @param buffer The XDR buffer to use for encoding/decoding.
             * @param value The value to use for encoding/decodeing.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serializeSize(System.Int64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the number of bytes that will be needed to serialize the value.
             * @return The number of bytes that will be needed to serialize the value.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serialize(System.Boolean,Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a value to an XDR buffer or decodes it from the buffer to the value.
             * @param encode True to encode value into buffer, false to decode from the buffer to value.
             * @param buffer The XDR buffer to use for encoding/decoding.
             * @param value The value to use for encoding/decodeing.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serializeSize(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the number of bytes that will be needed to serialize the value.
             * @return The number of bytes that will be needed to serialize the value.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serialize(System.Boolean,Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a value to an XDR buffer or decodes it from the buffer to the value.
             * @param encode True to encode value into buffer, false to decode from the buffer to value.
             * @param buffer The XDR buffer to use for encoding/decoding.
             * @param value The value to use for encoding/decodeing.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serializeSize(System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the number of bytes that will be needed to serialize the value.
             * @return The number of bytes that will be needed to serialize the value.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serialize(System.Boolean,Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a value to an XDR buffer or decodes it from the buffer to the value.
             * @param encode True to encode value into buffer, false to decode from the buffer to value.
             * @param buffer The XDR buffer to use for encoding/decoding.
             * @param value The value to use for encoding/decodeing.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serializeSize(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the number of bytes that will be needed to serialize the value.
             * @return The number of bytes that will be needed to serialize the value.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serialize(System.Boolean,Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a value to an XDR buffer or decodes it from the buffer to the value.
             * @param encode True to encode value into buffer, false to decode from the buffer to value.
             * @param buffer The XDR buffer to use for encoding/decoding.
             * @param value The value to use for encoding/decodeing.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serializeSize(System.UInt16!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the number of bytes that will be needed to serialize the value.
             * @return The number of bytes that will be needed to serialize the value.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serialize(System.Boolean,Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a value to an XDR buffer or decodes it from the buffer to the value.
             * @param encode True to encode value into buffer, false to decode from the buffer to value.
             * @param buffer The XDR buffer to use for encoding/decoding.
             * @param value The value to use for encoding/decodeing.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serializeSize(System.Int16!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the number of bytes that will be needed to serialize the value.
             * @return The number of bytes that will be needed to serialize the value.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serialize(System.Boolean,Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a value to an XDR buffer or decodes it from the buffer to the value.
             * @param encode True to encode value into buffer, false to decode from the buffer to value.
             * @param buffer The XDR buffer to use for encoding/decoding.
             * @param value The value to use for encoding/decodeing.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serializeSize(System.Byte!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the number of bytes that will be needed to serialize the value.
             * @return The number of bytes that will be needed to serialize the value.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serialize(System.Boolean,Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a value to an XDR buffer or decodes it from the buffer to the value.
             * @param encode True to encode value into buffer, false to decode from the buffer to value.
             * @param buffer The XDR buffer to use for encoding/decoding.
             * @param value The value to use for encoding/decodeing.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serializeSize(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the number of bytes that will be needed to serialize the value.
             * @return The number of bytes that will be needed to serialize the value.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serialize(System.Boolean,Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a value to an XDR buffer or decodes it from the buffer to the value.
             * @param encode True to encode value into buffer, false to decode from the buffer to value.
             * @param buffer The XDR buffer to use for encoding/decoding.
             * @param value The value to use for encoding/decodeing.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.requestToString(Csf.Utils.Request*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsConst)">
Utility method to convert the request data to a string.
             * @return The request data as a string.
             * @param request The request to convert to a string.
             * @param indentSize The number of spaces to indent the report.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.toString">
Return the message data as a string in human readable form.
             * @return A string that represents the data of the message in human readable form.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.size">
Return the size of the message in bytes.
             * @return The size of the message in bytes.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.serialize(System.Boolean,Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Serialize the message into/from a buffer.
             * @param encode True to encode the message, false to decode it.
             * @param buffer The buffer to read/write to.

</member>
        <member name="M:Csf.NetVdn.Messages.Message.Dispose">
Destructor. 
</member>
        <member name="M:Csf.NetVdn.Messages.Message.#ctor">
Constructor. 
</member>
        <member name="T:Csf.NetVdn.Messages.Message">
Base class for all NetVdn Messages. 
</member>
        <member name="D:Csf.Vdn.TextArray">
@brief Array of Vdn::Text types
</member>
        <member name="D:Csf.Vdn.BoolArray">
@brief Array of Vdn::Bool types
</member>
        <member name="D:Csf.Vdn.Int64Array">
@brief Array of Vdn::Int64 types
</member>
        <member name="D:Csf.Vdn.Float64Array">
@brief Array of Vdn::Float64 types
</member>
        <member name="D:Csf.Vdn.Matrix">
@brief Matrix of Vdn::Float64 types
</member>
        <member name="F:Csf.Vdn.Block.m_size">
Size of the buffer of data. 
</member>
        <member name="F:Csf.Vdn.Block.m_overrideVal">
The override value. 
</member>
        <member name="F:Csf.Vdn.Block.m_src">
Address of the source (used when m_coupled). 
</member>
        <member name="F:Csf.Vdn.Block.m_val">
Pointer to the buffer of data holding the value. 
</member>
        <member name="M:Csf.Vdn.Block.setCoupled(Csf.Vdn.BaseDataType*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Method to set the m_src pointer and the m_coupled attribute.
          * This is performed by VdnCore upon subscription within a content coupled SeGroup (aka a glob).
          * @ param v The source data item.

</member>
        <member name="M:Csf.Vdn.Block.deserialize(Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Decodes it from the buffer to the value.
          * @param buffer The XDR buffer to use for decoding.

</member>
        <member name="M:Csf.Vdn.Block.serialize(Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a value to an XDR buffer
          * @param buffer The XDR buffer to use for encoding.

</member>
        <member name="M:Csf.Vdn.Block.copyLock(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy the override value from another block.
          * @param copy A reference to the block to copy.

</member>
        <member name="M:Csf.Vdn.Block.overrideOn(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Turn on override and copy the value into the block.
          * @param value The value to copy.

</member>
        <member name="M:Csf.Vdn.Block.size">
Get the size of the block in bytes. 
          * @return The size of the block in bytes.

</member>
        <member name="M:Csf.Vdn.Block.getVal(System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsConst)">
Accessor to the pointer and size. 
          * @param dest The destination buffer to write the block value to.
          * @param size The size of the destination buffer.

</member>
        <member name="M:Csf.Vdn.Block.setVal(System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst)">
Accessor to the pointer and size. 
          * @param src The buffer of data to copy into the block.
          * @param size The size of the buffer of data to copy.

</member>
        <member name="M:Csf.Vdn.Block.toString">
Not valid for block data types. 
</member>
        <member name="M:Csf.Vdn.Block.compareThis(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
compareThis is used for the subscribeChanged functionality
          *  in VdnClientIfc as well as for RecordReplay comparisons to send only differences.
          * @return True if the two are equal, false otherwise.
          * @param rhs The value to compare against.

</member>
        <member name="M:Csf.Vdn.Block.copyThis(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
copyThis is used by the VdnCore when copying between datastores
          *       and when copying for read and commit to/from data stores
          *       The block is memcpy'd to the datastores for thread safety.
          * @return A reference to this instance of the class.
          * @param copy The value to copy.

</member>
        <member name="M:Csf.Vdn.Block.Dispose">
Destructor. 
</member>
        <member name="M:Csf.Vdn.Block.#ctor(Csf.Vdn.Block!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy Constructor.
          * @param v The value to copy.

</member>
        <member name="M:Csf.Vdn.Block.#ctor(System.UInt32!System.Runtime.CompilerServices.IsConst)">
Constructor.
          * @param size The size of the block of memory in bytes.

</member>
        <member name="M:Csf.Vdn.Block.op_Assign(Csf.Vdn.Block!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment operator. 
          * @param v The block to copy.

</member>
        <member name="M:Csf.Vdn.Block.#ctor">
Constructor. This version is used by the friends. 
</member>
        <member name="T:Csf.Vdn.Block">
VDN Block. This class represents a block of opaque data on the VDN. 
</member>
        <member name="M:Csf.Vdn.SerialPortReceiver.clear">

@brief Flush the serial buffer  

</member>
        <member name="M:Csf.Vdn.SerialPortReceiver.getLength">

@brief How much new data is in the Port? 
@return UInt16 The character length of new data in the port

</member>
        <member name="M:Csf.Vdn.SerialPortReceiver.isEmpty">

@brief Is the port empty?  
@return Bool True if there is no new data in the port

</member>
        <member name="M:Csf.Vdn.SerialPortReceiver.pop(System.Byte,System.UInt16,Csf.Osal.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Searches for a specific start character, then checks to see if there
       is a specified number of new characters to receive, and returns a 
       string of data of the specified length. 
@param start_char character to search for in new data string
@param length Length constraint of the new data to be read
@param val Output string
@return Bool False if start_char is not found, length is not satisfied,
             there is no data to be received, or the operation fails. 

</member>
        <member name="M:Csf.Vdn.SerialPortReceiver.pop(System.Byte,Csf.Osal.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Searches for a specific start character, then gets all unread
       data in the port after that start character
@param start_char Character to search for
@param val Received data as a string
@return Bool False if no data to be received, start_char not found,
             or operation failed. 

</member>
        <member name="M:Csf.Vdn.SerialPortReceiver.pop(Csf.Osal.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Gets all unread data from the SerialPort as a string.
@param val String where the received data is stored. 
@return Bool False if operation failed, or there is no data to receive. 

</member>
        <member name="M:Csf.Vdn.SerialPortReceiver.setName(Csf.Osal.String)">

@brief Sets the name of the channel
@param name character string to be the VDN mapped for this channel object

</member>
        <member name="M:Csf.Vdn.SerialPortReceiver.setName(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">

@brief Sets the name of the channel
@param name character string to be the VDN mapped for this channel object

</member>
        <member name="M:Csf.Vdn.SerialPortReceiver.overrideOn(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Not sure how this will be used yet...

</member>
        <member name="M:Csf.Vdn.SerialPortReceiver.size">

@brief Returns the size of the current channel object 

</member>
        <member name="M:Csf.Vdn.SerialPortReceiver.toString">

@brief Prints the contents of the serial buffer 

</member>
        <member name="M:Csf.Vdn.SerialPortReceiver.#ctor(Csf.Vdn.SerialPortReceiver!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Copy constructor  
@param rhs object to copy 

</member>
        <member name="M:Csf.Vdn.SerialPortReceiver.#ctor">

@brief Constructor  

</member>
        <member name="T:Csf.Vdn.SerialPortReceiver">
@brief This class represents Serial Receiver Port
</member>
        <member name="M:Csf.Vdn.SerialPortTransmitter.stop">

@brief Stop the link. Also stops all associated labels. 

</member>
        <member name="M:Csf.Vdn.SerialPortTransmitter.start">

@brief Starts the link ( unfails ). Also starts all associated labels. 

</member>
        <member name="M:Csf.Vdn.SerialPortTransmitter.push(Csf.Osal.String)">

@brief Put a string of data into the transmitter port
@param data New data to be transmitted

</member>
        <member name="M:Csf.Vdn.SerialPortTransmitter.setName(Csf.Osal.String)">

@brief Sets the name of the channel
@param name character string to be the VDN mapped for this channel object

</member>
        <member name="M:Csf.Vdn.SerialPortTransmitter.setName(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">

@brief Sets the name of the channel
@param name character string to be the VDN mapped for this channel object

</member>
        <member name="M:Csf.Vdn.SerialPortTransmitter.overrideOn(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Not sure how this will be used yet...

</member>
        <member name="M:Csf.Vdn.SerialPortTransmitter.size">

@brief Returns the size of the current object 

</member>
        <member name="M:Csf.Vdn.SerialPortTransmitter.toString">

@brief Prints the Port's data 

</member>
        <member name="M:Csf.Vdn.SerialPortTransmitter.#ctor(Csf.Vdn.SerialPortTransmitter!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Copy constructor  
@param rhs Ojbect to copy

</member>
        <member name="M:Csf.Vdn.SerialPortTransmitter.#ctor">

@brief Default constructor  

</member>
        <member name="T:Csf.Vdn.SerialPortTransmitter">
@brief Class that represents a serial port transmitter
</member>
        <member name="M:Csf.Vdn.op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Vdn.SerialPort!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded stream insertion operator. Prints out all info about this class.
      * @return Output stream.
      * @param out Output stream to insert into.
      * @param rhs Object to insert into the stream.

</member>
        <member name="F:Csf.Vdn.SerialPort.m_failed">
Specifies that the channel is failed. 
</member>
        <member name="F:Csf.Vdn.SerialPort.m_rxPtr">
Buffer index of the next char string to be read by a receiver. 
</member>
        <member name="F:Csf.Vdn.SerialPort.m_txPtr">
String Buffer index of the next data element to be written to by a transmitter. 
</member>
        <member name="F:Csf.Vdn.SerialPort.m_data">
Serial string is stored here. 
</member>
        <member name="M:Csf.Vdn.SerialPort.length">
Get the length of the curent serial string.
          * @returns The length of the current serial string.
          * @throws std::range_error Thrown if the return value is less than 0.

</member>
        <member name="M:Csf.Vdn.SerialPort.getString(System.Int32,Csf.Osal.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Get a string of the data off the buffer with the specified length.
          * @returns
          * - true: On success.
          * - false: if length is not big enough.
          * @param length Length of string characters to receive
          * @param val reference to the variable to save the received string to

</member>
        <member name="M:Csf.Vdn.SerialPort.topChar">
View the next character on the serial string buffer. 
</member>
        <member name="M:Csf.Vdn.SerialPort.popChar">
Pop a character off the serial string buffer. 
</member>
        <member name="M:Csf.Vdn.SerialPort.deserialize(Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Decodes it from the buffer to the value.
         * @param buffer The XDR buffer to use for decoding.

</member>
        <member name="M:Csf.Vdn.SerialPort.serialize(Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a value to an XDR buffer.
         * @param buffer The XDR buffer to use for encoding.

</member>
        <member name="M:Csf.Vdn.SerialPort.op_Equality(Csf.Vdn.SerialPort!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Comparison operator.
          * @returns True if rhs is equal to this serial port.
          * @param rhs The value to compare against.

</member>
        <member name="M:Csf.Vdn.SerialPort.pushChar(System.Byte)">
Push a character onto the serial string buffer.
          * @param val A character to pushed to the serial port.

</member>
        <member name="M:Csf.Vdn.SerialPort.testStop">
Stop the link. Also stops all associated labels. 
</member>
        <member name="M:Csf.Vdn.SerialPort.testStart">
Starts the link ( unfails ). Also starts all associated labels. 
</member>
        <member name="M:Csf.Vdn.SerialPort.testPush(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt16!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Pushes on bytes of data.  If you are going to have the null termination character "\0" you need to use this.
         * @param data An array of bytes. 
         * @param size The size of the array
         * @return Returns true if the push was successful.  False if there was a problem (check that data's size is less than or equal to size)

</member>
        <member name="M:Csf.Vdn.SerialPort.testPush(Csf.Osal.String)">
Put a string of data into the transmitter port.
          * @param str New data to be transmitted.

</member>
        <member name="M:Csf.Vdn.SerialPort.testClear">
Flush the serial buffer. 
</member>
        <member name="M:Csf.Vdn.SerialPort.testGetLength">
How much new data is in the Port? 
          * @return UInt16 The character length of new data in the port.

</member>
        <member name="M:Csf.Vdn.SerialPort.testIsEmpty">
Is the port empty?  
          * @return Bool True if there is no new data in the port.

</member>
        <member name="M:Csf.Vdn.SerialPort.testPop(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt16!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Pops off size amount of bytes into the passed in data pointer.  If the size is greater
         * than what is in the serial buffer to pop off it will pop everything off.
         * @param data Pointer to your array of chars
         * @param size The number of items you want to copy into data.
         * @return Returns true if the pop was successful.  False if there was a problem during the pop (check size)

</member>
        <member name="M:Csf.Vdn.SerialPort.testPop(System.Byte,System.UInt16,Csf.Osal.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Searches for a specific start character, then checks to see if there
         * is a specified number of new characters to receive, and returns a 
         * string of data of the specified length. 
         * @param start_char character to search for in new data string
         * @param length Length constraint of the new data to be read
         * @param val The value being returned.
         * @return Bool False if start_char is not found, length is not satisfied,
         *              there is no data to be received, or the operation fails. 

</member>
        <member name="M:Csf.Vdn.SerialPort.testPop(System.Byte,Csf.Osal.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Searches for a specific start character, then gets all unread
         * data in the port after that start character
         * @param start_char Character to search for
         * @param val Received data as a string
         * @return Bool False if no data to be received, start_char not found,
         *              or operation failed. 

</member>
        <member name="M:Csf.Vdn.SerialPort.testPop(Csf.Osal.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Gets all unread data from the SerialPort as a string.
          * @return Bool False if operation failed, or there is no data to receive. 
          * @param val String where the received data is stored. 

</member>
        <member name="M:Csf.Vdn.SerialPort.setCoupled(Csf.Vdn.BaseDataType*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Not implemented.
          * setCoupled is not available for avionics data types.
          * @ param v The source data item.

</member>
        <member name="M:Csf.Vdn.SerialPort.isValid">
Returns true if the channel has not been failed (by the transmitter).
          * @returns true if the channel has not been failed (by the transmitter).

</member>
        <member name="M:Csf.Vdn.SerialPort.overrideOn(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Disabled for this data type. 
          * @param value The value to override the datatype with.

</member>
        <member name="M:Csf.Vdn.SerialPort.size">
Returns the size of the current SerialPort object.
          * @returns The size of the current SerialPort object.

</member>
        <member name="M:Csf.Vdn.SerialPort.toString">
Converts the SerialPort's data queue to a string.
          * @returns The serial port's data queue as a string.

</member>
        <member name="M:Csf.Vdn.SerialPort.op_Assign(Csf.Vdn.SerialPort!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment operator.
          * @returns A reference to this object.
          * @param rhs Reference to the object to be copied.

</member>
        <member name="M:Csf.Vdn.SerialPort.compareThis(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Compare data from one VDN serial port to another. This is used by the VDN
          * to compare the appropriate member data from one datastore to another.
          * @returns True if the VDN considers the member data equal, false otherwise.
          * @param rhs The value to compare.

</member>
        <member name="M:Csf.Vdn.SerialPort.copyThis(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy data from one VDN serial port to another. This is used by the VDN
          * to copy the appropriate member data from one datastore to another.
          * @returns A reference to this object.
          * @param copy The value to copy.

</member>
        <member name="M:Csf.Vdn.SerialPort.#ctor(Csf.Vdn.SerialPort!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor.
          * @param rhs Reference to the object to be copied.

</member>
        <member name="M:Csf.Vdn.SerialPort.#ctor">
Constructor. 
</member>
        <member name="F:Csf.Vdn.SerialPort.s_serialBufferLength">
The max length of the serial buffer string. 
</member>
        <member name="T:Csf.Vdn.SerialPort">
Class that represents an Serial Channel, contains 
       * all data elements for both Recievers and Transmitters. 
</member>
        <member name="F:Csf.Vdn.AvioA708Transmitter.v_Stopped">

@brief publish status of the channel/bus

</member>
        <member name="M:Csf.Vdn.AvioA708Transmitter.stop">

@brief Stop the bus.  ( fails )

</member>
        <member name="M:Csf.Vdn.AvioA708Transmitter.start">

@brief Starts the bus ( unfails ).  

</member>
        <member name="M:Csf.Vdn.AvioA708Transmitter.push(Csf.Utils.A708FrameUtility*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Pushes a 200 byte data packet onto the channel queue 
@param frame data to be pushed onto the channel 

</member>
        <member name="M:Csf.Vdn.AvioA708Transmitter.op_Assign(Csf.Vdn.AvioA708Transmitter!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Assignement operator 

</member>
        <member name="M:Csf.Vdn.AvioA708Transmitter.#ctor(Csf.Vdn.AvioA708Transmitter!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

@brief Copy constructor

</member>
        <member name="T:Csf.Vdn.AvioA708Transmitter">
@brief A Channel object with additional transmitter functions
 
</member>
        <member name="M:Csf.Vdn.AvioA708Receiver.isDirty">
Returns true if any unread data is in the channel 
          * @returns 
          * - true: Unread data is in the channel.
          * - false: No unread data in the channel.

</member>
        <member name="M:Csf.Vdn.AvioA708Receiver.isValid">
Returns true if the channel has not been failed (by the transmitter).
          * @returns 
          * - true: The channel has not been failed (by the transmitter).
          * - false: The channel has been failed (by the transmitter).

</member>
        <member name="M:Csf.Vdn.AvioA708Receiver.pop(Csf.Utils.A708FrameUtility*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Pops the next available A708 frame from the channel queue.
          * @returns
          * - true: Data was available. 
          * - false: No data was available.
          * @param frame Address of the frame to place the popped data into 

</member>
        <member name="M:Csf.Vdn.AvioA708Receiver.op_Assign(Csf.Vdn.AvioA708Receiver!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment operator.
          * @param rhs The value to assign.

</member>
        <member name="M:Csf.Vdn.AvioA708Receiver.#ctor(Csf.Vdn.AvioA708Receiver!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor.
          * @rhs The value to copy.

</member>
        <member name="M:Csf.Vdn.AvioA708Receiver.#ctor">
Constructor. 
</member>
        <member name="T:Csf.Vdn.AvioA708Receiver">
A Channel object with additional receiver functions. 
</member>
        <member name="M:Csf.Vdn.op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Vdn.AvioA708Channel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded stream insertion operator. Prints out all info about this class.
      * @return Output stream.
      * @param out Output stream to insert into.
      * @param rhs Object to insert into the stream.

</member>
        <member name="F:Csf.Vdn.AvioA708Channel.m_failed">
Specifies that the channel is failed. 
</member>
        <member name="F:Csf.Vdn.AvioA708Channel.m_rxPtr">
Buffer index of the next data element to be read by a receiver. 
</member>
        <member name="F:Csf.Vdn.AvioA708Channel.m_txPtr">
Buffer index of the next data element to be written to by a transmitter. 
</member>
        <member name="F:Csf.Vdn.AvioA708Channel.m_data">
Circular buffer of A708 data words. Represents the channel's queue. 
</member>
        <member name="M:Csf.Vdn.AvioA708Channel.deserialize(Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Decodes it from the buffer to the value.
         * @param buffer The XDR buffer to use for decoding.

</member>
        <member name="M:Csf.Vdn.AvioA708Channel.serialize(Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a value to an XDR buffer
         * @param buffer The XDR buffer to use for encoding.

</member>
        <member name="M:Csf.Vdn.AvioA708Channel.op_Equality(Csf.Vdn.AvioA708Channel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Comparison operator.
          * @returns True if the rhs equals this.
          * @param rhs The value to compare against.

</member>
        <member name="M:Csf.Vdn.AvioA708Channel.testStop">
Stops the bus (fails). 
</member>
        <member name="M:Csf.Vdn.AvioA708Channel.testStart">
Starts the bus (unfails). 
</member>
        <member name="M:Csf.Vdn.AvioA708Channel.testPush(Csf.Utils.A708FrameUtility*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Pushes a 200 byte data packet onto the channel queue.
          * @param frame data to be pushed onto the channel.

</member>
        <member name="M:Csf.Vdn.AvioA708Channel.testIsDirty">
Returns true if any unread data is in the channel 
          * @returns 
          * - true: Unread data is in the channel.
          * - false: No unread data in the channel.

</member>
        <member name="M:Csf.Vdn.AvioA708Channel.testIsValid">
Returns true if the channel has not been failed (by the transmitter).
          * @returns 
          * - true: The channel has not been failed (by the transmitter).
          * - false: The channel has been failed (by the transmitter).

</member>
        <member name="M:Csf.Vdn.AvioA708Channel.testPop(Csf.Utils.A708FrameUtility*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Pops the next available A708 frame from the channel queue.
          * @returns
          * - true: Data was available. 
          * - false: No data was available.
          * @param frame Address of the frame to place the poped data into 

</member>
        <member name="M:Csf.Vdn.AvioA708Channel.setCoupled(Csf.Vdn.BaseDataType*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Not implemented for 708 channels.
          * @ param v The source data item.

</member>
        <member name="M:Csf.Vdn.AvioA708Channel.overrideOn(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
This method is not valid for 708 channels.
          * @param value The value to override the datatype with.

</member>
        <member name="M:Csf.Vdn.AvioA708Channel.size">
Returns the size of the class. 
          * @returns The size of the class.

</member>
        <member name="M:Csf.Vdn.AvioA708Channel.toString">
Returns the channel's A708 data queue as a string.
          * @returns The channel's A708 data queue as a string.

</member>
        <member name="M:Csf.Vdn.AvioA708Channel.op_Assign(Csf.Vdn.AvioA708Channel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment operator.
          * @param rhs The value to assign.

</member>
        <member name="M:Csf.Vdn.AvioA708Channel.compareThis(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Compare data from one 708 channel to another. This is used by the VDN
          * to compare the appropriate member data from one datastore to another.
          * @returns True if the VDN considers the member data equal, false otherwise
          * @param rhs The value to compare.

</member>
        <member name="M:Csf.Vdn.AvioA708Channel.copyThis(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy data from one 708 channel to another. This is used by the VDN
          * to copy the appropriate member data from one datastore to another.
          * @param copy The value to copy.

</member>
        <member name="M:Csf.Vdn.AvioA708Channel.#ctor(Csf.Vdn.AvioA708Channel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor.
          * @rhs The value to copy.

</member>
        <member name="F:Csf.Vdn.AvioA708Channel.s_a708FrameByteSize">
The number of bytes in an A708 Frame. 
</member>
        <member name="F:Csf.Vdn.AvioA708Channel.s_a708ChannelQueueSize">
The max number of A708 words that a channel can store. 
</member>
        <member name="T:Csf.Vdn.AvioA708Channel">
Class that represents an A708 Channel, contains 
       *  all data elements for both Recievers and Transmitters 
</member>
        <member name="F:Csf.Vdn.AvioA429Transmitter.v_Stopped">
Published VDN variable for the status of the bus. 
</member>
        <member name="M:Csf.Vdn.AvioA429Transmitter.stop">
Stop the bus. Also stops all associated labels. 
</member>
        <member name="M:Csf.Vdn.AvioA429Transmitter.start">
Starts the bus (unfails). Also starts all associated labels. 
</member>
        <member name="M:Csf.Vdn.AvioA429Transmitter.push(System.Int32)">
Pushes an Int32 A429 data word onto the channel queue.
          * @param label data to be pushed onto the channel 

</member>
        <member name="M:Csf.Vdn.AvioA429Transmitter.push(System.UInt32)">
Pushes an Int32 A429 data word onto the channel queue.
          * @param label data to be pushed onto the channel 

</member>
        <member name="M:Csf.Vdn.AvioA429Transmitter.op_Assign(Csf.Vdn.AvioA429Transmitter!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment operator. 
          * @return A reference to this instance of the class.
          * @param rhs The value to assign to this instance of the class.

</member>
        <member name="M:Csf.Vdn.AvioA429Transmitter.#ctor(Csf.Vdn.AvioA429Transmitter!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor. 
          * @param rhs The value to copy.

</member>
        <member name="M:Csf.Vdn.AvioA429Transmitter.#ctor">
Constructor. 
</member>
        <member name="T:Csf.Vdn.AvioA429Transmitter">
A Channel object with additional transmitter functions. 
</member>
        <member name="F:Csf.Vdn.AvioA429Receiver.v_Stopped">
Published VDN variable for the status of the bus. 
</member>
        <member name="M:Csf.Vdn.AvioA429Receiver.stop">
Stop the bus. Also stops all associated labels. 
</member>
        <member name="M:Csf.Vdn.AvioA429Receiver.start">
Starts the bus (unfails). Also starts all associated labels. 
</member>
        <member name="M:Csf.Vdn.AvioA429Receiver.isValid">
Returns true if the channel has not been failed(by the transmitter).
          * @return True if the channel has not been failed.

</member>
        <member name="M:Csf.Vdn.AvioA429Receiver.pop(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Pops the next available A429 data word from the channel queue.
          * @return True if data was available, false otherwise.
          * @param label Address of the Int32 to place the poped data into.

</member>
        <member name="M:Csf.Vdn.AvioA429Receiver.pop(System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Pops the next available A429 data word from the channel queue.
          * @return True if data was available, false otherwise. 
          * @param label Address of the Int32 to place the poped data into.

</member>
        <member name="M:Csf.Vdn.AvioA429Receiver.op_Assign(Csf.Vdn.AvioA429Receiver!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment operator. 
          * @return A reference to this instance of the class.
          * @param rhs The value to assign to this instance of the class.

</member>
        <member name="M:Csf.Vdn.AvioA429Receiver.#ctor(Csf.Vdn.AvioA429Receiver!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor. 
          * @param rhs The value to copy.

</member>
        <member name="M:Csf.Vdn.AvioA429Receiver.#ctor">
Constructor. 
</member>
        <member name="T:Csf.Vdn.AvioA429Receiver">
A Channel object with additional receiver functions. 
</member>
        <member name="M:Csf.Vdn.op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Vdn.AvioA429Channel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded stream insertion operator. Prints out all info about this class.
      * @return Output stream.
      * @param out Output stream to insert into.
      * @param rhs Object to insert into the stream.

</member>
        <member name="F:Csf.Vdn.AvioA429Channel.m_registeredLabelsStr">
Array of names of registered "sampled" labels. 
</member>
        <member name="F:Csf.Vdn.AvioA429Channel.m_registeredLabels">
Array of pointers to registered "sampled" labels. 
</member>
        <member name="F:Csf.Vdn.AvioA429Channel.m_numRegisteredLabels">
The number of "sampled" labels currently registered to this channel. 
</member>
        <member name="F:Csf.Vdn.AvioA429Channel.m_failed">
Specifies that the channel is failed. 
</member>
        <member name="F:Csf.Vdn.AvioA429Channel.m_rxPtr">
Buffer index of the next data element to be read by a receiver. 
</member>
        <member name="F:Csf.Vdn.AvioA429Channel.m_txPtr">
Buffer index of the next data element to be written to by a transmitter. 
</member>
        <member name="F:Csf.Vdn.AvioA429Channel.m_data">
Circular buffer of A429 data words. Represents the channel's queue. 
</member>
        <member name="M:Csf.Vdn.AvioA429Channel.deserialize(Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Decodes it from the buffer to the value.
          * @param buffer The XDR buffer to use for decoding.

</member>
        <member name="M:Csf.Vdn.AvioA429Channel.serialize(Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a value to an XDR buffer
          * @param buffer The XDR buffer to use for encoding.

</member>
        <member name="M:Csf.Vdn.AvioA429Channel.testStop">
Stop the bus. Also stops all associated labels. 
</member>
        <member name="M:Csf.Vdn.AvioA429Channel.testStart">
Starts the bus (unfails). Also starts all associated labels. 
</member>
        <member name="M:Csf.Vdn.AvioA429Channel.isDirty">
Returns true if any unread data is in the channel.
         * @return True if there is any unread data in the channel.

</member>
        <member name="M:Csf.Vdn.AvioA429Channel.testIsDirty">
Returns true if any unread data is in the channel.
          * @return True if there is any unread data in the channel.

</member>
        <member name="M:Csf.Vdn.AvioA429Channel.testIsValid">
Returns true if the channel has not been failed(by the transmitter).
          * @return True if the channel has not been failed.

</member>
        <member name="M:Csf.Vdn.AvioA429Channel.testPop(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Pops the next available A429 data word from the channel queue.
          * @return True if data was available, false otherwise.
          * @param label Address of the Int32 to place the popped data into.

</member>
        <member name="M:Csf.Vdn.AvioA429Channel.testPop(System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Pops the next available A429 data word from the channel queue.
          * @return True if data was available, false otherwise. 
          * @param label Address of the Int32 to place the popped data into.

</member>
        <member name="M:Csf.Vdn.AvioA429Channel.testPush(System.Int32)">
Pushes an Int32 A429 data word onto the channel queue 
          * @param label data to be pushed onto the channel 

</member>
        <member name="M:Csf.Vdn.AvioA429Channel.testPush(System.UInt32)">
Pushes an Int32 A429 data word onto the channel queue 
          * @param label data to be pushed onto the channel 

</member>
        <member name="M:Csf.Vdn.AvioA429Channel.setCoupled(Csf.Vdn.BaseDataType*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Not implemented. setCoupled is not available for avionics data types.
          * @param value The source data item.

</member>
        <member name="M:Csf.Vdn.AvioA429Channel.overrideOn(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Not implemented.
          * @param value The value to override.

</member>
        <member name="M:Csf.Vdn.AvioA429Channel.size">
Returns the size of the current channel object. 
         * @return Size of A429Channel object

</member>
        <member name="M:Csf.Vdn.AvioA429Channel.toString">
Converts the labels in the queue to a string value. 
          * @return The labels in the queue as a string.

</member>
        <member name="M:Csf.Vdn.AvioA429Channel.registerLabel(Csf.Vdn.AvioA429DataType*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Associates a sampled A429Label with this channel.  By registering
          * a label with the channel, the channel will automatically publish the
          * associated labels when the channel is published.
          * @return True if the label was registered, false on error.
          * @param name Name of the sampled A429Label 
          * @param label Address of the sampled A429Label

</member>
        <member name="M:Csf.Vdn.AvioA429Channel.registerLabel(Csf.Vdn.AvioA429DataType*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Associates a sampled A429Label with this channel. By registering
          * a label with the channel, the channel will automatically publish the
          * associated labels when the channel is published.
          * @return True if the label was registered, false on error.
          * @param label Refernce to the instance of the label to register.
          * @param name Name of the sampled A429Label. 

</member>
        <member name="M:Csf.Vdn.AvioA429Channel.op_Equality(Csf.Vdn.AvioA429Channel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Equality operator 
          * @return True if this instance is equal to the one passed in.
          * @param rhs The value to compare against.

</member>
        <member name="M:Csf.Vdn.AvioA429Channel.op_Assign(Csf.Vdn.AvioA429Channel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment operator. 
          * @return A reference to this instance of the class.
          * @param rhs The value to assign to this instance of the class.

</member>
        <member name="M:Csf.Vdn.AvioA429Channel.compareThis(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Compare this instance to another.
          * @return True if the parameter value is equal to this instance.
          * @param rhs The value to compare.

</member>
        <member name="M:Csf.Vdn.AvioA429Channel.copyThis(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy the value from another instance of this class.
          * @return a reference to this instance.
          * @param copy The value to copy.

</member>
        <member name="M:Csf.Vdn.AvioA429Channel.#ctor(Csf.Vdn.AvioA429Channel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor. 
          * @param rhs The value to copy.

</member>
        <member name="M:Csf.Vdn.AvioA429Channel.#ctor">
Constructor. 
</member>
        <member name="F:Csf.Vdn.AvioA429Channel.sc_maxNumRegisteredLabels">
The max number of labels that can be registered to a channel.
         * This number is calculated by multiplying the maximum number of label values (256 using 8 bits)
         * from the ARINC 429 standard by the number of SDI values (4 using two bits). 
</member>
        <member name="F:Csf.Vdn.AvioA429Channel.sc_a429ChannelQueueSize">
The max number of A429 words that a channel can store. 
</member>
        <member name="T:Csf.Vdn.AvioA429Channel">
Class that represents an A429 Channel, contains 
       *  all data elements for both Recievers and Transmitters. 
</member>
        <member name="M:Csf.Vdn.Bool.setCoupled(Csf.Vdn.BaseDataType*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Method to set the m_src pointer and the m_coupled attribute.
          * This is performed by VdnCore upon subscription within a content coupled SeGroup (aka a glob).
          * @param v The source data item.

</member>
        <member name="F:Csf.Vdn.Bool.m_overrideVal">
The override value. 
</member>
        <member name="F:Csf.Vdn.Bool.m_src">
The address of the source (used when m_coupled). 
</member>
        <member name="F:Csf.Vdn.Bool.m_val">
The value. 
</member>
        <member name="M:Csf.Vdn.Bool.deserialize(Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Decodes it from the buffer to the value.
          * @param buffer The XDR buffer to use for decoding.

</member>
        <member name="M:Csf.Vdn.Bool.serialize(Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a value to an XDR buffer
          * @param buffer The XDR buffer to use for encoding.

</member>
        <member name="M:Csf.Vdn.Bool.copyLock(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy the lock flags from another datatype.
          * @param copy The value to copy from.

</member>
        <member name="M:Csf.Vdn.Bool.overrideOn(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Override the value of the datatype with the value passed in.
          * @param value The value to override the datatype with.

</member>
        <member name="M:Csf.Vdn.Bool.getVal">
Get the value of the datatype as an Osal::Bool.
          * @returns The value of the datatype as an Osal::Bool.

</member>
        <member name="M:Csf.Vdn.Bool.size">
Returns the size of the Osal equivelant storage type. 
          * @returns The size of the Osal equivelant storage type. 

</member>
        <member name="M:Csf.Vdn.Bool.toString">
Convert the member data to a string.
          * @returns The datatype as a string.

</member>
        <member name="M:Csf.Vdn.Bool.op_Implicit~System.Boolean">
Overloaded cast operator to cast the VDN datatype to an Osal::Bool.
          * @returns The Osal::Bool value of the Vdn::Bool.

</member>
        <member name="M:Csf.Vdn.Bool.compareThis(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Compare data from one VDN boolean to another. This is used by the VDN
          * to compare the appropriate member data from one datastore to another.
          * @returns True if the VDN considers the member data equal, false otherwise.
          * @param rhs The value to compare.

</member>
        <member name="M:Csf.Vdn.Bool.copyThis(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy data from one VDN boolean to another. This is used by the VDN
          * to copy the appropriate member data from one datastore to another.
          * @returns A reference to this object.
          * @param copy The value to copy.

</member>
        <member name="M:Csf.Vdn.Bool.op_Assign(Csf.Vdn.Bool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment operator.
          * @param v The value to assign to the bool.

</member>
        <member name="M:Csf.Vdn.Bool.op_Assign(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment operator.
          * @param v The value to assign to the bool.

</member>
        <member name="M:Csf.Vdn.Bool.#ctor(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Constructor.
          * @param v The boolean value to initialize the VDN bool with.

</member>
        <member name="M:Csf.Vdn.Bool.#ctor(Csf.Vdn.Bool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy Constructor.
          * @param v The value to copy.

</member>
        <member name="M:Csf.Vdn.Bool.Dispose">
Destructor. 
</member>
        <member name="M:Csf.Vdn.Bool.#ctor">
Constructor. 
</member>
        <member name="T:Csf.Vdn.Bool">
This class represents a boolean value stored on the VDN. 
</member>
        <member name="M:Csf.Vdn.Int64.setCoupled(Csf.Vdn.BaseDataType*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Method to set the m_src pointer and the m_coupled attribute.
          * This is performed by VdnCore upon subscription within a content coupled SeGroup (aka a glob).
          * @param v The source data item.

</member>
        <member name="F:Csf.Vdn.Int64.m_overrideVal">
The override value. 
</member>
        <member name="F:Csf.Vdn.Int64.m_src">
The address of the source (used when m_coupled). 
</member>
        <member name="F:Csf.Vdn.Int64.m_val">
The value. 
</member>
        <member name="M:Csf.Vdn.Int64.deserialize(Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Decodes it from the buffer to the value.
         * @param buffer The XDR buffer to use for decoding.

</member>
        <member name="M:Csf.Vdn.Int64.serialize(Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a value to an XDR buffer
         * @param buffer The XDR buffer to use for encoding.

</member>
        <member name="M:Csf.Vdn.Int64.copyLock(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy the lock flags from another datatype.
          * @param copy The value to copy from.

</member>
        <member name="M:Csf.Vdn.Int64.overrideOn(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Override the value of the datatype with the value passed in.
          * @param value The value to override the datatype with.

</member>
        <member name="M:Csf.Vdn.Int64.getVal">
Get the value of the datatype as an Osal::Int64.
          * @returns The value of the datatype as an Osal::Int64.

</member>
        <member name="M:Csf.Vdn.Int64.size">
Returns the size of the Osal equivelant storage type. 
          * @returns The size of the Osal equivelant storage type. 

</member>
        <member name="M:Csf.Vdn.Int64.toString">
Convert the member data to a string.
          * @returns The datatype as a string.

</member>
        <member name="M:Csf.Vdn.Int64.op_Implicit~System.Int64">
Overloaded cast operator to cast the VDN datatype to an Osal::Int64.
          * @returns The Osal::Int64 value of the Vdn::Int64.

</member>
        <member name="M:Csf.Vdn.Int64.op_Decrement(System.Int32!System.Runtime.CompilerServices.IsConst)">
Overloaded post-decrement operator.
          * @returns A reference to this object.

</member>
        <member name="M:Csf.Vdn.Int64.op_Decrement">
Overloaded pre-decrement operator.
          * @returns A reference to this object.

</member>
        <member name="M:Csf.Vdn.Int64.op_Increment(System.Int32!System.Runtime.CompilerServices.IsConst)">
Overloaded post-increment operator.
          * @returns A reference to this object.

</member>
        <member name="M:Csf.Vdn.Int64.op_Increment">
Overloaded pre-increment operator.
          * @returns A reference to this object.

</member>
        <member name="M:Csf.Vdn.Int64.op_DivisionAssignment(Csf.Vdn.Int64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded division operator.
          * @returns A reference to this object.
          * @param v The value to divide.

</member>
        <member name="M:Csf.Vdn.Int64.op_MultiplicationAssignment(Csf.Vdn.Int64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded multiplication operator.
          * @returns A reference to this object.
          * @param v The value to multiply.

</member>
        <member name="M:Csf.Vdn.Int64.op_SubtractionAssignment(Csf.Vdn.Int64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded subtraction operator.
          * @returns A reference to this object.
          * @param v The value to subtract.

</member>
        <member name="M:Csf.Vdn.Int64.op_AdditionAssignment(Csf.Vdn.Int64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded addition operator.
          * @returns A reference to this object.
          * @param v The value to add.

</member>
        <member name="M:Csf.Vdn.Int64.op_Assign(Csf.Vdn.Int64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded assignment operator.
          * @returns A reference to this object.
          * @param v The value to assign.

</member>
        <member name="M:Csf.Vdn.Int64.op_DivisionAssignment(System.Int64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded division operator.
          * @returns A reference to this object.
          * @param v The value to divide.

</member>
        <member name="M:Csf.Vdn.Int64.op_MultiplicationAssignment(System.Int64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded multiplication operator.
          * @returns A reference to this object.
          * @param v The value to multiply.

</member>
        <member name="M:Csf.Vdn.Int64.op_SubtractionAssignment(System.Int64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded subtraction operator.
          * @returns A reference to this object.
          * @param v The value to subtract.

</member>
        <member name="M:Csf.Vdn.Int64.op_AdditionAssignment(System.Int64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded addition operator.
          * @returns A reference to this object.
          * @param v The value to add.

</member>
        <member name="M:Csf.Vdn.Int64.op_Assign(System.Int64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded assignment operator.
          * @returns A reference to this object.
          * @param v The value to assign.

</member>
        <member name="M:Csf.Vdn.Int64.compareThis(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Compare data from one VDN int64 to another. This is used by the VDN
          * to compare the appropriate member data from one datastore to another.
          * @returns True if the VDN considers the member data equal, false otherwise.
          * @param rhs The value to compare.

</member>
        <member name="M:Csf.Vdn.Int64.copyThis(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy data from one VDN int64 to another. This is used by the VDN
          * to copy the appropriate member data from one datastore to another.
          * @returns A reference to this object.
          * @param copy The value to copy.

</member>
        <member name="M:Csf.Vdn.Int64.#ctor(Csf.Vdn.Int64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Constructor.
         * @param v The value to initialize the datatype with.

</member>
        <member name="M:Csf.Vdn.Int64.#ctor(System.Int64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor. 
         * @param v The value to copy.

</member>
        <member name="M:Csf.Vdn.Int64.Dispose">
Destructor. 
</member>
        <member name="M:Csf.Vdn.Int64.#ctor">
Constructor. 
</member>
        <member name="T:Csf.Vdn.Int64">
This class represents a 64 bit integer value on the VDN. 
</member>
        <member name="M:Csf.Vdn.Float64.setCoupled(Csf.Vdn.BaseDataType*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Method to set the m_src pointer and the m_coupled attribute.
          * This is performed by VdnCore upon subscription within a content coupled SeGroup (aka a glob).
          * @param v The source data item.

</member>
        <member name="F:Csf.Vdn.Float64.m_overrideVal">
The override value. 
</member>
        <member name="F:Csf.Vdn.Float64.m_src">
The address of the source (used when m_coupled). 
</member>
        <member name="F:Csf.Vdn.Float64.m_val">
The value. 
</member>
        <member name="M:Csf.Vdn.Float64.deserialize(Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Decodes it from the buffer to the value.
          * @param buffer The XDR buffer to use for decoding.

</member>
        <member name="M:Csf.Vdn.Float64.serialize(Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a value to an XDR buffer
          * @param buffer The XDR buffer to use for encoding.

</member>
        <member name="M:Csf.Vdn.Float64.copyLock(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy the lock flags from another datatype.
          * @param copy The value to copy from.

</member>
        <member name="M:Csf.Vdn.Float64.overrideOn(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Override the value of the datatype with the value passed in.
          * @param value The value to override the datatype with.

</member>
        <member name="M:Csf.Vdn.Float64.getVal">
Get the value of the datatype as an Osal::Float64.
          * @returns The value of the datatype as an Osal::Float64.

</member>
        <member name="M:Csf.Vdn.Float64.size">
Returns the size of the Osal equivelant storage type. 
          * @returns The size of the Osal equivelant storage type. 

</member>
        <member name="M:Csf.Vdn.Float64.toString">
Convert the member data to a string.
          * @returns The datatype as a string.

</member>
        <member name="M:Csf.Vdn.Float64.op_Implicit~System.Double">
Overloaded cast operator to cast the VDN datatype to an Osal::Float64.
          * @returns The Osal::Float64 value of the Vdn::Float64.

</member>
        <member name="M:Csf.Vdn.Float64.op_DivisionAssignment(Csf.Vdn.Float64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded division operator.
          * @returns A reference to this object.
          * @param v The value to divide.

</member>
        <member name="M:Csf.Vdn.Float64.op_MultiplicationAssignment(Csf.Vdn.Float64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded multiplication operator.
          * @returns A reference to this object.
          * @param v The value to multiply.

</member>
        <member name="M:Csf.Vdn.Float64.op_SubtractionAssignment(Csf.Vdn.Float64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded subtraction operator.
          * @returns A reference to this object.
          * @param v The value to subtract.

</member>
        <member name="M:Csf.Vdn.Float64.op_AdditionAssignment(Csf.Vdn.Float64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded addition operator.
          * @returns A reference to this object.
          * @param v The value to add.

</member>
        <member name="M:Csf.Vdn.Float64.op_Assign(Csf.Vdn.Float64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded assignment operator.
          * @returns A reference to this object.
          * @param v The value to assign.

</member>
        <member name="M:Csf.Vdn.Float64.op_DivisionAssignment(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded division operator.
          * @returns A reference to this object.
          * @param v The value to divide.

</member>
        <member name="M:Csf.Vdn.Float64.op_MultiplicationAssignment(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded multiplication operator.
          * @returns A reference to this object.
          * @param v The value to multiply.

</member>
        <member name="M:Csf.Vdn.Float64.op_SubtractionAssignment(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded subtraction operator.
          * @returns A reference to this object.
          * @param v The value to subtract.

</member>
        <member name="M:Csf.Vdn.Float64.op_AdditionAssignment(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded addition operator.
          * @returns A reference to this object.
          * @param v The value to add.

</member>
        <member name="M:Csf.Vdn.Float64.op_Assign(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded assignment operator.
          * @returns A reference to this object.
          * @param v The value to assign.

</member>
        <member name="M:Csf.Vdn.Float64.compareThis(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Compare data from one VDN float64 to another. This is used by the VDN
          * to compare the appropriate member data from one datastore to another.
          * @returns True if the VDN considers the member data equal, false otherwise.
          * @param rhs The value to compare.

</member>
        <member name="M:Csf.Vdn.Float64.copyThis(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy data from one VDN float64 to another. This is used by the VDN
          * to copy the appropriate member data from one datastore to another.
          * @returns A reference to this object.
          * @param copy The value to copy.

</member>
        <member name="M:Csf.Vdn.Float64.#ctor(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Constructor.
          * @param v The value to initialize the datatype with.

</member>
        <member name="M:Csf.Vdn.Float64.#ctor(Csf.Vdn.Float64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor. 
          * @param v The value to copy.

</member>
        <member name="M:Csf.Vdn.Float64.Dispose">
Destructor. 
</member>
        <member name="M:Csf.Vdn.Float64.#ctor">
Constructor. 
</member>
        <member name="T:Csf.Vdn.Float64">
This class represents a 64 bit floating point value on the VDN. 
</member>
        <member name="M:Csf.Vdn.Text.setCoupled(Csf.Vdn.BaseDataType*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Method to set the m_src pointer and the m_coupled attribute.
          * This is performed by VdnCore upon subscription within a content coupled SeGroup (aka a glob).
          * @param v The source data item.

</member>
        <member name="F:Csf.Vdn.Text.m_overrideVal">
The override value. 
</member>
        <member name="F:Csf.Vdn.Text.m_src">
The address of the source (used when m_coupled). 
</member>
        <member name="F:Csf.Vdn.Text.m_val">
The value. 
</member>
        <member name="M:Csf.Vdn.Text.deserialize(Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Decodes it from the buffer to the value.
          * @param buffer The XDR buffer to use for decoding.

</member>
        <member name="M:Csf.Vdn.Text.serialize(Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a value to an XDR buffer
          * @param buffer The XDR buffer to use for encoding.

</member>
        <member name="M:Csf.Vdn.Text.copyLock(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy the lock flags from another datatype.
          * @param copy The value to copy from.

</member>
        <member name="M:Csf.Vdn.Text.overrideOn(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Override the value of the datatype with the value passed in.
          * @param value The value to override the datatype with.

</member>
        <member name="M:Csf.Vdn.Text.getVal">
Get the value of the datatype as an Osal::Stromg.
          * @returns The value of the datatype as an Osal::Stromg.

</member>
        <member name="M:Csf.Vdn.Text.size">
Returns the size of the Osal equivelant storage type. 
          * @returns The size of the Osal equivelant storage type. 

</member>
        <member name="M:Csf.Vdn.Text.toString">
Convert the member data to a string.
          * @returns The datatype as a string.

</member>
        <member name="M:Csf.Vdn.Text.op_Implicit~Csf.Osal.String">
Overloaded cast operator to cast the VDN datatype to an Osal::String.
          * @returns The Osal::String value of the Vdn::String.

</member>
        <member name="M:Csf.Vdn.Text.op_Inequality(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded inequality operator.
          * @returns
          * - true: The values are not equal.
          * - false: The values are equal.
          * @param v The value to compare against.

</member>
        <member name="M:Csf.Vdn.Text.op_Equality(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded equality operator.
          * @returns
          * - true: The values are equal.
          * - false: The values are not equal.
          * @param v The value to compare against.

</member>
        <member name="M:Csf.Vdn.Text.op_Assign(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded assignment operator.
          * @returns A reference to this object.
          * @param v The value to assign.

</member>
        <member name="M:Csf.Vdn.Text.op_Assign(Csf.Vdn.Text!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded assignment operator.
          * @returns A reference to this object.
          * @param v The value to assign.

</member>
        <member name="M:Csf.Vdn.Text.compareThis(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Compare data from one VDN float64 to another. This is used by the VDN
          * to compare the appropriate member data from one datastore to another.
          * @returns True if the VDN considers the member data equal, false otherwise.
          * @param rhs The value to compare.

</member>
        <member name="M:Csf.Vdn.Text.copyThis(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy data from one VDN float64 to another. This is used by the VDN
          * to copy the appropriate member data from one datastore to another.
          * @returns A reference to this object.
          * @param copy The value to copy.

</member>
        <member name="M:Csf.Vdn.Text.#ctor(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Constructor.
          * @param v The value to initialize the datatype with.

</member>
        <member name="M:Csf.Vdn.Text.#ctor(Csf.Vdn.Text!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor. 
          * @param v The value to copy.

</member>
        <member name="M:Csf.Vdn.Text.Dispose">
Destructor. 
</member>
        <member name="M:Csf.Vdn.Text.#ctor">
Constructor. 
</member>
        <member name="T:Csf.Vdn.Text">
This class represents a string value on the VDN. 
</member>
        <member name="F:Csf.Vdn.RequestInfo.m_request">
Request. 
</member>
        <member name="F:Csf.Vdn.RequestInfo.m_queueName">
Queue name. 
</member>
        <member name="F:Csf.Vdn.RequestInfo.m_topicName">
Topic name. 
</member>
        <member name="M:Csf.Vdn.RequestInfo.getRequest">
Get the request to deliver. 
         * @return The request.

</member>
        <member name="M:Csf.Vdn.RequestInfo.getQueueName">
Get the name of the queue where the request should be delivered. 
         * @return The queue name.

</member>
        <member name="M:Csf.Vdn.RequestInfo.getTopicName">
Get the topic of the queue where the request should be delivered. 
         * @return The name of the topic.

</member>
        <member name="M:Csf.Vdn.RequestInfo.#ctor(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Utils.Request!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Constructor
          * @param topicName The topic containing the destination queue. 
          * @param queueName The name of the queue that the request should be delivered to.
          * @param request The request to deliver.

</member>
        <member name="T:Csf.Vdn.RequestInfo">
This class provides information about a request so that it can 
       * be delivered to the appropriate queue on the vdn.

</member>
        <member name="F:Csf.Vdn.RequestQueueInfo.m_registeredRequests">
Set of registered requests for the queue. 
</member>
        <member name="F:Csf.Vdn.RequestQueueInfo.m_queueName">
Name of the published queue. 
</member>
        <member name="F:Csf.Vdn.RequestQueueInfo.m_topicName">
The topic name. 
</member>
        <member name="M:Csf.Vdn.RequestQueueInfo.toString">
Return the class as a string.
          * @return The class as a string of data.

</member>
        <member name="M:Csf.Vdn.RequestQueueInfo.setRegisteredRequests(std.set&lt;Csf.Osal.String,std.less&lt;Csf.Osal.String&gt;,std.allocator&lt;Csf.Osal.String&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Set the registered requests.
          * @param registeredRequests A set of registered requests.

</member>
        <member name="M:Csf.Vdn.RequestQueueInfo.getRegisteredRequests">
Get the registered requests.
          * @return A set of the registered requests.

</member>
        <member name="M:Csf.Vdn.RequestQueueInfo.setQueueName(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Set the name of the queue.
          * @param queueName The name of the queue.

</member>
        <member name="M:Csf.Vdn.RequestQueueInfo.getQueueName">
Get the name of the queue.
          * @return The name of the queue.

</member>
        <member name="M:Csf.Vdn.RequestQueueInfo.setTopicName(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Set the topic name
          * @param topicName The topic name.

</member>
        <member name="M:Csf.Vdn.RequestQueueInfo.getTopicName">
Get the topic name
          * @return The topic name.

</member>
        <member name="M:Csf.Vdn.RequestQueueInfo.Dispose">
Destructor. 
</member>
        <member name="M:Csf.Vdn.RequestQueueInfo.#ctor(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set&lt;Csf.Osal.String,std.less&lt;Csf.Osal.String&gt;,std.allocator&lt;Csf.Osal.String&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Constructor.
          * @param topicName The topic name.
          * @param queueName The queue name.
          * @param registeredRequests a set of request names that are registered with the queue.

</member>
        <member name="M:Csf.Vdn.RequestQueueInfo.#ctor">
Constructor. 
</member>
        <member name="T:Csf.Vdn.RequestQueueInfo">
Stores information about a published queue on the VDN. 
</member>
        <member name="F:Csf.Vdn.VariableInfo.m_size">
Size of the item in bytes (Only valid for block data types). 
</member>
        <member name="F:Csf.Vdn.VariableInfo.m_sourceName">
Name of the source publisher. 
</member>
        <member name="F:Csf.Vdn.VariableInfo.m_identity">
Identity of the published item. 
</member>
        <member name="M:Csf.Vdn.VariableInfo.toString">
Return the class as a string.
          * @return The class as a string of data.

</member>
        <member name="M:Csf.Vdn.VariableInfo.setSize(System.UInt32!System.Runtime.CompilerServices.IsConst)">
Set the size of the variable. This is only used
          * for Vdn::Block types. 
          * @param size Size of the block in bytes. 0 for other data types.

</member>
        <member name="M:Csf.Vdn.VariableInfo.getSize">
Get the size of the variable in bytes. This is only
          * used for Vdn::Block types.
          * @return Size of the block in bytes. 0 for other data types.

</member>
        <member name="M:Csf.Vdn.VariableInfo.setSourceName(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Set the name of the publisher source.
          * @param sourceName The name of the publisher source.

</member>
        <member name="M:Csf.Vdn.VariableInfo.getSourceName">
Get the name of the publisher source.
          * @return The name of the publisher source.

</member>
        <member name="M:Csf.Vdn.VariableInfo.setIdentity(Csf.Vdn.Identity!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Set the identity of the item.
          * @param identity The identity of the item.

</member>
        <member name="M:Csf.Vdn.VariableInfo.getIdentity">
Get the identity of the item. 
          * @return The identity of the item.

</member>
        <member name="M:Csf.Vdn.VariableInfo.Dispose">
Destructor. 
</member>
        <member name="M:Csf.Vdn.VariableInfo.#ctor(Csf.Vdn.Identity*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsConst)">
Constructor.
          * @param identity The identity of the item.
          * @param sourceName The name of the publisher source.
          * @param size Size of the item in bytes (Only valid for block data types).

</member>
        <member name="M:Csf.Vdn.VariableInfo.#ctor">
Constructor. 
</member>
        <member name="T:Csf.Vdn.VariableInfo">
Stores information about a published item on the VDN. 
</member>
        <member name="F:Csf.Vdn.Identity.m_scope">
The variable's scope. 
</member>
        <member name="F:Csf.Vdn.Identity.m_units">
The variable's units of measure. 
</member>
        <member name="F:Csf.Vdn.Identity.m_variableName">
The variable's name. 
</member>
        <member name="F:Csf.Vdn.Identity.m_topicName">
The variable's topic name. 
</member>
        <member name="F:Csf.Vdn.Identity.m_type">
The variable's type. 
</member>
        <member name="M:Csf.Vdn.Identity.op_Equality(Csf.Vdn.Identity!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded equality operator. 
          * @return True if the left hand side is equal to the right.
          * @param right Right hand operand.

</member>
        <member name="M:Csf.Vdn.Identity.op_LessThan(Csf.Vdn.Identity!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded less than comparison operator. 
          * @return True if the left hand side is less than the right.
          * @param right Right hand operand.

</member>
        <member name="M:Csf.Vdn.Identity.toString">
Converts the identity to a string name.
          * @return The string version of the identity.

</member>
        <member name="M:Csf.Vdn.Identity.getScope">
Get the variable scope.
          * @return The variable scope.

</member>
        <member name="M:Csf.Vdn.Identity.getUnits">
Get the variable units.
          * @return The variable units.

</member>
        <member name="M:Csf.Vdn.Identity.getVariableName">
Get the variable name.
          * @return The variable name.

</member>
        <member name="M:Csf.Vdn.Identity.getTopicName">
Get the variable topic.
          * @return The varible topic.

</member>
        <member name="M:Csf.Vdn.Identity.getType">
Get the variable type. 
          * @return The variable type.

</member>
        <member name="M:Csf.Vdn.Identity.set(Csf.Vdn.DataTypes.Types!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Vdn.Scope.ScopeLevels!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Set the identity details. 
          * @param type The variable's type.
          * @param topicName The variable's topic name.
          * @param variableName The variable's name.
          * @param units The variable's units of measure.
          * @param scope The variable's scope.

</member>
        <member name="M:Csf.Vdn.Identity.get(Csf.Vdn.DataTypes.Types*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Vdn.Scope.ScopeLevels*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Get the identity details. 
          * @param type The variable's type.
          * @param topicName The variable's topic name.
          * @param variableName The variable's name.
          * @param units The variable's units of measure.
          * @param scope The variable's scope.

</member>
        <member name="M:Csf.Vdn.Identity.#ctor(Csf.Vdn.DataTypes.Types!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Vdn.Scope.ScopeLevels!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Constructor.
          * @param type The variable's type.
          * @param topicName The variable's topic name.
          * @param variableName The variable's name.
          * @param units The variable's units of measure.
          * @param scope The variable's scope.

</member>
        <member name="M:Csf.Vdn.Identity.#ctor">
Constructor. 
</member>
        <member name="T:Csf.Vdn.Identity">
Stores the identity of a VDN variable. 
</member>
        <member name="M:Csf.Vdn.op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Utils.A429Word!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded stream insertion operator. Prints out all info about this class.
      * @return Output stream.
      * @param out Output stream to insert into.
      * @param v Object to insert into the stream.

</member>
        <member name="M:Csf.Vdn.AvioA429DataType.deserialize(Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Decodes it from the buffer to the value.
         * @param buffer The XDR buffer to use for decoding.

</member>
        <member name="M:Csf.Vdn.AvioA429DataType.serialize(Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a value to an XDR buffer
         * @param buffer The XDR buffer to use for encoding.

</member>
        <member name="M:Csf.Vdn.AvioA429DataType.size">
Returns the size of the Osal equivelant storage type. 
          * @returns The size of the Osal equivelant storage type. 

</member>
        <member name="M:Csf.Vdn.AvioA429DataType.isValid">
Returns true if the label is valid.
          * @returns
          * - true: Label is valid.
          * - false: Label is not valid.

</member>
        <member name="M:Csf.Vdn.AvioA429DataType.start">
Start (unfail) the label. 
</member>
        <member name="M:Csf.Vdn.AvioA429DataType.stop">
Stop (fail) the label. 
</member>
        <member name="M:Csf.Vdn.AvioA429DataType.toString">
Converts the 429 label to a binary representation of the label as a string.
          * @returns The 429 label to a binary representation of the label as a string.

</member>
        <member name="M:Csf.Vdn.AvioA429DataType.op_Assign(Csf.Vdn.AvioA429DataType*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assigns an AvioA429DataType from another.
          *   
          *  Note: this only copies the 32bit data word contents and
          *  does not copy the failed flag.
          * @param rhs The value to copy.

</member>
        <member name="M:Csf.Vdn.AvioA429DataType.op_Assign(System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Overloaded assignment operator.
          * @returns A reference to this object.
          * @param rhs The value to assign.

</member>
        <member name="M:Csf.Vdn.AvioA429DataType.overrideOn(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Override the value of the datatype with the value passed in.
          * @param value The value to override the datatype with.

</member>
        <member name="M:Csf.Vdn.AvioA429DataType.setVal(System.UInt32)">
Set the value of the datatype as an Osal::UInt32.
          * @param val The value to set the label as an Osal::UInt32.

</member>
        <member name="M:Csf.Vdn.AvioA429DataType.getVal">
Get the value of the datatype as an Osal::UInt32.
          * @returns The value of the datatype as an Osal::UInt32.

</member>
        <member name="M:Csf.Vdn.AvioA429DataType.op_Implicit~System.UInt32">
Overloaded cast operator to cast the VDN datatype to an Osal::UInt32.
          * @returns The Osal::UInt32 value of the label.

</member>
        <member name="M:Csf.Vdn.AvioA429DataType.setCoupled(Csf.Vdn.BaseDataType*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 
@ param v The source data item.

</member>
        <member name="M:Csf.Vdn.AvioA429DataType.copyLock(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy the lock flags from another datatype.
          * @param copy The value to copy from.

</member>
        <member name="M:Csf.Vdn.AvioA429DataType.compareThis(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Compare data from one VDN A429label to another. This is used by the VDN
          * to compare the appropriate member data from one datastore to another.
          * @returns True if the VDN considers the member data equal, false otherwise.
          * @param rhs The value to compare.

</member>
        <member name="M:Csf.Vdn.AvioA429DataType.copyThis(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy the value from another instance of this class.
          * @return a reference to this instance.
          * @param copy The value to copy.

</member>
        <member name="M:Csf.Vdn.AvioA429DataType.#ctor(Csf.Vdn.AvioA429DataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy Constructor.
          * @param val The A429label whose data should be copied.

</member>
        <member name="M:Csf.Vdn.AvioA429DataType.#ctor(System.UInt32)">
Constructor.
          * @param val The initial value for the label.

</member>
        <member name="M:Csf.Vdn.AvioA429DataType.#ctor">
Constructor. 
</member>
        <member name="F:Csf.Vdn.AvioA429DataType.m_src">
The address of the source (used when m_coupled). 
</member>
        <member name="T:Csf.Vdn.AvioA429DataType">
This class represents a 429 label on the VDN. 
</member>
        <member name="F:Csf.Vdn.BaseDataType.m_coupled">
@brief item is content coupled to the source sim element
       This feature is used for content coupled (globbed)
       sim element groups 
</member>
        <member name="F:Csf.Vdn.BaseDataType.m_overridden">
@brief value is overriden flag
</member>
        <member name="F:Csf.Vdn.BaseDataType.m_dirty">
@brief true if the value is changed from last read
       logic in VdnCore::read
       Arinc429 label is the only type for which this logic is implemented
</member>
        <member name="F:Csf.Vdn.BaseDataType.m_type">
The VDN data type. 
</member>
        <member name="M:Csf.Vdn.BaseDataType.getType">
@brief returns type
</member>
        <member name="M:Csf.Vdn.BaseDataType.size">
@brief returns a UInt32 of the size in bytes
</member>
        <member name="M:Csf.Vdn.BaseDataType.toString">
@brief returns a string representation of the value
</member>
        <member name="M:Csf.Vdn.BaseDataType.isDirty">

@brief returns true if data item has changed since last read

       Note: This field is only meainingful to subscribers
       For publishers the return is undefined
       Only implemented for Arinc429 labels

</member>
        <member name="M:Csf.Vdn.BaseDataType.deserialize(Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Decodes it from the buffer to the value.
          * @param buffer The XDR buffer to use for encoding.

</member>
        <member name="M:Csf.Vdn.BaseDataType.serialize(Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a value to an XDR buffer.
          * @param buffer The XDR buffer to use for encoding.

</member>
        <member name="M:Csf.Vdn.BaseDataType.getOverridden">
@brief Get's the value of the overridden flag.
</member>
        <member name="M:Csf.Vdn.BaseDataType.compareThis(Csf.Vdn.BaseDataType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@}
@brief True means they are the same
       For containers this function is used to check if the containers structure has changed.
       If an item within the container changes value, the subscribe will update normally and thus can be used in the subscribeChanged callbacks
       For record replay this is used to determine if the normal frames (not forced to send full frame) will include this item
       This is also used by the VdnClientIfc and AdvVdnClient to determine when to invoke a callback
</member>
        <member name="M:Csf.Vdn.BaseDataType.subscribe(Csf.Vdn.BaseDataType*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief This function subscribes to a leaf item of a container, v is typically Float64 Int64 Bool or Text.
       The item subscribed will be linked locally to the container, this does not cause any additional network traffic.
       If the container is already subscribed a call to the VdnClientIfc::subscribe will use this interface to link it locally.
       For example iterating the Container who's topic and name is "topic1" "name1" and the variable returns its name as "name1[3].foo[4].bar"
         you can call VdnClientIfc::subscribe(m_int64, "topic1", "name1[3].foo[4].bar", "", Scope::e_outputs); // notice the name1 is already included
</member>
        <member name="M:Csf.Vdn.BaseDataType.#ctor(Csf.Vdn.DataTypes.Types!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief constructor
</member>
        <member name="T:Csf.Vdn.VdnDataObject">
@brief Class used to describe a vdn variable
</member>
        <member name="F:e_noDatastore">
For datatypes that do no use the datastore mechanism
Bad Type
</member>
        <member name="F:e_stop">
Ending datatype enumeration (used in VDN buffer swap) 
</member>
        <member name="F:e_block">
Pointer and Size
</member>
        <member name="F:e_serialChannel">
SerialChannel data type
</member>
        <member name="F:e_a708Channel">
A708Channel data type
</member>
        <member name="F:e_a429Channel">
A429Channel data type
</member>
        <member name="F:e_a429Label">
A429Label data type
</member>
        <member name="F:e_text">
Text data type
</member>
        <member name="F:e_bool">
Bool data type
</member>
        <member name="F:e_int64">
Int64 data type
</member>
        <member name="F:e_float64">
Float64 data type 
</member>
        <member name="F:e_start">
Starting datatype enumeration (used in VDN buffer swap) 
</member>
        <member name="T:Csf.Vdn.DataTypes">

@brief Enumeration of data types storable in the VDN
       This allows common underlying datastores with different data types
       and generic pointers to be statically cast at runtime
       while at the same time allowing distinct publish/subscribe 
       methods for each data type

</member>
        <member name="F:Csf.Utils.RequestQueue.m_listenState">
The listen state of the queue. 
</member>
        <member name="F:Csf.Utils.RequestQueue.m_mutex">
Mutex to protect the queue data. 
</member>
        <member name="F:Csf.Utils.RequestQueue.m_registeredRequests">
A set of request names that are registered. 
</member>
        <member name="F:Csf.Utils.RequestQueue.m_queue">
The deque where the requests are stored. 
</member>
        <member name="F:Csf.Utils.RequestQueue.m_name">
The name of the request queue. 
</member>
        <member name="D:Csf.Utils.RequestQueue.RequestDeque">
Type definition for the request queue. 
</member>
        <member name="M:Csf.Utils.RequestQueue.deserialize(Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Decodes a request queue from the buffer to the value.
          * @param buffer The XDR buffer to use for decoding.

</member>
        <member name="M:Csf.Utils.RequestQueue.serialize(Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a request queue to an XDR buffer
          * @param buffer The XDR buffer to use for encoding.

</member>
        <member name="M:Csf.Utils.RequestQueue.printQueue">
Print the queue contents to standard output. 
</member>
        <member name="M:Csf.Utils.RequestQueue.getName">
Get the name of the queue.
         * @return The name of the queue.

</member>
        <member name="M:Csf.Utils.RequestQueue.getSize">
Get the number of requests in the queue.
         * @return The number of requests in the queue.

</member>
        <member name="M:Csf.Utils.RequestQueue.empty">
Returns true if the queue is empty.
         * @return True if the queue is empty, false otherwise.

</member>
        <member name="M:Csf.Utils.RequestQueue.peekFront(Csf.Utils.Request*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Stores a copy of the request at the front of the queue in the
         * request parameter.
         * @param request The location to store the request.

</member>
        <member name="M:Csf.Utils.RequestQueue.popFront(Csf.Utils.Request*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Pops a request off the front of the queue and stores it in the 
         * request paramater. 
         * @param request The location to store the request.

</member>
        <member name="M:Csf.Utils.RequestQueue.peekFront">
Returns a copy of the request at the front of the queue.
         * @return A copy of the request at the front of the queue.

</member>
        <member name="M:Csf.Utils.RequestQueue.popFront">
Pops a request off the front of the queue and returns it. 
         * @return The request at the front of the queue.

</member>
        <member name="M:Csf.Utils.RequestQueue.isRequestRegistered(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns true if the named request is registered.
         * @return True if the name is registered, false otherwise.
         * @param name The name of the request to query for.

</member>
        <member name="M:Csf.Utils.RequestQueue.getRegisteredRequests">
Return A collection of the request names that have been registered.
         * @return A collection of the request names that have been registered.

</member>
        <member name="M:Csf.Utils.RequestQueue.addRegisteredRequest(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Add a registered request name. The purpose of this method is to
         * publish the intention to handle a request with the given name.
         * Note, you do not have to register a request to be able to use
         * it. This just provides other clients with information about the
         * requests you intend to handle.
         * @param requestName The name of the request to register.

</member>
        <member name="M:Csf.Utils.RequestQueue.pushBack(Csf.Utils.Request!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Push a request to the back of the queue.
         * @param request The request to add to the queue.

</member>
        <member name="M:Csf.Utils.RequestQueue.unlock">
Unlock the queue. 
</member>
        <member name="M:Csf.Utils.RequestQueue.lock">
Lock the queue. 
</member>
        <member name="M:Csf.Utils.RequestQueue.getListenState">
Get the listen state.
         * @return The value of the listen state.

</member>
        <member name="M:Csf.Utils.RequestQueue.setListenState(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Turns on/off request queue logging to the database.
         * @param state The new listen state.

</member>
        <member name="M:Csf.Utils.RequestQueue.clear">
Clear the queue. 
</member>
        <member name="M:Csf.Utils.RequestQueue.Dispose">
Destructor. 
</member>
        <member name="M:Csf.Utils.RequestQueue.#ctor(Csf.Utils.RequestQueue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor.
         * @param copy The request queue to copy.

</member>
        <member name="M:Csf.Utils.RequestQueue.#ctor(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Constructor.
         * @param name The name of the request queue.

</member>
        <member name="T:Csf.Utils.RequestQueue">
A queue to handle requests. 
</member>
        <member name="F:Csf.Utils.Request.m_parameters">
The parameters of the request. 
</member>
        <member name="F:Csf.Utils.Request.m_senderName">
The name of the request sender. 
</member>
        <member name="F:Csf.Utils.Request.m_name">
The name of the request. 
</member>
        <member name="M:Csf.Utils.Request.deserialize(Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Decodes a request from the buffer to the value.
          * @param buffer The XDR buffer to use for decoding.

</member>
        <member name="M:Csf.Utils.Request.serialize(Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Encodes a request to an XDR buffer
          * @param buffer The XDR buffer to use for encoding.

</member>
        <member name="M:Csf.Utils.Request.add(Csf.Utils.Parameter!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Add a prepopulated parameter.
         * @param value The parameter to add.

</member>
        <member name="M:Csf.Utils.Request.add(System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst,Csf.Osal.ValueTypes.Type!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Add a parameter as an array of bytes.
         * @param value The value of the parameter to add.
         * @param size The size of the value in bytes.
         * @param type The type of parameter to add.

</member>
        <member name="M:Csf.Utils.Request.add(Csf.Osal.ByteArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Add a ByteArray parameter to the request.
         * @param value The value of the parameter to add.

</member>
        <member name="M:Csf.Utils.Request.add(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Add a String parameter to the request.
         * Note, this will convert the Char* to a String.
         * You must use getString() to retreive the value.
         * @param value The value of the parameter to add.

</member>
        <member name="M:Csf.Utils.Request.add(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Add a String parameter to the request.
         * @param value The value of the parameter to add.

</member>
        <member name="M:Csf.Utils.Request.add(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Add a Float64 parameter to the request.
         * @param value The value of the parameter to add.

</member>
        <member name="M:Csf.Utils.Request.add(System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Add a Float32 parameter to the request.
         * @param value The value of the parameter to add.

</member>
        <member name="M:Csf.Utils.Request.add(System.Int64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Add a Int64 parameter to the request.
         * @param value The value of the parameter to add.

</member>
        <member name="M:Csf.Utils.Request.add(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Add an Int32 parameter to the request.
         * @param value The value of the parameter to add.

</member>
        <member name="M:Csf.Utils.Request.add(System.Int16!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Add an Int16 parameter to the request.
         * @param value The value of the parameter to add.

</member>
        <member name="M:Csf.Utils.Request.add(System.UInt64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Add a UInt64 parameter to the request.
         * @param value The value of the parameter to add.

</member>
        <member name="M:Csf.Utils.Request.add(System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Add a UInt32 parameter to the request.
         * @param value The value of the parameter to add.

</member>
        <member name="M:Csf.Utils.Request.add(System.UInt16!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Add a UInt16 parameter to the request.
         * @param value The value of the parameter to add.

</member>
        <member name="M:Csf.Utils.Request.add(System.Byte!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Add a UChar parameter to the request.
         * @param value The value of the parameter to add.

</member>
        <member name="M:Csf.Utils.Request.add(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Add a Char parameter to the request.
         * @param value The value of the parameter to add.

</member>
        <member name="M:Csf.Utils.Request.add(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Add a boolean parameter to the request.
         * @param value The value of the parameter to add.

</member>
        <member name="M:Csf.Utils.Request.getByteArray(System.UInt32)">
Returns a parameter with the given index as a ByteArray value.
         * @throws std::runtime_error() if the parameter is the wrong type.
         * @throws std::range_error() if the index is out of range.
         * @return The parameter with the given index as a boolean value.
         * @param index The index of the parameter.

</member>
        <member name="M:Csf.Utils.Request.getString(System.UInt32)">
Returns a parameter with the given index as a String value.
         * @throws std::runtime_error() if the parameter is the wrong type.
         * @throws std::range_error() if the index is out of range.
         * @return The parameter with the given index as a boolean value.
         * @param index The index of the parameter.

</member>
        <member name="M:Csf.Utils.Request.getFloat64(System.UInt32)">
Returns a parameter with the given index as a Float64 value.
         * @throws std::runtime_error() if the parameter is the wrong type.
         * @throws std::range_error() if the index is out of range.
         * @return The parameter with the given index as a boolean value.
         * @param index The index of the parameter.

</member>
        <member name="M:Csf.Utils.Request.getFloat32(System.UInt32)">
Returns a parameter with the given index as a Float32 value.
         * @throws std::runtime_error() if the parameter is the wrong type.
         * @throws std::range_error() if the index is out of range.
         * @return The parameter with the given index as a boolean value.
         * @param index The index of the parameter.

</member>
        <member name="M:Csf.Utils.Request.getInt64(System.UInt32)">
Returns a parameter with the given index as an Int64 value.
         * @throws std::runtime_error() if the parameter is the wrong type.
         * @throws std::range_error() if the index is out of range.
         * @return The parameter with the given index as a boolean value.
         * @param index The index of the parameter.

</member>
        <member name="M:Csf.Utils.Request.getInt32(System.UInt32)">
Returns a parameter with the given index as an Int32 value.
         * @throws std::runtime_error() if the parameter is the wrong type.
         * @throws std::range_error() if the index is out of range.
         * @return The parameter with the given index as a boolean value.
         * @param index The index of the parameter.

</member>
        <member name="M:Csf.Utils.Request.getInt16(System.UInt32)">
Returns a parameter with the given index as a Int16 value.
         * @throws std::runtime_error() if the parameter is the wrong type.
         * @throws std::range_error() if the index is out of range.
         * @return The parameter with the given index as a boolean value.
         * @param index The index of the parameter.

</member>
        <member name="M:Csf.Utils.Request.getUInt64(System.UInt32)">
Returns a parameter with the given index as a UInt64 value.
         * @throws std::runtime_error() if the parameter is the wrong type.
         * @throws std::range_error() if the index is out of range.
         * @return The parameter with the given index as a boolean value.
         * @param index The index of the parameter.

</member>
        <member name="M:Csf.Utils.Request.getUInt32(System.UInt32)">
Returns a parameter with the given index as a UInt32 value.
         * @throws std::runtime_error() if the parameter is the wrong type.
         * @throws std::range_error() if the index is out of range.
         * @return The parameter with the given index as a boolean value.
         * @param index The index of the parameter.

</member>
        <member name="M:Csf.Utils.Request.getUInt16(System.UInt32)">
Returns a parameter with the given index as a UInt16 value.
         * @throws std::runtime_error() if the parameter is the wrong type.
         * @throws std::range_error() if the index is out of range.
         * @return The parameter with the given index as a boolean value.
         * @param index The index of the parameter.

</member>
        <member name="M:Csf.Utils.Request.getUChar(System.UInt32)">
Returns a parameter with the given index as a UChar value.
         * @throws std::runtime_error() if the parameter is the wrong type.
         * @throws std::range_error() if the index is out of range.
         * @return The parameter with the given index as a boolean value.
         * @param index The index of the parameter.

</member>
        <member name="M:Csf.Utils.Request.getChar(System.UInt32)">
Returns a parameter with the given index as a Char value.
         * @throws std::runtime_error() if the parameter is the wrong type.
         * @throws std::range_error() if the index is out of range.
         * @return The parameter with the given index as a boolean value.
         * @param index The index of the parameter.

</member>
        <member name="M:Csf.Utils.Request.getBool(System.UInt32)">
Returns a parameter with the given index as a boolean value.
         * @throws std::runtime_error() if the parameter is the wrong type.
         * @throws std::range_error() if the index is out of range.
         * @return The parameter with the given index as a boolean value.
         * @param index The index of the parameter.

</member>
        <member name="M:Csf.Utils.Request.getParameterType(System.UInt32)">
Returns the type of parameter with the given index.
         * Request argument(index) must be valid otherwise an exception is thrown.
         * @throws std::range_error() if index is out of range.
         * @return The type of parameter with the given index.
         * @param index The index of the parameter.

</member>
        <member name="M:Csf.Utils.Request.getParameter(System.UInt32)">
Returns the parameter with a given index.
         * Request argument(index) must be valid otherwise an exception is thrown.
         * @throws std::ranger_error() if index is out of range.
         * @param index The index of the parameter.

</member>
        <member name="M:Csf.Utils.Request.parameterCount">
Returns the number of parameters in the request.
         * @return The number of parameters in the request.

</member>
        <member name="M:Csf.Utils.Request.setSender(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Sets the name of the request sender.
         * @param name The name of the sender.

</member>
        <member name="M:Csf.Utils.Request.getSender">
Gets the name of the request sender.
         * @return The name of the request sender.

</member>
        <member name="M:Csf.Utils.Request.setName(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Sets the name of the request.
         * @param name The name of the request.

</member>
        <member name="M:Csf.Utils.Request.getName">
Returns the name of the request.
         * @return The name of the request.

</member>
        <member name="M:Csf.Utils.Request.op_Assign(Csf.Utils.Request!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment operator. 
         * @return A reference to this request.
         * @param right The request to copy.

</member>
        <member name="M:Csf.Utils.Request.clear">
Clear all parameters in the request. 
</member>
        <member name="M:Csf.Utils.Request.Dispose">
Destructor. 
</member>
        <member name="M:Csf.Utils.Request.#ctor(Csf.Osal.String,Csf.Osal.String)">
Common use constructor to specify name and single String arguement.
         * @param name The name of the request.
         * @param arg0 A String argument to add to the request.

</member>
        <member name="M:Csf.Utils.Request.#ctor(Csf.Osal.String,System.Double)">
Common use constructor to specify name and single Float64 arguement. 
         * @param name The name of the request.
         * @param arg0 A Float64 argument to add to the request.

</member>
        <member name="M:Csf.Utils.Request.#ctor(Csf.Osal.String,System.Int64)">
Common use constructor to specify name and single Int64 arguement. 
         * @param name The name of the request.
         * @param arg0 An Int64 argument to add to the request.

</member>
        <member name="M:Csf.Utils.Request.#ctor(Csf.Osal.String,System.Boolean)">
Common use constructor to specify name and single Bool arguement. 
         * @param name The name of the request.
         * @param arg0 A Boolean argument to add to the request.

</member>
        <member name="M:Csf.Utils.Request.#ctor(Csf.Utils.Request!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor. 
         * @param copy The request to copy.

</member>
        <member name="M:Csf.Utils.Request.#ctor(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Constructor specifying name. 
         * @param name The name of the request.

</member>
        <member name="T:Csf.Utils.Request">
A class containing information about a request. 
</member>
        <member name="F:Csf.Utils.Parameter.size">
The size of the data in bytes. 
</member>
        <member name="F:Csf.Utils.Parameter.data">
The data stored in the parameter. 
</member>
        <member name="F:Csf.Utils.Parameter.type">
The parameter type. 
</member>
        <member name="M:Csf.Utils.Parameter.#ctor(Csf.Osal.ValueTypes.Type!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Constructor. 
</member>
        <member name="T:Csf.Utils.Parameter">
Represents a parameter that is part of a Request. 
</member>
        <member name="M:Csf.Utils.op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Utils.XdrBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Friend that prints out the contents of the buffer as an array of bytes.
       * @return Output stream.
       * @param out Output stream to insert into.
       * @param rhs XDR buffer to print.

</member>
        <member name="F:Csf.Utils.XdrBuffer.m_popCursor">
The number of bytes that have been popped off the buffer. 
</member>
        <member name="F:Csf.Utils.XdrBuffer.m_currentSize">
The number of bytes that have been pushed onto the buffer. 
</member>
        <member name="F:Csf.Utils.XdrBuffer.m_maxSize">
The max size of the buffer. Represents the size of m_buffer. 
</member>
        <member name="F:Csf.Utils.XdrBuffer.m_buffer">
The storage location of the buffer data. 
</member>
        <member name="F:Csf.Utils.XdrBuffer.m_initialSize">
The initial size of the buffer. 
</member>
        <member name="F:Csf.Utils.XdrBuffer.m_mutex">
Mutex to make api thread safe. 
</member>
        <member name="M:Csf.Utils.XdrBuffer.popBytes(System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsConst)">
Pop bytes off the front of the buffer.
          * @throws run_time error on failure.
          * @param bytes A pointer to the location where the data will be stored.
          * @param numBytes The number of bytes to pop off the buffer.

</member>
        <member name="M:Csf.Utils.XdrBuffer.pushBytes(System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst)">
Push a buffer of bytes onto the back of the buffer.
          * @param bytes A pointer to the data to push onto the buffer.
          * @param numBytes The number of bytes to push onto the buffer.

</member>
        <member name="M:Csf.Utils.XdrBuffer.rewind">
Move the pop cursor back to the start of the buffer. Use this
          * to re-parse a buffer.

</member>
        <member name="M:Csf.Utils.XdrBuffer.clear">
Move the pushBack cursor back to the start of the buffer. This makes
          * the next pushBack() push something at the start of the buffer. Call
          * this to reuse a buffer.

</member>
        <member name="M:Csf.Utils.XdrBuffer.getPopCursor">
Get the location of the pop cursor.
          * @return The location of the pop cursor which is an offset into the buffer.

</member>
        <member name="M:Csf.Utils.XdrBuffer.getMaxSize">
Get the max size of the XDR buffer in bytes.
          * @return The max size of the buffer in bytes.

</member>
        <member name="M:Csf.Utils.XdrBuffer.setSize(System.UInt64!System.Runtime.CompilerServices.IsConst)">
Set the number of bytes that have been pushed onto the XDR buffer.
          * Normally this is not used as the class will keep track of this.
          * @param size Size of the buffer in bytes.

</member>
        <member name="M:Csf.Utils.XdrBuffer.getSize">
Get the number of bytes that have been pushed onto the XDR buffer.
          * @return Size of the buffer in bytes.

</member>
        <member name="M:Csf.Utils.XdrBuffer.setBuffer(System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt64!System.Runtime.CompilerServices.IsConst)">
Copy data into the buffer. Throws.
          * @param source Source buffer to copy from.
          * @param size Size of the buffer in bytes.

</member>
        <member name="M:Csf.Utils.XdrBuffer.getBuffer">
Get a pointer to a buffer that contains the XDR format version
          * of the data in this buffer.
          * @return Pointer to the XDR buffer.

</member>
        <member name="M:Csf.Utils.XdrBuffer.popOpaque(System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsConst)">
Pops an opaque data type off the front of the XDR buffer.
          * @throws run_time error on failure.
          * @param data A poitner to a buffer where the data will be stored.
          * @param size The size of the buffer where the data will be stored.

</member>
        <member name="M:Csf.Utils.XdrBuffer.pop(Csf.Osal.String*)">
Pops a varible off the front of the XDR buffer. 
          * @throws run_time error on failure.
          * @param data Pointer to where to store the variable.

</member>
        <member name="M:Csf.Utils.XdrBuffer.pop(System.Double*)">
Pops a varible off the front of the XDR buffer. 
          * @throws run_time error on failure.
          * @param data Pointer to where to store the variable.

</member>
        <member name="M:Csf.Utils.XdrBuffer.pop(System.Single*)">
Pops a varible off the front of the XDR buffer. 
          * @throws run_time error on failure.
          * @param data Pointer to where to store the variable.

</member>
        <member name="M:Csf.Utils.XdrBuffer.pop(System.UInt64*)">
Pops a varible off the front of the XDR buffer. 
          * @throws run_time error on failure.
          * @param data Pointer to where to store the variable.

</member>
        <member name="M:Csf.Utils.XdrBuffer.pop(System.Int64*)">
Pops a varible off the front of the XDR buffer.
          * @throws run_time error on failure.
          * @param data Pointer to where to store the variable.

</member>
        <member name="M:Csf.Utils.XdrBuffer.pop(System.Boolean*)">
Pops a varible off the front of the XDR buffer.
          * @throws run_time error on failure.
          * @param data Pointer to where to store the variable.

</member>
        <member name="M:Csf.Utils.XdrBuffer.pop(System.UInt32*)">
Pops a varible off the front of the XDR buffer. 
          * @throws run_time error on failure.
          * @param data Pointer to where to store the variable.

</member>
        <member name="M:Csf.Utils.XdrBuffer.pop(System.Int32*)">
Pops a varible off the front of the XDR buffer.
          * @throws run_time error on failure.
          * @param data Pointer to where to store the variable.

</member>
        <member name="M:Csf.Utils.XdrBuffer.pop(System.UInt16*)">
Pops a varible off the front of the XDR buffer.
          * @throws run_time error on failure.
          * @param data Pointer to where to store the variable.

</member>
        <member name="M:Csf.Utils.XdrBuffer.pop(System.Int16*)">
Pops a varible off the front of the XDR buffer. 
          * @throws run_time error on failure.
          * @param data Pointer to where to store the variable.

</member>
        <member name="M:Csf.Utils.XdrBuffer.pop(System.Byte*)">
Pops a single unsigned character off the front of the XDR buffer.
          * @throws run_time error on failure.
          * @param data Pointer to where to store the variable.

</member>
        <member name="M:Csf.Utils.XdrBuffer.pop(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
Pops a single character off the front of the XDR buffer.
          * @throws run_time error on failure.
          * @param data Pointer to where to store the variable.

</member>
        <member name="M:Csf.Utils.XdrBuffer.pushBackOpaque(System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst)">
Push an opaque data type onto the back of the XDR buffer.
          * @param data A pointer to the data to push onto the buffer.
          * @param size The size of the buffer to push onto the buffer.

</member>
        <member name="M:Csf.Utils.XdrBuffer.pushBack(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Pushes a variable onto the back of the XDR buffer (similar to STL 
          * push_back() for containers). If the buffer
          * is too small, it will grow by initialSize bytes. 
          * @param newData The variable to pushBack onto the buffer.

</member>
        <member name="M:Csf.Utils.XdrBuffer.pushBack(System.Double!System.Runtime.CompilerServices.IsConst)">
Pushes a variable onto the back of the XDR buffer (similar to STL 
          * push_back() for containers). If the buffer
          * is too small, it will grow by initialSize bytes. 
          * @param newData The variable to pushBack onto the buffer.

</member>
        <member name="M:Csf.Utils.XdrBuffer.pushBack(System.Single!System.Runtime.CompilerServices.IsConst)">
Pushes a variable onto the back of the XDR buffer (similar to STL 
          * push_back() for containers). If the buffer
          * is too small, it will grow by initialSize bytes. 
          * @param newData The variable to pushBack onto the buffer.

</member>
        <member name="M:Csf.Utils.XdrBuffer.pushBack(System.UInt64!System.Runtime.CompilerServices.IsConst)">
Pushes a variable onto the back of the XDR buffer (similar to STL 
          * push_back() for containers). If the buffer
          * is too small, it will grow by initialSize bytes. 
          * @param newData The variable to pushBack onto the buffer.

</member>
        <member name="M:Csf.Utils.XdrBuffer.pushBack(System.Int64!System.Runtime.CompilerServices.IsConst)">
Pushes a variable onto the back of the XDR buffer (similar to STL 
          * push_back() for containers). If the buffer
          * is too small, it will grow by initialSize bytes. 
          * @param newData The variable to pushBack onto the buffer.

</member>
        <member name="M:Csf.Utils.XdrBuffer.pushBack(System.Boolean!System.Runtime.CompilerServices.IsConst)">
Pushes a variable onto the back of the XDR buffer (similar to STL 
          * push_back() for containers). If the buffer
          * is too small, it will grow by initialSize bytes. 
          * @param newData The variable to pushBack onto the buffer.

</member>
        <member name="M:Csf.Utils.XdrBuffer.pushBack(System.UInt32!System.Runtime.CompilerServices.IsConst)">
Pushes a variable onto the back of the XDR buffer (similar to STL 
          * push_back() for containers). If the buffer
          * is too small, it will grow by initialSize bytes. 
          * @param newData The variable to pushBack onto the buffer.

</member>
        <member name="M:Csf.Utils.XdrBuffer.pushBack(System.Int32!System.Runtime.CompilerServices.IsConst)">
Pushes a variable onto the back of the XDR buffer (similar to STL 
          * push_back() for containers). If the buffer
          * is too small, it will grow by initialSize bytes. 
          * @param newData The variable to pushBack onto the buffer.

</member>
        <member name="M:Csf.Utils.XdrBuffer.pushBack(System.UInt16!System.Runtime.CompilerServices.IsConst)">
Pushes a variable onto the back of the XDR buffer (similar to STL 
          * push_back() for containers). If the buffer
          * is too small, it will grow by initialSize bytes. 
          * @param newData The variable to pushBack onto the buffer.

</member>
        <member name="M:Csf.Utils.XdrBuffer.pushBack(System.Int16!System.Runtime.CompilerServices.IsConst)">
Pushes a variable onto the back of the XDR buffer (similar to STL 
          * push_back() for containers). If the buffer
          * is too small, it will grow by initialSize bytes. 
          * @param newData The variable to pushBack onto the buffer.

</member>
        <member name="M:Csf.Utils.XdrBuffer.pushBack(System.Byte!System.Runtime.CompilerServices.IsConst)">
Pushes a variable onto the back of the XDR buffer (similar to STL 
          * push_back() for containers). If the buffer
          * is too small, it will grow by initialSize bytes. 
          * @param newData The variable to pushBack onto the buffer.

</member>
        <member name="M:Csf.Utils.XdrBuffer.pushBack(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst)">
Pushes a variable onto the back of the XDR buffer (similar to STL 
          * push_back() for containers). If the buffer
          * is too small, it will grow by initialSize bytes. 
          * @param newData The variable to pushBack onto the buffer.

</member>
        <member name="M:Csf.Utils.XdrBuffer.op_Assign(Csf.Utils.XdrBuffer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment operator. 
          * @return Reference to this instance of the buffer.
          * @param r The object to copy.

</member>
        <member name="M:Csf.Utils.XdrBuffer.#ctor(Csf.Utils.XdrBuffer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy Constructor. 
          * @param r The object to copy.

</member>
        <member name="M:Csf.Utils.XdrBuffer.Dispose">
Destructor. 
</member>
        <member name="M:Csf.Utils.XdrBuffer.#ctor(System.UInt64!System.Runtime.CompilerServices.IsConst)">
Constructor.
          * @param initialSize Initial buffer size. When the buffer grows, it will
          * grow by this much as well. Defaults to 1024.

</member>
        <member name="T:Csf.Utils.XdrBuffer">
The XdrBuffer class provides functionality to handle a buffer of data in XDR format. 
</member>
        <member name="M:Csf.Utils.Xdr.reverseBytes(System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsConst)">
Reverse the bytes in a buffer.
         * @param bytes A pointer to the buffer of data.
         * @param numBytes The number of bytes in the buffer.

</member>
        <member name="M:Csf.Utils.Xdr.padSize(System.UInt32)">
Takes the size that was passed in and pads it with the appropriate number of bytes 
         * @return The size of the value as it will be stored in the XDR buffer.
         * @param sizeToPad The size to pad.

</member>
        <member name="M:Csf.Utils.Xdr.sizeOf(System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst)">
Returns the size of the value as it will be stored in the XDR buffer
         * @return The size of the value as it will be stored in the XDR buffer.
         * @param data The buffer of data to check.
         * @param size The size of the buffer of data.

</member>
        <member name="M:Csf.Utils.Xdr.sizeOf(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the size of the value as it will be stored in the XDR buffer
         * @return The size of the value as it will be stored in the XDR buffer.
         * @param value The value to check.

</member>
        <member name="M:Csf.Utils.Xdr.sizeOf(System.UInt64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the size of the value as it will be stored in the XDR buffer
         * @return The size of the value as it will be stored in the XDR buffer.
         * @param value The value to check.

</member>
        <member name="M:Csf.Utils.Xdr.sizeOf(System.Int64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the size of the value as it will be stored in the XDR buffer
         * @return The size of the value as it will be stored in the XDR buffer.
         * @param value The value to check.

</member>
        <member name="M:Csf.Utils.Xdr.sizeOf(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the size of the value as it will be stored in the XDR buffer
         * @return The size of the value as it will be stored in the XDR buffer.
         * @param value The value to check.

</member>
        <member name="M:Csf.Utils.Xdr.sizeOf(System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the size of the value as it will be stored in the XDR buffer
         * @return The size of the value as it will be stored in the XDR buffer.
         * @param value The value to check.

</member>
        <member name="M:Csf.Utils.Xdr.sizeOf(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the size of the value as it will be stored in the XDR buffer
         * @return The size of the value as it will be stored in the XDR buffer.
         * @param value The value to check.

</member>
        <member name="M:Csf.Utils.Xdr.sizeOf(System.UInt16!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the size of the value as it will be stored in the XDR buffer
         * @return The size of the value as it will be stored in the XDR buffer.
         * @param value The value to check.

</member>
        <member name="M:Csf.Utils.Xdr.sizeOf(System.Int16!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the size of the value as it will be stored in the XDR buffer
         * @return The size of the value as it will be stored in the XDR buffer.
         * @param value The value to check.

</member>
        <member name="M:Csf.Utils.Xdr.toNet(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt32!System.Runtime.CompilerServices.IsConst)">
Converts the host data to network byte order, in place. This can be used for any of the
         * int or float data types.
         * @param hostData Pointer to the start of the bytes.
         * @param size # of bytes.

</member>
        <member name="M:Csf.Utils.Xdr.toNet(System.UInt64!System.Runtime.CompilerServices.IsConst)">
Converts the data to network order
         * @return The data in network order.
         * @param hostData the data to convert.

</member>
        <member name="M:Csf.Utils.Xdr.toNet(System.Int64!System.Runtime.CompilerServices.IsConst)">
Converts the data to network order
         * @return The data in network order.
         * @param hostData the data to convert.

</member>
        <member name="M:Csf.Utils.Xdr.toNet(System.UInt32!System.Runtime.CompilerServices.IsConst)">
Converts the data to network order
         * @return The data in network order.
         * @param hostData the data to convert.

</member>
        <member name="M:Csf.Utils.Xdr.toNet(System.Int32!System.Runtime.CompilerServices.IsConst)">
Converts the data to network order
         * @return The data in network order.
         * @param hostData the data to convert.

</member>
        <member name="M:Csf.Utils.Xdr.toNet(System.UInt16!System.Runtime.CompilerServices.IsConst)">
Converts the data to network order
         * @return The data in network order.
         * @param hostData the data to convert.

</member>
        <member name="M:Csf.Utils.Xdr.toNet(System.Int16!System.Runtime.CompilerServices.IsConst)">
Converts the data to network order
         * @return The data in network order.
         * @param hostData the data to convert.

</member>
        <member name="M:Csf.Utils.Xdr.toNet(System.Byte!System.Runtime.CompilerServices.IsConst)">
Converts the data to network order
         * @return The data in network order.
         * @param hostData the data to convert.

</member>
        <member name="M:Csf.Utils.Xdr.toNet(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst)">
Converts the data to network order
         * @return The data in network order.
         * @param hostData the data to convert.

</member>
        <member name="M:Csf.Utils.Xdr.toHost(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt32!System.Runtime.CompilerServices.IsConst)">
Converts the network data to host byte order, in place. This can be used for any of the
         * int or float data types.
         * @param netData Pointer to the start of the bytes.
         * @param size # of bytes.

</member>
        <member name="M:Csf.Utils.Xdr.toHost(System.UInt64!System.Runtime.CompilerServices.IsConst)">
Converts the data to host order
         * @return The data in host order.
         * @param netData the data to convert.

</member>
        <member name="M:Csf.Utils.Xdr.toHost(System.Int64!System.Runtime.CompilerServices.IsConst)">
Converts the data to host order
         * @return The data in host order.
         * @param netData the data to convert.

</member>
        <member name="M:Csf.Utils.Xdr.toHost(System.UInt32!System.Runtime.CompilerServices.IsConst)">
Converts the data to host order
         * @return The data in host order.
         * @param netData the data to convert.

</member>
        <member name="M:Csf.Utils.Xdr.toHost(System.Int32!System.Runtime.CompilerServices.IsConst)">
Converts the data to host order
         * @return The data in host order.
         * @param netData the data to convert.

</member>
        <member name="M:Csf.Utils.Xdr.toHost(System.UInt16!System.Runtime.CompilerServices.IsConst)">
Converts the data to host order
         * @return The data in host order.
         * @param netData the data to convert.

</member>
        <member name="M:Csf.Utils.Xdr.toHost(System.Int16!System.Runtime.CompilerServices.IsConst)">
Converts the data to host order
         * @return The data in host order.
         * @param netData the data to convert.

</member>
        <member name="M:Csf.Utils.Xdr.toHost(System.Byte!System.Runtime.CompilerServices.IsConst)">
Converts the data to host order
         * @return The data in host order.
         * @param netData the data to convert.

</member>
        <member name="M:Csf.Utils.Xdr.toHost(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst)">
Converts the data to host order
         * @return The data in host order.
         * @param netData the data to convert.

</member>
        <member name="M:Csf.Utils.Xdr.isLsb">
Determines if we're on a Least Significant Bit (little-endian) or
         * a Most Significant Bit (big-endian) architecture. XDR uses MSB (also
         * referred to as network byte order).
         * Note that this function determines endianness at runtime. It is not used by the 
         * other methods in this class, they use a macro defined in Osal/ValueTypes.h
         * which is based on the current platform to make this decision at compile time
         * for efficiency's sake.
         * @return true if we're on a Least Significant Bit, false if not.

</member>
        <member name="M:Csf.Utils.Xdr.Dispose">
Destructor. 
</member>
        <member name="M:Csf.Utils.Xdr.#ctor">
Constructor 
</member>
        <member name="T:Csf.Utils.Xdr">
Implements XDR. 
      * Provides methods for encoding and decoding data using an XDR buffer. Specifically it
      * provides toNet and toHost static methods for putting data in network or host byte order.
      * There are functions for all applicable data types except Float32 and Float64. Those must
      * be handled by either reinterpret casting pointers to Int32/Int64 types and using the 
      * Int32/64 functions, or else using the function that takes a Char* and a size. The reason
      * is that if floating point exceptions are turned on then when bytes are swapped, it is possible
      * to compose an invalid float that will trigger an exception. 

</member>
        <member name="F:Csf.Utils.A708FrameUtility.m_val">
ARINC A708 Frame. 
</member>
        <member name="M:Csf.Utils.A708FrameUtility.bcdToBnr(System.UInt32)">
 Convert number from BCD format
@return BNR formatted value
@param  value       Value in BCD format

</member>
        <member name="M:Csf.Utils.A708FrameUtility.bnrToBcd(System.UInt32)">
 Convert number to BCD format
@return BCD formatted value 
@param  value       Value to be converted

</member>
        <member name="M:Csf.Utils.A708FrameUtility.getBin(System.UInt32,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Gets a single 3 bit bin.
@return:
- true: Success
- false: Failure
@param  bin     The bin # (range: 0 to 511 )
@param  value   value of bin (range: 0 - 7 )

</member>
        <member name="M:Csf.Utils.A708FrameUtility.setBins(System.UInt32,System.UInt32,System.UInt32)">
Sets a number of bins to the same value
@return:
- true: Success
- false: Failure
@param  startBin    The start bin number (range: 1 to 512)
@param  endBin      The ending bin number (range: 1 to 512)
@param  value       Value to set Bins to (range: 0-7 )

</member>
        <member name="M:Csf.Utils.A708FrameUtility.setBin(System.UInt32,System.UInt32)">
Sets a single 3 bit bin.
@return:
- true: Success
- false: Failure
@param  bin     The bin # (range: 1 to 512)
@param  value   value of bin (range: 0 to 7 )

</member>
        <member name="M:Csf.Utils.A708FrameUtility.setBitsUInt(System.UInt32,System.UInt32,System.Double,System.Double,System.Boolean)">
Set given value in Unsigned Integer format.
Set numBits number of bits starting at startBit. The value-to-set
is computed by dividing value by valueLSB. The bits are set in
Unsigned Integer format.
Deprecated, use setBitsUint without header flag instead
@return:
- true: Success
- false: Failure
@param  startBit The start bit
@param  numBits  Number of bits
@param  valueLSB Value of the least significant bit
@param  value    Value
@param  isHeader Is this a header?

</member>
        <member name="M:Csf.Utils.A708FrameUtility.setBitsUInt(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
Set given value in Unsigned Integer format.
Set numBits number of bits starting at startBit. The value-to-set
is computed by dividing value by valueLSB. The bits are set in
Unsigned Integer format.
Deprecated. Use version without isHeader flag instead.
@return:
- true: Success
- false: Failure
@param  startBit The start bit
@param  numBits  Number of bits
@param  valueLSB Value of the least significant bit
@param  value    Value
@param  isHeader Is this a header?

</member>
        <member name="M:Csf.Utils.A708FrameUtility.clear">
Clear the A708 frame data. 
</member>
        <member name="M:Csf.Utils.A708FrameUtility.setVal(System.Byte*)">
Set value of the frame via character array
         * @pre array length must be 200 bytes
         * @param array pointer to data to copy into frame data object

</member>
        <member name="M:Csf.Utils.A708FrameUtility.setVal(Csf.Osal.ByteArray*)">
Set value of the frame
         * @pre array length must be 200 bytes
         * @param array pointer to data to copy into frame data object

</member>
        <member name="M:Csf.Utils.A708FrameUtility.getVal">
Get a pointer to the frame data
         * @pre array length must be 200 bytes
         * @return pointer to frame data as an Osal::ByteArray

</member>
        <member name="M:Csf.Utils.A708FrameUtility.#ctor(Csf.Utils.A708FrameUtility!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor. 
</member>
        <member name="M:Csf.Utils.A708FrameUtility.op_Assign(Csf.Utils.A708FrameUtility!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment Operator. 
</member>
        <member name="M:Csf.Utils.A708FrameUtility.op_Assign(Csf.Osal.ByteArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment Operator. 
</member>
        <member name="M:Csf.Utils.A708FrameUtility.Dispose">
Destructor. 
</member>
        <member name="M:Csf.Utils.A708FrameUtility.#ctor">
Constructor. 
</member>
        <member name="F:Csf.Utils.A708FrameUtility.sc_a708FrameBitSize">
Size of ARINC 708 Frame in bits 
</member>
        <member name="F:Csf.Utils.A708FrameUtility.sc_a708FrameByteSize">
Size of ARINC 708 Frame in Bytes 
</member>
        <member name="F:e_energyRain">
Energy Rain 
</member>
        <member name="F:e_hazardSevere">
Severe Windshear 
</member>
        <member name="F:e_hazardAlert">
Alert Level Hazard Factor 
</member>
        <member name="F:e_hazardModerate">
Moderate Hazard Factor 
</member>
        <member name="F:e_hazardLow">
Low Hazard Factor 
</member>
        <member name="F:e_hazardNone">
Hazard Factor Below Threshold 
</member>
        <member name="T:Csf.Utils.A708FrameUtility.WindShearCodes">
Range Bin Color Codes for Windshear Mode enumerations. 
</member>
        <member name="F:e_turbulence2">
Heavy Turbulence 
</member>
        <member name="F:e_turbulence1">
Medium Turbulence 
</member>
        <member name="F:e_reserved">
Reserved 
</member>
        <member name="F:e_level5">
Reflectivity &gt; Z5 
</member>
        <member name="F:e_level4">
Reflectivity Z4 to Z5 
</member>
        <member name="F:e_level3">
Reflectivity Z2 to Z4 
</member>
        <member name="F:e_level2">
Reflectivity Z2 to Z3 
</member>
        <member name="T:Csf.Utils.A708FrameUtility.ColorCodes">
Range Bin Color Code enumerations. 
</member>
        <member name="M:Csf.Osal.op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.ByteArray)">
Override the stream insertion operator so the contents can be printed.
      * @return The output stream.
      * @param stream Reference to the output stream.
      * @param byte_array ByteArray

</member>
        <member name="F:Csf.Osal.ByteArray.m_usedIndex">
This is NOT the "used index". This is the # of bytes currently used 
         * in the array, or the next FREE byte index.  

</member>
        <member name="F:Csf.Osal.ByteArray.m_size">
This is the current allocated maximum size of this byte array. If you 
         * want the # of bytes currently USED in this byte array, see the deceptively
         * named variable "m_usedIndex".

</member>
        <member name="M:Csf.Osal.ByteArray.op_Equality(Csf.Osal.ByteArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Compare two ByteArray's for equality
        * @return bool result
        * @param rhs Reference to ByteArray to perfrom equality comparision against

</member>
        <member name="M:Csf.Osal.ByteArray.getCustom(System.UInt32,System.UInt32)">
Returns a pointer to the data at byte_offset into the Byte Array.
         * @throws range_error will be thrown if the size plus byte_offset exceeds the reserved size
         * @return UChar pointer to the data
         * @param byte_offset offset into the Byte Array
         * @param size Size of the data to retrieve 

</member>
        <member name="M:Csf.Osal.ByteArray.getType(System.UInt32,Csf.Osal.ValueTypes.Type)">
This function takes a type and creates a bytearray based on the type.
        *     The following exceptions apply:
        *     - strings are counted until the first null terminator
        * @throws runtime_error if type is e_unknown or e_bytearray
        * @return ByteArray
        * @param byte_offset offset into the Byte Array
        * @param type enumerated value for conversion type

</member>
        <member name="M:Csf.Osal.ByteArray.getByteArray(System.UInt32,System.UInt32)">
Attempt to get a ByteArray of size size at byte_offset into the Byte Array.
        * @throws range_error will be thrown if the size plus byte_offset exceeds the reserved size
        * @return ByteArray
        * @param byte_offset offset into the Byte Array
        * @param size Size of the data to retrieve

</member>
        <member name="M:Csf.Osal.ByteArray.getByteArray(System.UInt32)">
Attempt to get a ByteArray at byte_offset into the Byte Array.
        * @throws range_error will be thrown if the size offset exceeds the reserved size
        * @return ByteArray
        * @param byte_offset offset into the Byte Array 

</member>
        <member name="M:Csf.Osal.ByteArray.getString(System.UInt32,System.UInt32)">
Attempt to get a String at byte_offset into the Byte Array.
        *     Will continue util size is reached, a null terminator is encountered
        *     or until it runs out of data (reserved size)
        * @throws range_error will be thrown if the size offset exceeds the reserved size
        * @return String
        * @param byte_offset offset into the Byte Array
        * @param size Size of the data to retrieve

</member>
        <member name="M:Csf.Osal.ByteArray.getString(System.UInt32)">
Attempt to get a String at byte_offset into the Byte Array.
        *     Will continue util a null terminator is encountered
        *     or until it runs out of data (reserved size)
        * @throws range_error will be thrown if the size offset exceeds the reserved size
        * @return String
        * @param byte_offset offset into the Byte Array, defaults to 0

</member>
        <member name="M:Csf.Osal.ByteArray.getFloat64(System.UInt32)">
Attempt to get a Float64 at byte_offset into the Byte Array.
        * @throws range_error will be thrown if the size offset exceeds the reserved size
        * @return Float64 value
        * @param byte_offset offset into the Byte Array, defaults to 0

</member>
        <member name="M:Csf.Osal.ByteArray.getFloat32(System.UInt32)">
Attempt to get a Float32 at byte_offset into the Byte Array.
        * @throws range_error will be thrown if the size offset exceeds the reserved size
        * @return Float32 value
        * @param byte_offset offset into the Byte Array, defaults to 0

</member>
        <member name="M:Csf.Osal.ByteArray.getUInt64(System.UInt32)">
Attempt to get a UInt64 at byte_offset into the Byte Array.
        * @throws range_errorwill be thrown if the size offset exceeds the reserved size
        * @return UInt64 value
        * @param byte_offset offset into the Byte Array, defaults to 0

</member>
        <member name="M:Csf.Osal.ByteArray.getUInt32(System.UInt32)">
Attempt to get a UInt32 at byte_offset into the Byte Array.
        * @throws range_error will be thrown if the size offset exceeds the reserved size
        * @return UInt32 value
        * @param byte_offset offset into the Byte Array, defaults to 0

</member>
        <member name="M:Csf.Osal.ByteArray.getUInt16(System.UInt32)">
Attempt to get a UInt16 at byte_offset into the Byte Array.
        * @throws range_error will be thrown if the size offset exceeds the reserved size 
        * @return UInt16 value
        * @param byte_offset offset into the Byte Array, defaults to 0

</member>
        <member name="M:Csf.Osal.ByteArray.getInt64(System.UInt32)">
Attempt to get a Int64 at byte_offset into the Byte Array.
        * @throws range_error will be thrown if the size offset exceeds the reserved size
        * @return Int64 value
        * @param byte_offset offset into the Byte Array, defaults to 0

</member>
        <member name="M:Csf.Osal.ByteArray.getInt32(System.UInt32)">
Attempt to get a Int32 at byte_offset into the Byte Array.
        * @throws range_error will be thrown if the size offset exceeds the reserved size
        * @return Int32 value
        * @param byte_offset offset into the Byte Array, defaults to 0

</member>
        <member name="M:Csf.Osal.ByteArray.getInt16(System.UInt32)">
Attempt to get a Int16 at byte_offset into the Byte Array.
        * @throws range_error will be thrown if the size offset exceeds the reserved size
        * @return Int16 value
        * @param byte_offset offset into the Byte Array, defaults to 0

</member>
        <member name="M:Csf.Osal.ByteArray.getUChar(System.UInt32)">
Attempt to get a UChar at byte_offset into the Byte Array.
        * @throws range_error will be thrown if the size offset exceeds the reserved size
        * @return UChar value
        * @param byte_offset offset into the Byte Array, defaults to 0 

</member>
        <member name="M:Csf.Osal.ByteArray.getChar(System.UInt32)">
Attempt to get a Char at byte_offset into the Byte Array.
        * @throws range_error will be thrown if the size offset exceeds the reserved size 
        * @return Char value
        * @param byte_offset offset into the Byte Array, defaults to 0

</member>
        <member name="M:Csf.Osal.ByteArray.getBool(System.UInt32)">
Attempt to get a Bool at byte_offset into the Byte Array.
        * @throws range_error will be thrown if the size offset exceeds the reserved size
        * @return Bool value
        * @param byte_offset offset into the Byte Array, defaults to 0

</member>
        <member name="M:Csf.Osal.ByteArray.getCustom(System.UInt32)">
Return a pointer to the data in the Byte Array.
         * @throws range_error will be thrown if the size offset exceeds the reserved size
         * @return UChar pointer to the data

</member>
        <member name="M:Csf.Osal.ByteArray.op_AdditionAssignment(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Add String reference data onto the end of the ByteArray buffer.
         *    If the buffer is not large enough, the buffer is automatically
         *    increased and this reallocates a new buffer at the needed size.
         * @return Ref to the left hand side.
         * @param data String reference data

</member>
        <member name="M:Csf.Osal.ByteArray.op_AdditionAssignment(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Add Null terminated data onto the end of the ByteArray buffer.
         *    If the buffer is not large enough, the buffer is automatically
         *    increased and this reallocates a new buffer at the needed size.
         * @return Ref to the left hand side.
         * @param data Char reference data

</member>
        <member name="M:Csf.Osal.ByteArray.op_AdditionAssignment(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Add a Float64 onto the end of the ByteArray buffer.
         *    If the buffer is not large enough, the buffer is automatically
         *    increased and this reallocates a new buffer at the needed size.
         * @return Ref to the left hand side.
         * @param data Float64 reference data

</member>
        <member name="M:Csf.Osal.ByteArray.op_AdditionAssignment(System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Add a Float32 onto the end of the ByteArray buffer.
         *    If the buffer is not large enough, the buffer is automatically
         *    increased and this reallocates a new buffer at the needed size.
         * @return Ref to the left hand side.
         * @param data Float32 reference data

</member>
        <member name="M:Csf.Osal.ByteArray.op_AdditionAssignment(System.UInt64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Add an UInt64 onto the end of the ByteArray buffer.
         *    If the buffer is not large enough, the buffer is automatically
         *    increased and this reallocates a new buffer at the needed size.
         * @return Ref to the left hand side.
         * @param data UInt64 reference data

</member>
        <member name="M:Csf.Osal.ByteArray.op_AdditionAssignment(System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Add an UInt32 onto the end of the ByteArray buffer.
         *    If the buffer is not large enough, the buffer is automatically
         *    increased and this reallocates a new buffer at the needed size.
         * @return Ref to the left hand side.
         * @param data UInt32 reference data

</member>
        <member name="M:Csf.Osal.ByteArray.op_AdditionAssignment(System.UInt16!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Add an UInt16 onto the end of the ByteArray buffer.
         *    If the buffer is not large enough, the buffer is automatically
         *    increased and this reallocates a new buffer at the needed size.
         * @return Ref to the left hand side.
         * @param data UInt16 reference data

</member>
        <member name="M:Csf.Osal.ByteArray.op_AdditionAssignment(System.Int64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Add an Int64 onto the end of the ByteArray buffer.
         *    If the buffer is not large enough, the buffer is automatically
         *    increased and this reallocates a new buffer at the needed size.
         * @return Ref to the left hand side.
         * @param data Int64 reference data

</member>
        <member name="M:Csf.Osal.ByteArray.op_AdditionAssignment(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Add an Int32 onto the end of the ByteArray buffer.
         *    If the buffer is not large enough, the buffer is automatically
         *    increased and this reallocates a new buffer at the needed size.
         * @return Ref to the left hand side.
         * @param data Int32 reference data

</member>
        <member name="M:Csf.Osal.ByteArray.op_AdditionAssignment(System.Int16!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Add an Int16 onto the end of the ByteArray buffer.
         *    If the buffer is not large enough, the buffer is automatically
         *    increased and this reallocates a new buffer at the needed size.
         * @return Ref to the left hand side.
         * @param data Int16 reference data

</member>
        <member name="M:Csf.Osal.ByteArray.op_AdditionAssignment(System.Byte!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Add an UChar onto the end of the ByteArray buffer.
         *    If the buffer is not large enough, the buffer is automatically
         *    increased and this reallocates a new buffer at the needed size.
         * @return Ref to the left hand side.
         * @param data UChar reference data

</member>
        <member name="M:Csf.Osal.ByteArray.op_AdditionAssignment(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Add a Char onto the end of the ByteArray buffer.
         *    If the buffer is not large enough, the buffer is automatically
         *    increased and this reallocates a new buffer at the needed size.
         * @return Ref to the left hand side.
         * @param data Char reference data

</member>
        <member name="M:Csf.Osal.ByteArray.op_AdditionAssignment(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Add a Bool onto the end of the ByteArray buffer.
         *    If the buffer is not large enough, the buffer is automatically
         *    increased and this reallocates a new buffer at the needed size.
         * @return Ref to the left hand side.
         * @param data Bool reference data

</member>
        <member name="M:Csf.Osal.ByteArray.op_Assign(Csf.Osal.ByteArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy the referenced Byte Array's data to this Byte Array.
        *    Any data previously contained in this Byte Array will be lost
        *    If the buffer is not large enough, the buffer is automatically
        *    increased and this reallocates a new buffer at the needed size.
        * @throws range_error will be thrown if the size+byteoffset exceeds the reserved size
        * @return Ref to the left hand side.
        * @param right Byte Array referenc to use for the copy

</member>
        <member name="M:Csf.Osal.ByteArray.set(System.UInt32!System.Runtime.CompilerServices.IsConst,System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst)">
Copy data into the Byte Array buffer at the given offset.
        * @param byte_offset offset into the Byte Array to copy the data into
        * @param data UChar* to data
        * @param size Size of the data
        * @throws range_error will be thrown if the size+byteoffset exceeds the reserved size 

</member>
        <member name="M:Csf.Osal.ByteArray.add(System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
Add data onto the end of the ByteArray buffer.
         *    If the buffer is not large enough, the buffer is automatically
         *    increased and this reallocates a new buffer at the needed size.
         * @param data UChar* to data
         * @param size Size of the data

</member>
        <member name="M:Csf.Osal.ByteArray.copy(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
Copy data into a Byte Array.
        *     Any data previously contained in the Byte Array will be lost
        * @param data Char* to data
        * @param size Size of the data

</member>
        <member name="M:Csf.Osal.ByteArray.copy(System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
Copy data into a Byte Array.
        *     Any data previously contained in the Byte Array will be lost
        * @param data UChar* to data
        * @param size Size of the data

</member>
        <member name="M:Csf.Osal.ByteArray.reserve(System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Set the reserved size for the Byte Array.
        *     This can either increase or decrease the reserved size.
        *     A reserve size request less than the current usable data will result 
        *     in a truncation of the data.
        *     A reserve size request greater than the current usable data will not effect
        *     the data.
        * @param size Requested reserved size

</member>
        <member name="M:Csf.Osal.ByteArray.setUsedIndex(System.UInt32!System.Runtime.CompilerServices.IsConst)">
Sets the size of the usable data in the Byte Array.  
        * The actual value set is limited to the reserved size of the Byte Array.
        * @param newIndex value to set the m_usedIndex to.

</member>
        <member name="M:Csf.Osal.ByteArray.getSize">
Returns the currently reserved size of the Byte Array.
         * @return Size of the Byte Array

</member>
        <member name="M:Csf.Osal.ByteArray.clear">
Resets contents of byte array to beginning.
         *   Original capacity remains reserved.

</member>
        <member name="M:Csf.Osal.ByteArray.getCharPtr">
Obtain Char* pointer to contents of the Byte Array since. Used
         * getCharPtr() because getBytes() was already used to return unsigned char *.
         * 99% of 3rd party APIs that use bytes use char* not unsigned char *.
         * @return Char* pointer to Byte Array data.

</member>
        <member name="M:Csf.Osal.ByteArray.getBytes">
Obtain pointer to contents of the Byte Array.
         * @return Pointer to Byte Array data

</member>
        <member name="M:Csf.Osal.ByteArray.Dispose">
Defalut Destructor  
</member>
        <member name="M:Csf.Osal.ByteArray.#ctor(System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst)">
Byte Array Custom Type Constructor.
         * @param data UChar* to data
         * @param size Size of the data

</member>
        <member name="M:Csf.Osal.ByteArray.#ctor(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Byte Array String Constructor.
         * @param data String data reference

</member>
        <member name="M:Csf.Osal.ByteArray.#ctor(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Byte Array Float64 Constructor.
         * @param data Float64 data reference

</member>
        <member name="M:Csf.Osal.ByteArray.#ctor(System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Byte Array Float32 Constructor.
         * @param data Float32 data reference

</member>
        <member name="M:Csf.Osal.ByteArray.#ctor(System.UInt64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Byte Array UInt64 Constructor.
         * @param data UInt64 data reference

</member>
        <member name="M:Csf.Osal.ByteArray.#ctor(System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Byte Array UInt32 Constructor.
         * @param data UInt32 data reference

</member>
        <member name="M:Csf.Osal.ByteArray.#ctor(System.UInt16!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Byte Array UInt16 Constructor.
         * @param data UInt16 data reference

</member>
        <member name="M:Csf.Osal.ByteArray.#ctor(System.Int64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Byte Array Int64 Constructor.
         * @param data Int64 data reference

</member>
        <member name="M:Csf.Osal.ByteArray.#ctor(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Byte Array Int32 Constructor.
         * @param data Int32 data reference

</member>
        <member name="M:Csf.Osal.ByteArray.#ctor(System.Int16!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Byte Array Int16 Constructor.
         * @param data Int16 data reference

</member>
        <member name="M:Csf.Osal.ByteArray.#ctor(System.Byte!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Byte Array UChar Constructor.
         * @param data Unsigned char data reference

</member>
        <member name="M:Csf.Osal.ByteArray.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Byte Array Char Constructor.
         * @param data Char data reference

</member>
        <member name="M:Csf.Osal.ByteArray.#ctor(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Byte Array Bool Constructor.
         * @param data Bool data reference

</member>
        <member name="M:Csf.Osal.ByteArray.#ctor(Csf.Osal.ByteArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Byte Array copy Constructor.
         * @param copy Byte Array data reference

</member>
        <member name="M:Csf.Osal.ByteArray.#ctor">
Default Constructor 
</member>
        <member name="T:Csf.Osal.ByteArray">
The Byte Array class provides for the creation, manipulation and conversion of byte arrays  *
</member>
        <member name="F:Csf.Utils.A429Word.m_val">
ARINC 429 word 
</member>
        <member name="M:Csf.Utils.A429Word.getVal">
Get the value of the 429 word.
         * @return the value of the 429 word.

</member>
        <member name="M:Csf.Utils.A429Word.setVal(System.UInt32)">
Set the value of the 429 word.
         * @param val The value to set.

</member>
        <member name="M:Csf.Utils.A429Word.bcdToBnr(System.UInt32)">
Convert number from BCD format
         * @return Converted value
         * @param  value       Value in BCD format

</member>
        <member name="M:Csf.Utils.A429Word.bnrToBcd(System.UInt32)">
Convert number to BCD format
         * @return Value in BCD format
         * @param  value       Value to be converted

</member>
        <member name="M:Csf.Utils.A429Word.setBits2CHelper(System.UInt32,System.UInt32,System.Int64)">
Helper function for setBits2C
         *
         * @return Value for success
         * @param  startBit    The start bit
         * @param  numBits     Number of bits
         * @param  scaledValue Scaled integer value

</member>
        <member name="M:Csf.Utils.A429Word.calculateParity(Csf.Utils.A429Word.ParityValues)">
Calculate parity based on contents of current word
         * @return boolean Parity value

</member>
        <member name="M:Csf.Utils.A429Word.getParity">
Get parity value
         * @return Parity value

</member>
        <member name="M:Csf.Utils.A429Word.setParity(System.Boolean)">
Set parity bit to given value
         * @param  value    Parity

</member>
        <member name="M:Csf.Utils.A429Word.getSSM">
Get SSM value
         * @return SSM value

</member>
        <member name="M:Csf.Utils.A429Word.setSSM(System.UInt32)">
Set SSM to given value
         * @param  value    SSM value

</member>
        <member name="M:Csf.Utils.A429Word.getSDI">
Get SDI value
         * @return SDI value

</member>
        <member name="M:Csf.Utils.A429Word.setSDI(System.UInt32)">
Set SDI to given value
         * @param  value    SDI value

</member>
        <member name="M:Csf.Utils.A429Word.reverseLabelBits(System.UInt32)">
Reverses the 8 bits in the label
         * @return Word value
         * @param value Word value

</member>
        <member name="M:Csf.Utils.A429Word.getLabel">
Get label value
         * @return Label value

</member>
        <member name="M:Csf.Utils.A429Word.setLabel(Csf.Osal.String)">
Set label number to given string value
         * @return true for success, false if out of bounds
         * @pre    value contains an Octal representation of the ARINC 429 label;
         *         value[0] == '0'; strlen(value) == 4
         *
         * @param  value    Label value

</member>
        <member name="M:Csf.Utils.A429Word.setLabel(System.UInt32)">
Set label number to given value.
         * @return true for success, false if out of bounds
         * @param  value    Label value (ARINC 429 standard is octal)

</member>
        <member name="M:Csf.Utils.A429Word.getWordSpec">
Get ARINC 429 word value with the label order defined by the ARINC specification
         * @return Word value

</member>
        <member name="M:Csf.Utils.A429Word.getWord">
Get ARINC 429 word value
         * @return Word value

</member>
        <member name="M:Csf.Utils.A429Word.setWordSpec(System.UInt32)">
Set ARINC 429 word to given value with the label
         * order as defined by the ARINC specification
         * @param value Word value

</member>
        <member name="M:Csf.Utils.A429Word.setWord(System.UInt32)">
Set ARINC 429 word to given value
         * @param  value    Word value

</member>
        <member name="M:Csf.Utils.A429Word.Dispose">
Destructor.

</member>
        <member name="M:Csf.Utils.A429Word.#ctor">
Basic constructor for the A429 Word class.

</member>
        <member name="F:e_oddParity">
Odd Parity 
</member>
        <member name="F:e_evenParity">
Even Parity 
</member>
        <member name="T:Csf.Utils.A429Word.ParityValues">
Enum for specifying what kind of parity the A429Word calculates 
</member>
        <member name="M:Csf.Osal.Math.min(System.Double!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst)">
Returns the lesser of the given two values
             *
             * @return Float64     Lesser of Value1 and Value2
             * @param  value1      Value1
             * @param  value2      Value2

</member>
        <member name="M:Csf.Osal.Math.min(System.Int64!System.Runtime.CompilerServices.IsConst,System.Int64!System.Runtime.CompilerServices.IsConst)">
Returns the lesser of the given two values
             *
             * @return Int64       Lesser of Value1 and Value2
             * @param  value1      Value1
             * @param  value2      Value2

</member>
        <member name="M:Csf.Osal.Math.max(System.Double!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst)">
Returns the greater of the given two values
             *
             * @return Float64     Greater of Value1 and Value2
             * @param  value1      Value1
             * @param  value2      Value2

</member>
        <member name="M:Csf.Osal.Math.max(System.Int64!System.Runtime.CompilerServices.IsConst,System.Int64!System.Runtime.CompilerServices.IsConst)">
Returns the greater of the given two values
             *
             * @return Int64       Greater of Value1 and Value2
             * @param  value1      Value1
             * @param  value2      Value2

</member>
        <member name="M:Csf.Osal.Math.isPositive(System.Double!System.Runtime.CompilerServices.IsConst)">
Returns true if given value is positive, and false otherwise.
             *   Note that 0 returns false.
             *
             * @return Bool        true or false
             * @param  value       Value

</member>
        <member name="M:Csf.Osal.Math.sign(System.Double!System.Runtime.CompilerServices.IsConst)">
Returns -1 if given value is negative, and 1 otherwise.
             *
             * @return Float64     -1 or 1
             * @param  value       Value

</member>
        <member name="M:Csf.Osal.Math.limitNormalized(System.Double!System.Runtime.CompilerServices.IsConst)">
Provides a in-bounds normalized value if given value is 
             *         out-of-bounds
             *
             *         Returns given value if it is within 0.0 and 1.0 inclusive.
             *         Otherwise, if value is lower than 0.0, 0.0 is returned. 
             *         Similarly, if the value is greater than 1.0, 1.0 is returned.
             *
             * @return Float64     In-bounds value between 0.0 and 1.0 inclusive
             * @param  value       Value

</member>
        <member name="M:Csf.Osal.Math.limit(System.Double!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst)">
Provides a in-bounds value if given value is out-of-bounds
             *
             *         Returns given value if it is within the specified bounds. 
             *         Otherwise, if value is lower than the lower bound, the lower
             *         bound is returned. Similarly, if the value is greater than the
             *         upper bound, the upper bound is returned.
             *
             * @return Float64     In-bounds value
             * @param  lowerLimit  Lower bound
             * @param  upperLimit  Upper bound
             * @param  value       Value

</member>
        <member name="M:Csf.Osal.Math.limit(System.Int64!System.Runtime.CompilerServices.IsConst,System.Int64!System.Runtime.CompilerServices.IsConst,System.Int64!System.Runtime.CompilerServices.IsConst)">
Provides a in-bounds value if given value is out-of-bounds
             *
             *         Returns given value if it is within the specified bounds. 
             *         Otherwise, if value is lower than the lower bound, the lower
             *         bound is returned. Similarly, if the value is greater than the
             *         upper bound, the upper bound is returned.
             *
             * @return Int64       In-bounds value
             * @param  lowerLimit  Lower bound
             * @param  upperLimit  Upper bound
             * @param  value       Value

</member>
        <member name="M:Csf.Osal.Math.modf(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Extract signed integal and fractional values from a floating point number
            *     both parts will have the same sign as x
            * @return fractional value of the floating point number
            * @param x       floating point number to break into parts
            * @param intpart pointer to an object where the intergral part of x is stored

</member>
        <member name="M:Csf.Osal.Math.modf(System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Extract signed integal and fractional values from a floating point number
            *     both parts will have the same sign as x
            * @return fractional value of the floating point number
            * @param x       floating point number to break into parts
            * @param intpart pointer to an object where the intergral part of x is stored

</member>
        <member name="M:Csf.Osal.Math.pow(System.Double!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst)">
Return base raised to the power exponent
            * @return value raised to the power of to_the_value
            * @param value        base value
            * @param to_the_value exponent value

</member>
        <member name="M:Csf.Osal.Math.pow(System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst)">
Return base raised to the power exponent
            * @return value raised to the power of to_the_value
            * @param value        base value
            * @param to_the_value exponent value

</member>
        <member name="M:Csf.Osal.Math.pow(System.Int64!System.Runtime.CompilerServices.IsConst,System.Int64!System.Runtime.CompilerServices.IsConst)">
Return base raised to the power exponent
            * @return value raised to the power of to_the_value
            * @param value        base value
            * @param to_the_value exponent value

</member>
        <member name="M:Csf.Osal.Math.pow(System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst)">
Return base raised to the power exponent
            * @return value raised to the power of to_the_value
            * @param value        base value
            * @param to_the_value exponent value

</member>
        <member name="M:Csf.Osal.Math.pow(System.Int16!System.Runtime.CompilerServices.IsConst,System.Int16!System.Runtime.CompilerServices.IsConst)">
Return base raised to the power exponent
            * @return value raised to the power of to_the_value
            * @param value        base value
            * @param to_the_value exponent value

</member>
        <member name="M:Csf.Osal.Math.pow(System.UInt64!System.Runtime.CompilerServices.IsConst,System.UInt64!System.Runtime.CompilerServices.IsConst)">
Return base raised to the power exponent
            * @return value raised to the power of to_the_value
            * @param value        base value
            * @param to_the_value exponent value

</member>
        <member name="M:Csf.Osal.Math.pow(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst)">
Return base raised to the power exponent
            * @return value raised to the power of to_the_value
            * @param value        base value
            * @param to_the_value exponent value

</member>
        <member name="M:Csf.Osal.Math.pow(System.UInt16!System.Runtime.CompilerServices.IsConst,System.UInt16!System.Runtime.CompilerServices.IsConst)">
Return base raised to the power exponent
            * @return value raised to the power of to_the_value
            * @param value        base value
            * @param to_the_value exponent value

</member>
        <member name="M:Csf.Osal.Math.log(System.Double!System.Runtime.CompilerServices.IsConst)">
base-e logarithmic function, inverse of the natural exponential function
            * @return natual logarithm of value
            * @param value whose logarithm is calculated

</member>
        <member name="M:Csf.Osal.Math.log(System.Single!System.Runtime.CompilerServices.IsConst)">
base-e logarithmic function, inverse of the natural exponential function
            * @return natual logarithm of value
            * @param value whose logarithm is calculated

</member>
        <member name="M:Csf.Osal.Math.exp(System.Double!System.Runtime.CompilerServices.IsConst)">
base-e exponential function, which is e raised to the power of x
             * @return e raised to the power of value 
             * @param  value of the exponent

</member>
        <member name="M:Csf.Osal.Math.exp(System.Single!System.Runtime.CompilerServices.IsConst)">
base-e exponential function, which is e raised to the power of x
             * @return e raised to the power of value 
             * @param  value of the exponent

</member>
        <member name="M:Csf.Osal.Math.sqrt(System.Double!System.Runtime.CompilerServices.IsConst)">
Square root of value
             * @return square root of value 
             * @param value whose square root is computed

</member>
        <member name="M:Csf.Osal.Math.sqrt(System.Single!System.Runtime.CompilerServices.IsConst)">
Square root of value
             * @return square root of value 
             * @param value whose square root is computed

</member>
        <member name="M:Csf.Osal.Math.square(System.Double!System.Runtime.CompilerServices.IsConst)">
Square of value (value*value)
             * @return square product of value
             * @param value to square

</member>
        <member name="M:Csf.Osal.Math.square(System.Single!System.Runtime.CompilerServices.IsConst)">
Square of value (value*value)
             * @return square product of value
             * @param value to square

</member>
        <member name="M:Csf.Osal.Math.square(System.Int64!System.Runtime.CompilerServices.IsConst)">
Square of value (value*value)
             * @return square product of value
             * @param value to square

</member>
        <member name="M:Csf.Osal.Math.square(System.Int32!System.Runtime.CompilerServices.IsConst)">
Square of value (value*value)
             * @return square product of value
             * @param value to square

</member>
        <member name="M:Csf.Osal.Math.square(System.Int16!System.Runtime.CompilerServices.IsConst)">
Square of value (value*value)
             * @return square product of value
             * @param value to square

</member>
        <member name="M:Csf.Osal.Math.round(System.Double!System.Runtime.CompilerServices.IsConst)">
Round to nearest integral value with halfway cases rounded away from zero.
             * @return nearest integral value
             * @param value number to be rounded.

</member>
        <member name="M:Csf.Osal.Math.round(System.Single!System.Runtime.CompilerServices.IsConst)">
Round to nearest integral value with halfway cases rounded away from zero.
             * @return nearest integral value
             * @param value number to be rounded.

</member>
        <member name="M:Csf.Osal.Math.floor(System.Double!System.Runtime.CompilerServices.IsConst)">
Round value down
             * @return largest integral value that is not greater than value
             * @param  value to round down

</member>
        <member name="M:Csf.Osal.Math.ceil(System.Double!System.Runtime.CompilerServices.IsConst)">
Round value up
             * @return smallest integral value that is not less than value
             * @param  value to round up

</member>
        <member name="M:Csf.Osal.Math.atan2(System.Double!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst)">
Return arc tangent of y/x
             *   uses the signs of the two arguments to determine the quadrant of the result
             *
             * @return principle arc tangent of y/x in the interval [-PI, PI] radians
             * @param y value representing the proportion of the y-coordinate
             * @param x value representing the proportion of the x-coordinate

</member>
        <member name="M:Csf.Osal.Math.atan(System.Double!System.Runtime.CompilerServices.IsConst)">
Return arc tangent of an input value
             * @return principle arc tangent of value in the interval [-PI/2, PI/2] radians
             * @param value to use for calculates

</member>
        <member name="M:Csf.Osal.Math.acos(System.Double!System.Runtime.CompilerServices.IsConst)">
Return arc cosine of an input value
             * @return principle arc cosine of value in the interval [0, PI] radians
             * @param value in the interval [-1,+1]

</member>
        <member name="M:Csf.Osal.Math.asin(System.Double!System.Runtime.CompilerServices.IsConst)">
Return arc sin of an input value
             * @return principle arc sin of value in the interval [-PI/2, PI/2] radians
             * @param value in the interval [-1,+1]

</member>
        <member name="M:Csf.Osal.Math.tan(System.Double!System.Runtime.CompilerServices.IsConst)">
Return the tangent of an angle in radians
             * @return tangent of value in radians
             * @param value represents an angle in radians

</member>
        <member name="M:Csf.Osal.Math.cos(System.Double!System.Runtime.CompilerServices.IsConst)">
Return the cosine of an angle in radians
             * @return cosine of value in radians
             * @param value represents an angle in radians

</member>
        <member name="M:Csf.Osal.Math.sin(System.Double!System.Runtime.CompilerServices.IsConst)">
Return the sine of an angle in radians
             * @return sin of value in radians
             * @param value represents an angle in radians

</member>
        <member name="M:Csf.Osal.Math.abs(System.Double!System.Runtime.CompilerServices.IsConst)">
Return absolute value
             * @return Absolute value of the input
             * @param value used for calculations

</member>
        <member name="M:Csf.Osal.Math.abs(System.Single!System.Runtime.CompilerServices.IsConst)">
Return absolute value
             * @return Absolute value of the input
             * @param value number whose absolute value is returned

</member>
        <member name="M:Csf.Osal.Math.abs(System.Int64!System.Runtime.CompilerServices.IsConst)">
Return absolute value
             * @return Absolute value of the input
             * @param value number whose absolute value is returned

</member>
        <member name="M:Csf.Osal.Math.abs(System.Int32!System.Runtime.CompilerServices.IsConst)">
Return absolute value
             * @return Absolute value of the input
             * @param value number whose absolute value is returned

</member>
        <member name="M:Csf.Osal.Math.abs(System.Int16!System.Runtime.CompilerServices.IsConst)">
Return absolute value
             * @return Absolute value of the input
             * @param value number whose absolute value is returned

</member>
        <member name="M:Csf.Osal.Math.abs(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst)">
Return absolute value
             * @return Absolute value of the input
             * @param value number whose absolute value is returned

</member>
        <member name="F:Csf.Osal.Math.PI">
OS-defined constant for PI. 
</member>
        <member name="T:Csf.Osal.Math">
The Math class provides standard math functions  *
</member>
        <member name="F:Csf.Osal.Threading.Thread.m_pimpl">
Pointer to the Private Implementation of the Thread class. 
</member>
        <member name="T:Csf.Osal.Threading.Thread.ThreadPimpl">
Forward declaration of the Private Implementation of the
            * Thread class. The Pimpl idiom allows for Operating
            * System specific implementations to be hidden from the
            * client to this library.

</member>
        <member name="F:Csf.Osal.Threading.Thread.m_catchUnhandled">
Indicates whether the thread entry point will catch any thrown
            * exceptions that are unhandled within the thread function.

</member>
        <member name="M:Csf.Osal.Threading.Thread.op_Assign(Csf.Osal.Threading.Thread!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment operator (disabled).
            * @return A reference to this instance.
            * @param r The thread to copy.

</member>
        <member name="M:Csf.Osal.Threading.Thread.#ctor(Csf.Osal.Threading.Thread!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy Ctor (disabled). 
            * @param copy The thread to copy.

</member>
        <member name="F:Csf.Osal.Threading.Thread.s_cpuScheduler">
CPU scheduler object used to set/get discipline and priority. 
</member>
        <member name="M:Csf.Osal.Threading.Thread.execute">
Entry point of thread. This should be overriden by child classes.
            * @throws Throws runtime_error is not overriden by the child class.

</member>
        <member name="M:Csf.Osal.Threading.Thread.create(=FUNC:System.Void*(System.Void*),System.Void*,System.Int32!System.Runtime.CompilerServices.IsConst,System.UInt64!System.Runtime.CompilerServices.IsConst)">
Create a detatched thread.
            * This is a quick and dirty method to create a thread using a 
            * function pointer without having to create an instance of the thread class.
            * Note that you will need to implement your own mechanics for detecting when
            * the thread has finished.
            * @throws Throws runtime_error on failure.
            * @param threadFunction A function pointer to use as the thread entry point.
            * @param threadFunctionArg The argument to pass into the function (Can be NULL).
            * @param priorityOffset The thread priority offset.
            * @param affinityMask The mask which defines which CPUs the thread can run on.

</member>
        <member name="M:Csf.Osal.Threading.Thread.setCurrentThreadAffinity(System.UInt64)">
Sets the cpu affinity of the calling thread.
            * This is used to set the affinity of threads that were not created using the Thread class.
            * @throws Throws runtime_error on failure.
            * @param affinityMask The affinityMask which defines which CPUs the thread can run on.

</member>
        <member name="M:Csf.Osal.Threading.Thread.getCurrentThreadPriorityOffset">
Gets the priority offset of the calling thread.
            * This is used to get the priority of threads that were not created using the Thread class.
            * @throws Throws runtime_error on failure.
            * @return The priority offset of the current thread.

</member>
        <member name="M:Csf.Osal.Threading.Thread.setCurrentThreadPriorityOffset(System.Int32!System.Runtime.CompilerServices.IsConst)">
Sets the priority of the calling thread to the maximum priority minus this offset.
            * This is used to set the priority of threads that were not created using the Thread class.
            * In Linux, for a thread of scheduling policy SCHED_OTHER or SCHED_IDLE, it sets 
            * the nice value corresponding to the priorityOffset.
            * In Linux, for a thread of scheduling policy SCHED_OTHER or SCHED_IDLE, lower values of 
            * priorityOffset correspond to the higher thread priorities (lower nice values).
            * @throws Thows range_error if priorityOffset is negative.  Throws runtime_error on all other failures.
            * @param priorityOffset The new offset of the thread.

</member>
        <member name="M:Csf.Osal.Threading.Thread.setRealTimeEnabled(System.Boolean!System.Runtime.CompilerServices.IsConst)">
Enable or disable the realtime scheduling policy for the calling thread.
            * @throws Throws on any error other than privilege-related errors.
            * @return 0 if success; -1 if the caller doesn't have appropriate privileges to set the 
            * REALTIME base process priority class on Windows or the SCHED_FIFO scheduling policy on Linux.
            * Throws exceptios for other errors.
            * @param enabled true to enable, false to disable. 
            * If true, on Linux set the calling thread's scheduling policy to SCHED_FIFO, or on Windows
            * set the calling process' base priority class to REALTIME. 
            * If false, on Linux set the calling thread's scheduling policy to SCHED_OTHER, or on Windows
            * set the calling process' base priority class to NORMAL_PRIORITY_CLASS
            * NOTE: On Linux, the scheduling policy can be set per thread, but on Windows, it is the base priority
            * class that is set for the entire process which affects all threads.

</member>
        <member name="M:Csf.Osal.Threading.Thread.cancel">
Cancels the execution of a thread. 
            * Warning: This should only be used if the thread is deadlocked. This
            * will not free up resources that were allocated in the thread. 
            * @throws  Throws runtime_error on failure

</member>
        <member name="M:Csf.Osal.Threading.Thread.join">
Allows the calling process to join with the thread. 
</member>
        <member name="M:Csf.Osal.Threading.Thread.resume">
Resume the thread if it's suspended. It has no effect if the thread has completed. 
</member>
        <member name="M:Csf.Osal.Threading.Thread.waitUntilStarted(System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst)">
Wait until the thread has started execution or until timeout is reached.
            * resume() will be called to ensure that the thread is not in a suspended state.
            * @return True if the thread has started executing, false if timed out.
            * @param timeout The amount of time in milliseconds to wait before giving up. -1 means wait forever.
            * @param period The amount of time in milliseconds to sleep between checks to see if the thread started.

</member>
        <member name="M:Csf.Osal.Threading.Thread.getStarted">
Returns true if the thread has started executing, False otherwise.
            * @return Returns true if the thread has started executing, False otherwise.

</member>
        <member name="M:Csf.Osal.Threading.Thread.getAffinity">
Gets the CPU affinity of the thread.
            * @throws Throws runtime_error on failure
            * @return The CPU affinity of the thread.

</member>
        <member name="M:Csf.Osal.Threading.Thread.setAffinity(System.UInt64)">
Sets the cpu affinity of the thread.
            * @throws Throws runtime_error on failure
            * @param affinityMask The mask which defines which CPUs the thread can run on.

</member>
        <member name="M:Csf.Osal.Threading.Thread.getPriorityOffset">
Get the current priority of this thread.
            * @return The current thread priority.

</member>
        <member name="M:Csf.Osal.Threading.Thread.getCatchUnhandledExceptions">
Get the whether the thread will catch any exceptions that are unhandled within thread processing.
            * @return Whether unhandled exceptiosn are caught.

</member>
        <member name="M:Csf.Osal.Threading.Thread.setCatchUnhandledExceptions(System.Boolean!System.Runtime.CompilerServices.IsConst)">
Sets the thread to not catch any unhandled exceptions that leak out of the thread.
            * If these are left uncaught, they will ripple up to std::terminate and kill the entire process.
            * If caught, only the thread that threw will be terminated, while the rest of the process will continue.
            * @param catchUnhandled Set to false to disable catching unhandled exceptions.

</member>
        <member name="M:Csf.Osal.Threading.Thread.setPriorityOffset(System.Int32!System.Runtime.CompilerServices.IsConst)">
Sets the priority of this thread to the maximum priority appropriate for the
            * scheduling policy, minus the priority offset.
            * In Linux, for the real time scheduling policies SCHED_FIFO and SCHED_RR, the priority
            * must be 1-99, so priority offset 0 maps to 99, 1 maps to 98, ... 98 maps to 1.
            * while for the non-realtime policies SCHED_OTHER, SCHED_BATCH, 
            * SCHED_IDLE, the priority must always be 0, so the priority offset is 0. 
            * In Windows, the priority offset must be 0-6.
            * 0 always maps to the highest priority, 1 to the next highest, and so on.
            * @throw range_error if priorityOffset is out of range as follows:
            * - Linux SCHED_FIFO, SCHED_RT: 0-98 (maps to RT static priorities 99-1)
            * - Linux SCHED_OTHER, SCHED_BATCH, SCHED_IDLE: 0 (maps to static priority 0)
            * - Windows: 0-6 (map to THREAD_PRIORITY_TIME_CRITICAL to THREAD_PRIORITY_IDLE).
            * @throws Throws runtime_error on all other failures.
            * @param priorityOffset The priority offset of the thread. 0 is the highest priority
            * available to the current scheduling discipline.

</member>
        <member name="M:Csf.Osal.Threading.Thread.getOsThreadId">
Returns the operating system thread id 
            * @return The system thread id.

</member>
        <member name="M:Csf.Osal.Threading.Thread.getName">
Accessor to get the name of the thread. 
            * @return The name of the thread.

</member>
        <member name="M:Csf.Osal.Threading.Thread.Dispose">
Dtor which cleans up the class and terminates
            * the thread if it's still active.

</member>
        <member name="M:Csf.Osal.Threading.Thread.#ctor(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,=FUNC:System.Void*(System.Void*),System.Void*,System.Int32!System.Runtime.CompilerServices.IsConst,System.UInt64!System.Runtime.CompilerServices.IsConst)">
Ctor.
            * @throws Throws runtime_error on failure
            * @param name The name to assign the thread.  This will be truncated to 15 characters.
            * @param threadFunction A function pointer to use as the thread entry point.
            *        If set to 0, the thread will use the built in execute() method
            *        As the thread entry point. 0 should only be used for inheriting
            *        classes that have provided an execute method.
            * @param threadFunctionArg The argument to pass into the function (Can be NULL).
            * @param priorityOffset The thread priority offset. -1 to use default priority.
            * @param affinityMask A mask representing the CPUs that the thread can run on.

</member>
        <member name="M:Csf.Osal.Threading.Thread.#ctor(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,=FUNC:System.Void*(System.Void*),System.Void*,System.Int32!System.Runtime.CompilerServices.IsConst,System.UInt64!System.Runtime.CompilerServices.IsConst)">
@deprecated Ctor.
            * @throws Throws runtime_error on failure
            * @param name The name to assign the thread.  This will be truncated to 15 characters.
            * @param startSuspended Always true to start the thread in suspended state.
            *        Since it starts suspended, you will need to call resume to begin thread execution.
            * @param threadFunction A function pointer to use as the thread entry point.
            *        If set to 0, the thread will use the built in execute() method
            *        As the thread entry point. 0 should only be used for inheriting
            *        classes that have provided an execute method.
            * @param threadFunctionArg The argument to pass into the function (Can be NULL).
            * @param priorityOffset The thread priority offset. -1 to use default priority.
            * @param affinityMask A mask representing the CPUs that the thread can run on.

</member>
        <member name="D:Csf.Osal.Threading.Thread.ThreadFunction">
Type definition for a function pointer to use as a thread. 
</member>
        <member name="F:Csf.Osal.Threading.Thread.sc_defaultPriority">
The default priority for threads. 
</member>
        <member name="F:Csf.Osal.Threading.Thread.sc_noCpuAffinity">
Type to indicate that no cpu affinity is requested.
            * For use with the setAffinity() and setCurrentThreadAffinity() method.

</member>
        <member name="T:Csf.Osal.Threading.Thread">
Provides an API to create and control a thread.
         *
         * This class provides 3 different ways to create a thread.
         * Option 1: Make an instance of the Thread class and provide
         *           a thread function to use for the entry point.
         * Option 2: Inherit from the Thread class and override execute().
         * Option 3: Use the static create() method and provide a thread function.
         *
         * Options 1 and 2 create a joinable thread with mechanisms to detect
         * startup and modifiy it's parameters. These options also provide the
         * ability to start in a suspended mode.
         * Option 3 creates a detached thread. You will have to create your own
         * mechanisims to detect startup and to join when the thread is finished.
         *
         * Additionally there are static methods to set the priority and affinity
         * of any calling thread.

</member>
        <member name="F:Csf.Osal.CpuScheduler.m_pimpl">
Pointer to the Private Implementation of the CpuScheduler class. 
</member>
        <member name="T:Csf.Osal.CpuScheduler.CpuSchedulerPimpl">
Forward declaration of the Private Implementation of the CpuScheduler class. 
</member>
        <member name="M:Csf.Osal.CpuScheduler.getCurrentThreadPriority">
Get the priority of the current thread.
         * @return The priority of the current thread. This is the same value that is passed in
         * by setCurrentThreadPriority() so interpret it in the same way (0 = max priority, 1 =
         * next lower, etc.
         * @throws runtime_error on failure.

</member>
        <member name="M:Csf.Osal.CpuScheduler.setCurrentThreadPriority(System.Int32!System.Runtime.CompilerServices.IsConst)">
Set the priority of the current thread. 0 = highest in the system, 1 is next 
         * lower, etc. The simplest way to use this without thinking about it is to keep the priority
         * in [0,6] and understand that 0 is the highest priority and 6 is the lowest. Read on for
         * OS-specific information.
         * On Windows this sets the thread priority
         * which acts as an offset based on the current process priority class, 
         * adding -15, -2, -1, 0, 1, 2, 15 to the priority. 15 is the highest priority offset and
         * will be used if 0 is passed in, 2 is used if 1 is passed in and so on -15 is used if 6 is passed in.
         * These are the Windows thread priorities, as indexed in the pimpl.
         * - 0 : THREAD_PRIORITY_TIME_CRITICAL
         * - 1 : THREAD_PRIORITY_HIGHEST
         * - 2 : THREAD_PRIORITY_ABOVE_NORMAL
         * - 3 : THREAD_PRIORITY_NORMAL
         * - 4 : THREAD_PRIORITY_BELOW_NORMAL
         * - 5 : THREAD_PRIORITY_LOWEST
         * - 6 : THREAD_PRIORITY_IDLE
         * On Linux this directly sets the priority of a RT thread if the scheduling policy for the
         * thread is SCHED_RR or SCHED_FIFO 
         * otherwise for the SCHED_OTHER, SCHED_BATCH, SCHED_IDLE policies this must be 0. 
         * To write code that works on both platforms, limit the priority to values in [0,6].
         * If you are targeting Windows use [0,6].
         * If you are targeting the Linux RT schedulers use [0, 98] which maps to [99,1]. 
         * If you are targeting the Linux non-RT schedulers always use 0.
         * @throws range_error for invalid priority index
         * @throws runtime_error on all other failures
         * @param priority The priority offset of the thread. Offset 0 is the highest priority,
         * offset 1 is the next lower, and so on.

</member>
        <member name="M:Csf.Osal.CpuScheduler.getCpuSchedulingPolicy">
Get the CPU scheduling policy for this process.
         * @throws runtime_error on failure.
         * @return Scheduling policy. See docs for setCpuSchedulingPolicy().

</member>
        <member name="M:Csf.Osal.CpuScheduler.setCpuSchedulingPolicy(System.Int32!System.Runtime.CompilerServices.IsConst)">
Set the scheduling policy. The simplest way to use this without thinking
         * is to select 0 for real time performance (if you have admin privileges) and
         * 2 for non-real time performance. Read on for OS-specific details.
         * On Windows this sets the process base priority class of the process that owns the
         * * calling thread immediately as follows:
         * - 0 : REALTIME_PRIORITY_CLASS, (must run as admin to use this)
         * - 1 : HIGH_PRIORITY_CLASS,
         * - 2 : ABOVE_NORMAL_PRIORITY_CLASS,
         * - 3 : NORMAL_PRIORITY_CLASS,
         * - 4 : BELOW_NORMAL_PRIORITY_CLASS,
         * - 5 : IDLE_PRIORITY_CLASS
         * On Linux this sets the scheduling policy of the calling thread based on the values below, and sets
         * the thread priority to the lowest priority for that policy. Therefore on Linux
         * when using the RT scheduling policies (SCHED_FIFO, SCHED_RR), if you don't want to run
         * at the lowest priority set the priority with setCurrentThreadPriority() right
         * after setting the policy with this function:
         * - 0 : SCHED_FIFO (defaults to thread priority 1) (must be root or set security limits to use)
         * - 1 : SCHED_RR (defaults to thread priority 1) (must be root or set security limits to use)
         * - 2 : SCHED_OTHER (defaults to thread priority 0 - only valid choice)
         * - 3 : SCHED_BATCH (defaults to thread priority 0 - only valid choice)
         * - 4 : SCHED_IDLE (defaults to thread priority 0 - only valid choice)
         * @throws range_error for invalid policy index
         * @throws runtime_error on all other failures
         * @param policy Desired scheduling policy.

</member>
        <member name="M:Csf.Osal.CpuScheduler.Dispose">
Destructor. 
</member>
        <member name="M:Csf.Osal.CpuScheduler.#ctor">
Constructor. 
</member>
        <member name="F:Csf.Osal.CpuScheduler.sc_threadPriorityIdle">
THREAD_PRIORITY_IDLE 
</member>
        <member name="F:Csf.Osal.CpuScheduler.sc_threadPriorityLowest">
THREAD_PRIORITY_LOWEST  
</member>
        <member name="F:Csf.Osal.CpuScheduler.sc_threadPriorityBelowNormal">
THREAD_PRIORITY_BELOW_NORMAL 
</member>
        <member name="F:Csf.Osal.CpuScheduler.sc_threadPriorityNormal">
THREAD_PRIORITY_NORMAL 
</member>
        <member name="F:Csf.Osal.CpuScheduler.sc_threadPriorityAboveNormal">
THREAD_PRIORITY_ABOVE_NORMAL 
</member>
        <member name="F:Csf.Osal.CpuScheduler.sc_threadPriorityHighest">
THREAD_PRIORITY_HIGHEST 
</member>
        <member name="F:Csf.Osal.CpuScheduler.sc_threadPriorityTimeCritical">
THREAD_PRIORITY_TIME_CRITICAL 
</member>
        <member name="F:Csf.Osal.CpuScheduler.sc_schedIdle">
SCHED_IDLE 
</member>
        <member name="F:Csf.Osal.CpuScheduler.sc_schedBatch">
SCHED_BATCH 
</member>
        <member name="F:Csf.Osal.CpuScheduler.sc_schedOther">
SCHED_OTHER 
</member>
        <member name="F:Csf.Osal.CpuScheduler.sc_schedRr">
SCHED_RR 
</member>
        <member name="F:Csf.Osal.CpuScheduler.sc_schedFifo">
SCHED_FIFO 
</member>
        <member name="F:Csf.Osal.CpuScheduler.sc_idlePriorityClass">
IDLE_PRIORITY_CLASS 
</member>
        <member name="F:Csf.Osal.CpuScheduler.sc_belowNormalPriorityClass">
BELOW_NORMAL_PRIORITY_CLASS 
</member>
        <member name="F:Csf.Osal.CpuScheduler.sc_normalPriorityClass">
NORMAL_PRIORITY_CLASS 
</member>
        <member name="F:Csf.Osal.CpuScheduler.sc_aboveNormalPriorityClass">
ABOVE_NORMAL_PRIORITY_CLASS 
</member>
        <member name="F:Csf.Osal.CpuScheduler.sc_highPriorityClass">
HIGH_PRIORITY_CLASS 
</member>
        <member name="F:Csf.Osal.CpuScheduler.sc_realtimePriorityClass">
REALTIME_PRIORITY_CLASS 
</member>
        <member name="T:Csf.Osal.CpuScheduler">
CPU Scheduler class. This class allows the calling thread
      * to set and get the scheduling policy and thread priority. The behavior is
      * OS and scheduling policy dependent. The methods describe the behavior on
      * Windows and Linux and give cross platform values that work on both OSs.

</member>
        <member name="F:Csf.Osal.Threading.ReadWriteLock.m_pimpl">
Pointer to the private implementation of the ReadWriteLock. 
</member>
        <member name="T:Csf.Osal.Threading.ReadWriteLock.ReadWriteLockPimpl">
Forward Declaration of the Private Implementation of the
             *  ReadWriteLock Struct.  The Pimpl idiom allows for Operating 
             *  System specific implementations to be hidden from the 
             *  client to this library.  

</member>
        <member name="M:Csf.Osal.Threading.ReadWriteLock.op_Assign(Csf.Osal.Threading.ReadWriteLock!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment operator. This method should not be called.
             * @param rhs Right hand side of the operator.

</member>
        <member name="M:Csf.Osal.Threading.ReadWriteLock.#ctor(Csf.Osal.Threading.ReadWriteLock!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy Constructor for ReadWriteLock. This method should not be called.
             * @param rhs The instance to copy.

</member>
        <member name="M:Csf.Osal.Threading.ReadWriteLock.unlock">
Provides a mechanism to release a read/write lock

</member>
        <member name="M:Csf.Osal.Threading.ReadWriteLock.lockWrite">
Provides a mechanism to obtain an exclusive write lock

</member>
        <member name="M:Csf.Osal.Threading.ReadWriteLock.lockRead">
Provides a mechanism to obtain a shared read lock. 
</member>
        <member name="M:Csf.Osal.Threading.ReadWriteLock.Dispose">
Destructor for ReadWriteLock. 
</member>
        <member name="M:Csf.Osal.Threading.ReadWriteLock.#ctor">
Default Constructor for ReadWriteLock.

</member>
        <member name="T:Csf.Osal.Threading.ReadWriteLock">
The ReadWriteLock Class encapsulates the functionality of a
          *  read write lock on sections of code for threading.
          *
          * Read/Write locks provide a synchronization mechanism
          * that allow threads in an application to more accurately reflect
          * the type of access to a shared resource that they require.
          * Many threads can acquire the same read/write lock if they acquire a shared
          * read lock on the read/write lock object. Only one thread can acquire an 
          * exclusive write lock on a read/write lock object. When an exclusive write
          * lock is held, no other threads are allowed to hold any lock.
          * The ReadWriteLock allows for exclusive access to shared data regions.
          * Note that the this implementation does not support recursive or nested locks.
          * The behavior of attempting to read or write lock the same lock object more than
          * once from the same thread is undefined.  This implementation is set to only
          * share the lock within the current address space, so this is not intended for
          * interprocess exclusion without modification. Interprocess locks are possible if
          * this is modified (see pthread_rwlock_attr_setpshared)

</member>
        <member name="F:Csf.Osal.Threading.ConditionVariable.m_pimpl">
Pointer to the private implementation of the condition variable. 
</member>
        <member name="T:Csf.Osal.Threading.ConditionVariable.ConditionVariablePimpl">
Forward declaration of the struct containing implementation specific data 
</member>
        <member name="M:Csf.Osal.Threading.ConditionVariable.wait">
Causes the calling thread to wait until the
                * condition variable is pulsed.
                *
                * A call to wait() will block until either:
                * *  another thread calls pulse() and the system selects
                *    (at least) this thread for wake.
                * *  another thread calls pulseAll()
                * *  the system spuriously wakes the thread.
                *
                * Due to the potential for the third case, the calling
                * thread must check a predicate to determine whether
                * execution should actually proceed.
                *
                * While the thread calling wait() is blocked, the mutex
                * associated with the ConditionVariable is released.
                * The call to wait() atomically releases the mutex and
                * begins waiting.  When awakened, the call to wait() will
                * reacquire the mutex before returning.  If multiple threads
                * are awakened, they contend for the mutex according to
                * scheduling priority.  This contention may occur even from
                * a call to pulse(), as a call pulse() may cause more than
                * one thread to be awakened.
                * @throws runtime_error on failure.
                * @pre The ConditionVariable's associated mutex must be
                * locked by the calling thread.
                * @post The ConditionVaraible's associated mutex will have
                * been reaquired by the calling thread.

</member>
        <member name="M:Csf.Osal.Threading.ConditionVariable.pulseAll">
Awakens all waiting threads, if any.
                *
                * If no threads are waiting on the condition variable,
                * pulseAll has no effect.
                *
                * If threads are waiting, pulseAll will awaken all
                * of the waiting threads.
                *
                * pulseAll() may be called with the mutex locked, but this
                * is not required.  If it is necessary to count the number
                * of threads waiting through use of shared variables,
                * the lock must be held until after the call to pulseAll()
                * in order to avoid a race condition.
                * @throws runtime_error on failure. An error can only occur on Linux.

</member>
        <member name="M:Csf.Osal.Threading.ConditionVariable.pulse">
Awakens one (or more) waiting threads, if any.
                *
                * If no threads are waiting on the condition variable,
                * pulse has no effect.
                *
                * If threads are waiting, pulse will awaken at least one
                * of the waiting threads.  A call to pulse may wake more
                * than one waiting thread.  For this reason, if multiple
                * threads are waiting, they must check a shared variable
                * to control execution if it is required that only one
                * thread be allowed to proceed.
                *
                * pulse() may be called with the mutex locked, but this
                * is not required.  If it is necessary to count the number
                * of threads waiting through use of shared variables,
                * the lock must be held until after the call to pulse()
                * in order to avoid a race condition.
                * @throws runtime_error on failure. An error can only occur on Linux.

</member>
        <member name="M:Csf.Osal.Threading.ConditionVariable.unlock">
Releases the lock on the mutex associated with
                * the ConditionVariable.
                * @throws runtime_error on failure. An error can only occur on Linux.
                * @pre The thread calling unlock() must own the lock
                * being unlocked.

</member>
        <member name="M:Csf.Osal.Threading.ConditionVariable.tryLock">
Attempts to acquire a lock on the mutex
                * associated with the ConditionVariable, but returns
                * false, if waiting would have been necessary.
                * @throws runtime_error on failure. An error can only occur on Linux.
                * @return true if the lock was acquired, false if the lock was busy, so not acquired
                * @pre The thread calling tryLock() must not already have
                * locked the mutex.  Recursive locks are not allowed.

</member>
        <member name="M:Csf.Osal.Threading.ConditionVariable.lock">
Acquires a lock on the mutex associated with
                * the ConditionVariable, waiting if necessary.
                * @throws runtime_error on failure. An error can only occur on Linux.
                * @pre The thread calling lock() must not already have
                * locked the mutex.  Recursive locks are not allowed.

</member>
        <member name="M:Csf.Osal.Threading.ConditionVariable.Dispose">
ConditionVariable Destructor
                * @pre No worker threads may be waiting on the
                * ConditionVariable. If threads are waiting when
                * the condition variable is released, the behavior is
                * undefined.

</member>
        <member name="M:Csf.Osal.Threading.ConditionVariable.#ctor">
ConditionVariable Constructor 
</member>
        <member name="T:Csf.Osal.Threading.ConditionVariable">
A ConditionVariable allows one or more threads to
          * wait for a signal to proceed.  One or more shared
          * variables are used to coordinate between the waiters and
          * the signaling thread.  The ConditionVariable provides a
          * mutex to ensure thread safe access to the shared variables.
          *
          * ConditionVariables typically operate with a producer-consumer
          * model.  A pool of worker threads perform processing.  Each
          * thread checks a set of variables which indicates whether work
          * is ready to be performed.  The worker threads first lock the
          * condition variable, then begin a while() loop to determine
          * if they should wait.  The while loop condition variable is
          * true when a wait is needed.  If If there is work ready, then
          * the loop condition variable is false, and the body of the
          * loop is bypassed.
          *
          * If no work is ready, then the loop is entered.  The body of
          * the loop is a call to wait on the condition variable.  While
          * that call to wait() is blocked, the  mutex is automatically
          * released, allowing other threads to access the shared
          * variables.  Once the waiting thread is signaled, the mutex
          * is automatically reacquired, allowing the loop condition to
          * be checked again.
          *
          * Once the loop condition is false, indicating that work is
          * ready, execution passes the loop body.  The thread updates
          * the shared variables indicating the work it has committed
          * to, then releases the mutex, then proceeds to processing.
          * After finishing its work, it may need to report results;
          * If so, it locks the ConditionVaraible in order to ensure
          * thread-safe updates to the shared variables, and is then
          * free to check for more work using the same ConditionVariable.
          *
          * The controlling thread locks the ConditionVariable, updates
          * the shared variables to indicate that work is waiting, then
          * calls pulse() or pulseAll() to indicate when processing
          * should begin.  Once the signal is sent, the controlling thread
          * releases the mutex, and the awakened threads begin contending
          * for the mutex so that they can check for work and proceed.
          *
          * The controlling thread may also need to read from the shared
          * variables to obtain information about work results from
          * previous signals.  If so, it must hold the lock on the
          * ConditionVariable in order to ensure thread-safe access.
          * These reads may be combined with the updates that queue
          * new work if desired.
          *
          * The controlling thread does NOT need to hold the mutex during
          * the call to pulse() or pulseAll(), but it does need to hold
          * The mutex while it updates the shared variables.
          *
          * ConditionVariables do not queue or count signals;  If there
          * are multiple units of work to be performed, this should be
          * indicated to the worker threads by the shared variables,
          * not through repeated calls to signal().
          *
          * Additionally, it is not guaranteed that a call to signal()
          * will wake ONLY one thread;  it may for performance reasons
          * wake several threads.  It is also possible that an already
          * running thread might have taken the work to be performed
          * while the signal was in flight, or before the mutex could
          * be acquired.;  For both these reasons, receiving a signal
          * and returning from wait() is NOT a guarantee that work is
          * actually waiting to be performed.
          *
          * Because ConditionVariables do not queue, and because they
          * may wake when no work is ready, it is necessary to check a
          * shared variable in association with the use of the waiting
          * functionality provided by ConditionVariables.
          *
          * @todo   Multiple ConditionVariables should be allowed to share
          * one Mutex.  This may be desirable when there are multiple
          * classes of worker threads, or different kinds of waiting,
          * but only one set of work to be performed.
          * Each case would be associated with its own ConditionVariable
          * and the controlling thread can select which one is pulsed,
          * allowing it to control which threads should be allowed to wake.

</member>
        <member name="F:e_io">
IO Data - Data values targeted for interfacing with panels and indicators (traditionally CockpitIO variables)
</member>
        <member name="F:e_meta">
Meta Data - Meta data published about a Sim Element typically in the base class
</member>
        <member name="F:e_outputs">
Outputs  - Default - Outputs available for other Sim Elements to subscribe to
</member>
        <member name="T:Csf.Vdn.Scope.ScopeLevels">
Enumeration of the scope levels at which items are placed on the VDN
</member>
        <member name="M:Csf.Utils.EnumBase.mapEnum(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64)">
@brief returns the ValueMap of integers
</member>
        <member name="F:Csf.Utils.EnumBase.m_map">
@brief map of strings to integers
</member>
        <member name="M:Csf.Utils.EnumBase.getId(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Return the value for a given enum string
       returns -1 for error
</member>
        <member name="M:Csf.Utils.EnumBase.getString(System.Int64)">
@brief Returns the first string associated with the specified enumerated integer value 
@param index The specified enumerated integer value 
       Limitations: only returns first string for that enumeration value
       Does not support non-unique enuration values
</member>
        <member name="M:Csf.Utils.EnumBase.getIdStr">
@brief Returns the id string used to publish enumeration on the VDN
</member>
        <member name="T:Csf.Utils.EnumBase">
@brief The EnumBase class is the base class used to create enumerations
</member>
        <member name="F:e_warning">
Warning - must resolve to continue normal operation
</member>
        <member name="F:e_caution">
Caution - can continue training, but needs to be fixed at first opportunity
</member>
        <member name="F:e_advisory">
Advisory - informational only, user can choose to ignore.
</member>
        <member name="F:e_event">
Event - For logging what the user is doing e.g. an IOS event logger.
</member>
        <member name="F:e_debug">
Debugging information used during development or maintenance.
</member>
        <member name="M:Csf.Utils.op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Utils.License.ProductItem!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Override the stream insertion operator so we can print the contents.
      * @return The output stream.
      * @param output Reference to the output stream.
      * @param rhs Right hand side of the stream insertion operator.

</member>
        <member name="F:Csf.Utils.License.m_productItemQuery">
Stories the product item query information. 
</member>
        <member name="F:Csf.Utils.License.m_checkedOutLicense">
Pointer to checked out license. Used for returning a license. 
</member>
        <member name="F:Csf.Utils.License.m_defaultVersion">
Default software version. 
</member>
        <member name="F:Csf.Utils.License.m_defaultCmActFirmCode">
Default CmAct firm code used for all license checks if none is provided. 
</member>
        <member name="F:Csf.Utils.License.m_defaultCmDongleFirmCode">
Default CmDongle firm code used for all license checks if none is provided. 
</member>
        <member name="M:Csf.Utils.License.convertProductFeatureToString(System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst)">
Will convert a product code and feature map into a string representation. 
         * @param product The product code for the license.
         * @param feature The feature map for the license.
         * @return A string representing the product and features.

</member>
        <member name="M:Csf.Utils.License.decrementUnitCounter(System.Void*)">
Decrement the unit counter of a license by one. Unit counters are used to
         * provide # of run limited demos.
         * @return
         * - 0: Success
         * - -1: License not found.
         * - -2: CM API error.

</member>
        <member name="M:Csf.Utils.License.getLicenseInfo(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst)">
Return info for a given query item. Note that this returns info on only the
         * first instance found. There may be multiple licenses available.
         * @throws runtime_error if there was an error getting license info.
         * @return ProductItem that for the given query.
         * @param firmCode Firm (company) code for licensor.
         * @param productCode Product ID code of the licensed product.
         * @param featureMap Feature map of the product being licensed. Each
         * feature is mapped to one bit of a 32-bit word so there can be 32 features per product code.
         * @param majorVersion Product major version number (e.g. the 4 in 4.1)
         * @param minorVersion Product minor version number (e.g. the 1 in 4.1)

</member>
        <member name="M:Csf.Utils.License.returnLicense(System.Void*)">
Return a checked out license so it can be reused. Throws if there are errors.
         * @throws LicenseReleaseException if can't release a license.
         * @param license Pointer to a license that was previously checked out with
         * checkOutLicense().

</member>
        <member name="M:Csf.Utils.License.checkOutLicense(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,Csf.Utils.License.AccessType.E!System.Runtime.CompilerServices.IsConst,Csf.Utils.License.AccessOptions.E!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Checks out the given license. If there are N floating licenses for a product
         * then there can be N checkouts of that license concurrently (modified by the access type, so
         * station share only checks out one license regardless of the # of instances
         * from one station/session. No exceptions are thrown.
         * @return Pointer to the license, which is used with returnLicense() to return it. If no
         * license was found or if there were any errors 0 is returned. No exceptions are thrown.
         * @param firmCode Firm (company) code for licensor.
         * @param productCode Product ID code of the licensed product.
         * @param featureMap Feature map of the product being licensed. Each
         * feature is mapped to one bit of a 32-bit word so there can be 32 features per product code.
         * @param accessType Defines the type of access. Most common is e_stationShare.
         * @param accessOptions Defines where we look for licenses (local, LAN, both, and what order).
         * @param majorVersion Product major version number (e.g. the 4 in 4.1). Defaults to 0.
         * @param minorVersion Product minor version number (e.g. the 1 in 4.1). Defaults to 0.
         * @param decrementUnitCounter If true, the unit counter (# of remaining runs) for a particular
         * product license will be decremented by one. This is used
         * with demo licenses that are limited by # of runs usually.

</member>
        <member name="M:Csf.Utils.License.checkLicense(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,Csf.Utils.License.AccessType.E!System.Runtime.CompilerServices.IsConst,Csf.Utils.License.AccessOptions.E!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Utility function callable by anyone (static).
         * Check if the given product and feature are licensed.
         * To check out a license use checkOutLicense(). If an error occurs, a LicenseException is
         * thrown.
         * @return
         * - 0: Success, product and feature is licensed.
         * - -1: Failure, no license found.
         * - -2: Failure, CM API error.
         * @param firmCode Firm (company) code for licensor.
         * @param productCode Product ID code of the licensed product.
         * @param featureMap Feature map of the product being licensed. Each
         * feature is mapped to one bit of a 32-bit word so there can be 32 features per product code.
         * @param accessType Defines the type of access. Most common is e_stationShare.
         * @param accessOptions Defines where we look for licenses (local, LAN, both, and what order).
         * @param majorVersion Product major version number (e.g. the 4 in 4.1)
         * @param minorVersion Product minor version number (e.g. the 1 in 4.1)
         * @param decrementUnitCounter If true, the unit counter (# of remaining runs) for a particular
         * product license will be decremented by one. This is used
         * with demo licenses that are limited by # of runs usually.

</member>
        <member name="M:Csf.Utils.License.returnLicense">
Returns the currently checked out license
         * @throws LicenseReleaseExecption If the license can't be returned.

</member>
        <member name="M:Csf.Utils.License.getProductItemQuery">
Accessor that will return a copy of the ProductItemQuery object used
         * by this license. 
         * @return A copy of the product item query. 
</member>
        <member name="M:Csf.Utils.License.getIsLicenseCheckedOut">
Accessor that will return whether or not a license is already checked out. 
         * @return true if already checked out, false if not. 
</member>
        <member name="M:Csf.Utils.License.checkOutFirstValidLicense(System.Boolean!System.Runtime.CompilerServices.IsConst)">
Check out a license. This will use up one license until the license is returned
         * (per the access rules, so station share will cause only 1 license to be checked out
         * regardless of the # of instances as long as they are all from the same session).
         * @return
         * - 0 : Success, at least one of the items was licensed.
         * - -1: Unable to check out a valid license.
         * - -2: Unable to return the checked out license prior to checking it out again.
         * - nonzero: Error, license failure.
         * @param decrementUnitCounter If true, the unit counter (# of remaining runs) for a particular
         * product license will be decremented by one. This is used
         * with demo licenses that are limited by # of runs usually.

</member>
        <member name="M:Csf.Utils.License.checkForAnyValidLicense(System.Boolean!System.Runtime.CompilerServices.IsConst)">
Check the license.  It will first attempt to verify the license with
         * the firm code it was set to.  If that fails it will use the default
         * firm code that is used when none is provided.
         * @return
         * - 0 : Success, at least one of the items was licensed.
         * - -1 : Did not find any of the licenses.
         * - All other nonzero values: Error, license failure.
         * @param decrementUnitCounter If true, the unit counter (# of remaining runs) for a particular
         * product license will be decremented by one. This is used
         * with demo licenses that are limited by # of runs usually.

</member>
        <member name="M:Csf.Utils.License.setDefaultCmActFirmCode(System.UInt32!System.Runtime.CompilerServices.IsConst)">
Set the default CmAct firm code for when no code is provided. This code will be used
         * for all license checks.
         * @param cmActFirmCode Default firm code to use.

</member>
        <member name="M:Csf.Utils.License.setDefaultCmDongleFirmCode(System.UInt32!System.Runtime.CompilerServices.IsConst)">
Set the default CmDongle firm code for when no code is provided. This code will be used
         * for all license checks.
         * @param cmDongleFirmCode Default firm code to use.

</member>
        <member name="M:Csf.Utils.License.Dispose">
Dtor. 
</member>
        <member name="M:Csf.Utils.License.#ctor(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,Csf.Utils.License.AccessType.E!System.Runtime.CompilerServices.IsConst,Csf.Utils.License.AccessOptions.E!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst)">
Ctor.
         * @param firmCode Default firm code to use for this License
         * @param productCode Default product code to use for this License
         * @param featureMap Default feature map to use for this License
         * @param accessType Default access type to use for this License
         * @param accessOptions Default access options to use for this License
         * @param majorVersion Default major version to use for this License
         * @param minorVersion Default minor version to use for this License
         * @param cmDongleFirmCode Default dongle firm code to use for this License
         * Default to the CSF dongle firm code.
         * @param cmActFirmCode Default Act firm code to use for this License.
         * Default to the CSF dongle firm code.

</member>
        <member name="F:Csf.Utils.License.sc_cmUniversalFirmCode">
WIBU Systems universal firm code for CodeMeter licensor (that's ACCEL). 
</member>
        <member name="F:Csf.Utils.License.sc_cmDongleFirmCode">
WIBU Systems dongle firm code for CodeMeter licensor (that's ACCEL). 
</member>
        <member name="D:Csf.Utils.License.ProductItemQueryList">
List of items, usually used to check for licenses. 
</member>
        <member name="M:Csf.Utils.License.ProductItemQuery.#ctor(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,Csf.Utils.License.AccessType.E!System.Runtime.CompilerServices.IsConst,Csf.Utils.License.AccessOptions.E!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst)">
Constructor 
            * @param firmCode value to set m_firmCode to.
            * @param productCode value to set m_productCode to.
            * @param featureMap value to set m_featureMap to.
            * @param accessType value to set m_accessType to.
            * @param accessOptions value to set m_accessOptions to.
            * @param majorVersion value to set m_majorVersion to.
            * @param minorVersion value to set m_minorVersion to.

</member>
        <member name="F:Csf.Utils.License.ProductItemQuery.m_minorVersion">
Minor version of the item (e.g. 1 in 4.1). 
</member>
        <member name="F:Csf.Utils.License.ProductItemQuery.m_majorVersion">
Major version of the item (e.g. 4 in 4.1). 
</member>
        <member name="F:Csf.Utils.License.ProductItemQuery.m_accessOptions">
Access option. 
</member>
        <member name="F:Csf.Utils.License.ProductItemQuery.m_accessType">
Access type. 
</member>
        <member name="F:Csf.Utils.License.ProductItemQuery.m_featureMap">
32-bit unsigned bitmap representing up to 32 individually licensable features. 
</member>
        <member name="F:Csf.Utils.License.ProductItemQuery.m_productCode">
Product code of the item. Identifes the particular product being licensed.
            * Product codes within a firm must be unique. 

</member>
        <member name="F:Csf.Utils.License.ProductItemQuery.m_firmCode">
Firm code of the item. This is a unique ID assigned to each licensor. 
</member>
        <member name="T:Csf.Utils.License.ProductItemQuery">
This class represents a query for one licensed feature. This class is used to check
         * licenses. 
</member>
        <member name="M:Csf.Utils.License.ProductItem.#ctor">
Ctor 
</member>
        <member name="F:Csf.Utils.License.ProductItem.m_featureMap">
Bitmap of the features that are licensed for this product. Each bit
            * represents one feature.

</member>
        <member name="F:Csf.Utils.License.ProductItem.m_productCode">
Unique ID for the product from this firm. 
</member>
        <member name="F:Csf.Utils.License.ProductItem.m_expirationTime">
Expiration time - the license is not valid after this date.

</member>
        <member name="F:Csf.Utils.License.ProductItem.m_unitCounter">
CM UnitCounter - we use this as the remaining # of runs for run-limited
            * demo licenses.

</member>
        <member name="F:Csf.Utils.License.ProductItem.m_pios">
Presence bitmap of product item objects. If a bit is 1 that PIO is
            * available and valid. The PIOS are defined in CodeMeter.h.

</member>
        <member name="T:Csf.Utils.License.ProductItem">
WIBU stores information about one license in a product item option (PIO) in a container (dongle
         * or file. 
</member>
        <member name="F:e_stationShare">
For each windows client OS session, Windows terminal server session, or VM use
               * only one floating license regardless of how many checkouts are done. CM_ACCESS_STATIONSHARE.

</member>
        <member name="F:e_exclusive">
Each license can only be checked out once concurrently. CM_ACCESS_EXCLUSIVE. 
</member>
        <member name="F:e_noUserLimit">
Each checkout consumes no licenses. CM_ACCESS_NOUSERLIMIT. 
</member>
        <member name="F:e_userLimit">
Each checkout consumes one license. CM_ACCESS_USERLIMIT. 
</member>
        <member name="T:Csf.Utils.License.AccessType.E">
Enumeration used to leak contents to enclosing class. 
</member>
        <member name="T:Csf.Utils.License.AccessType">
Defines the type of license access. See the CMACCESS mflCtrl in CodeMeter. 
</member>
        <member name="F:e_lanLocal">
Check for LAN licenses first then check local. 
</member>
        <member name="F:e_localLan">
Check for local licenses first then look on the LAN. 
</member>
        <member name="F:e_lan">
Only check network license servers. 
</member>
        <member name="F:e_local">
Only check licenses on locally attached dongles or files 

Local Data - Data values targeted for view in RTMM or other debugging tools
</member>
        <member name="T:Csf.Utils.License.AccessOptions.E">
Enumeration used to leak contents to enclosing class. 
</member>
        <member name="T:Csf.Utils.License.AccessOptions">
Where do we look for CodeMeter licenses and in what order. 
</member>
        <member name="F:e_bvp">
BVP SEs. This is the union of all BVP config files. 
</member>
        <member name="F:e_universal">
Universal SEs. 
</member>
        <member name="T:Csf.Utils.License.CsfModelLibraryFeatureMap.E">
Enumeration used to leak contents to enclosing class. 
</member>
        <member name="T:Csf.Utils.License.CsfModelLibraryFeatureMap">
The CSF Model Library contains all of our product line SEs. Note that
         * an SE may be in both categories (BVP and Universal) meaning it can be used
         * by someone that has a license for either feature.

</member>
        <member name="F:e_netVdnClient">
Net VDN client feature. We may license only this and then people
               * can only build net vdn client applications rather than full trainers.

</member>
        <member name="F:e_sdk">
CSF SDK feature. 
</member>
        <member name="T:Csf.Utils.License.CsfSdkFeatureMap.E">
Enumeration used to leak contents to enclosing class. 
</member>
        <member name="T:Csf.Utils.License.CsfSdkFeatureMap">
Each product code can have up to 32 licensable features. They are
         * represented by one bit each. The feature map is a UInt32 which
         * represents all features as one bit.

</member>
        <member name="F:e_csfToolSuite">
The CSF Tool Suite. 
</member>
        <member name="F:e_csfModelLibrary">
The CSF Model Library. This contains all of the SEs inside
               * libRcSe.

</member>
        <member name="F:e_csfSdk">
The CSF SDK. 
</member>
        <member name="T:Csf.Utils.License.CsfProductCode.E">
Enumeration used to leak contents to enclosing class. 
</member>
        <member name="T:Csf.Utils.License.CsfProductCode">
Each licensable product has a CodeMeter product code. 
</member>
        <member name="M:Csf.Utils.License.LicenseReleaseException.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Ctor.
            * @param The "what" string for the exception. Explains what
            * caused the exception.

</member>
        <member name="T:Csf.Utils.License.LicenseReleaseException">
Exception thrown when can't release a license. 
</member>
        <member name="T:Csf.Utils.License">
Class that implements all the functionality of a single license instance. 
</member>
        <member name="F:Csf.Utils.SoftwareVersion.m_extra">
Addtl string info to be appended to the string version. 
</member>
        <member name="F:Csf.Utils.SoftwareVersion.m_other">
Other info for the build type (e.g. the #). 
</member>
        <member name="F:Csf.Utils.SoftwareVersion.m_type">
Buld type. 
</member>
        <member name="F:Csf.Utils.SoftwareVersion.m_bugfix">
Bugfix version #. 
</member>
        <member name="F:Csf.Utils.SoftwareVersion.m_minor">
Minor version #. 
</member>
        <member name="F:Csf.Utils.SoftwareVersion.m_major">
Major version #. 
</member>
        <member name="F:Csf.Utils.SoftwareVersion.m_mutex">
Mutex to make this class thread-safe. 
</member>
        <member name="M:Csf.Utils.SoftwareVersion.isStringNumber(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Will return if a string is a number or not.
         * @return True if a number false if not.
         * @param The string to check.

</member>
        <member name="M:Csf.Utils.SoftwareVersion.getBuildTypeFromString(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Get the build type based on a string. 
         * @return The build type translated into BuildType enum type.
         * @param buildType The string to parse for the build type.

</member>
        <member name="M:Csf.Utils.SoftwareVersion.getBugfix">
Get the bugfix version #. 
         * @return Bugfix version #. 

</member>
        <member name="M:Csf.Utils.SoftwareVersion.getMinor">
Get the minor version #.
         * @return Minor version #.

</member>
        <member name="M:Csf.Utils.SoftwareVersion.getMajor">
Get the major version #. 
         * @return Major version #. 

</member>
        <member name="M:Csf.Utils.SoftwareVersion.setBuild(Csf.Utils.SoftwareVersion.BuildType!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst)">
Set the build type.
         * @param type Build type.
         * @param other Optional # for the build type (e.g. -engr1 has type of
         * engineering build and # other of 1.

</member>
        <member name="M:Csf.Utils.SoftwareVersion.setBugfix(System.UInt32!System.Runtime.CompilerServices.IsConst)">
Set the bugfix version #.
         * @param bugfix Bugfix version #.

</member>
        <member name="M:Csf.Utils.SoftwareVersion.setMinor(System.UInt32!System.Runtime.CompilerServices.IsConst)">
Set the minor version #.
         * @param minor Minor version #.

</member>
        <member name="M:Csf.Utils.SoftwareVersion.setMajor(System.UInt32!System.Runtime.CompilerServices.IsConst)">
Set the major version #.
         * @param major Major version #.

</member>
        <member name="M:Csf.Utils.SoftwareVersion.op_Inequality(Csf.Utils.SoftwareVersion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Compare two SoftwareVersion objects for inequality.
         * @return True = they are not equal, false = they are equal.
         * @param rhs Right-hand-side.

</member>
        <member name="M:Csf.Utils.SoftwareVersion.op_Equality(Csf.Utils.SoftwareVersion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Compare two SoftwareVersion objects for equality.
         * @return True = they are equal, false = they are not equal.
         * @param rhs Right-hand-side.

</member>
        <member name="M:Csf.Utils.SoftwareVersion.Dispose">
Dtor. 
</member>
        <member name="M:Csf.Utils.SoftwareVersion.#ctor(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Ctor.
         * @param versionText A string containing the version. For example
         * 4.4.0-dev0.trunk or 4.4.0. 

</member>
        <member name="M:Csf.Utils.SoftwareVersion.#ctor(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,Csf.Utils.SoftwareVersion.BuildType!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Ctor.
         * @param major Major version #. Incremented when significant, compatibilty-breaking
         * changes are made.   
         * @param minor Minor version #. Incremented when new features are added.
         * @param bugfix Bugfix version #. Only used when back-porting critical bug fixes
         * from a newer version to an older version that is being maintained.
         * @param type Build type.
         * @param other Number associated with the build type (e.g. -engr1 means engineering 
         * build type and other = 1.
         * @param extra Extra string to be appended at the end of the version string returned
         * by the getAsString() method. CSF uses this as everything after the build type
         * and number (e.g. 4.1.0-rc1-crfix1 is 4,1,0,release candidate, 1, "-crfix1").

</member>
        <member name="F:e_invalid">
Invalid 
</member>
        <member name="F:e_gold">
Gold (final release). 
</member>
        <member name="F:e_ga">
General availability. Not used. 
</member>
        <member name="F:e_rtm">
Release to manufacturing. Not used. 
</member>
        <member name="F:e_releaseCandidate">
Release candidate. All features for a planned release have been integrated
            * and the build is now undergoing release testing.

</member>
        <member name="F:e_beta">
Released for testing to external testers (customers). Not used by CSF. 
</member>
        <member name="F:e_alpha">
Released for testing to internal test team. Not used by CSF. 
</member>
        <member name="F:e_engineering">
Engineering build (-engr). Reviewed, tagged from trunk. 
</member>
        <member name="F:e_development">
Development build (-dev). No review, can be tagged from anywhere. 
</member>
        <member name="T:Csf.Utils.SoftwareVersion.BuildType">
Type of build. 
</member>
        <member name="T:Csf.Utils.SoftwareVersion">
This class represents version information for software.

</member>
        <member name="F:Csf.Osal.Threading.Mutex.m_pimpl">
Pointer to the private implementation of the mutex. 
</member>
        <member name="T:Csf.Osal.Threading.Mutex.MutexPimpl">
Forward declaration of the Private Implementation of the
             * Mutex Struct. 

</member>
        <member name="M:Csf.Osal.Threading.Mutex.unlock">
Provides a mechanism to release a lock allowing other threads to
             * access the exclusive section.

</member>
        <member name="M:Csf.Osal.Threading.Mutex.lockNoWait">
Provides a mechanism to attempt to lock a mutex
             * if not sucessfull returns immediately with false
             * if lock is held, returns true;
             * @return True if successful and lock is held, false if not successful.

</member>
        <member name="M:Csf.Osal.Threading.Mutex.lock">
Provides a mechanism to prevent any other threads to enter into
             * the exclusive area of code and shared data.

</member>
        <member name="M:Csf.Osal.Threading.Mutex.Dispose">
Destructor for Mutex. 
</member>
        <member name="M:Csf.Osal.Threading.Mutex.#ctor">
Default Constructor for Mutex. 
</member>
        <member name="T:Csf.Osal.Threading.Mutex">
The Mutex Class encapsulates the functionality of an
          * exclusive section of code locking mechanism for threading.
          *
          * The Mutex is implemented such that if any particular thread
          * makes a call to lock, all subsequent calls to lock from other
          * threads will block until a call to unlock is made.  The lock/unlock
          * allows for exclusive access to shared data regions.  Locks only 
          * shared data within the current address space, so this is not intended
          * for interprocess exclusion.

</member>
        <member name="F:Csf.Osal.TimeStamp.sc_epochDeltaUsec">
Number of microseconds between this OS epoch and Unix epoch. 
</member>
        <member name="F:Csf.Osal.TimeStamp.m_dayOfWeek">
Day of the week (0 = Sunday) 
</member>
        <member name="F:Csf.Osal.TimeStamp.m_microsecond">
Microseconds of the second (0-999999). 
</member>
        <member name="F:Csf.Osal.TimeStamp.m_second">
Second of the minute (0-59). 
</member>
        <member name="F:Csf.Osal.TimeStamp.m_minute">
Minute of the hour (0-59). 
</member>
        <member name="F:Csf.Osal.TimeStamp.m_hour">
Hour of the day (0-23). 
</member>
        <member name="F:Csf.Osal.TimeStamp.m_year">
Full year including century (e.g. 2013). 
</member>
        <member name="F:Csf.Osal.TimeStamp.m_day">
Day of the month. Starts at 1. 
</member>
        <member name="F:Csf.Osal.TimeStamp.m_month">
Month of the year (starts at January = 1). 
</member>
        <member name="M:Csf.Osal.TimeStamp.op_Inequality(Csf.Osal.TimeStamp!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Compare two TimeStamp objects for inequality. 
            * Both timestamps must be in the same time zone.
            * @return True = they are not equal, false = they are equal.
            * @param rhs Right-hand-side.

</member>
        <member name="M:Csf.Osal.TimeStamp.op_Equality(Csf.Osal.TimeStamp!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Compare two TimeStamp objects for equality.
            * Both timestamps must be in the same time zone.
            * @return True = they are equal, false = they are not equal.
            * @param rhs Right-hand-side.

</member>
        <member name="M:Csf.Osal.TimeStamp.getTimeStampAsFileNameString(Csf.Osal.TimeStamp!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Get a filename string version of a TimeStamp (so no spaces or colons). 
            * Format is "YYYY-MM-DD_HH-II-SS.mmm"
            * where II is minutes and UUU is milliseconds.
            * @return String version of the timestamp.
            * @param ts Timestamp to get a string version of.

</member>
        <member name="M:Csf.Osal.TimeStamp.getTimeStampAsString(Csf.Osal.TimeStamp!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Get a string version of a TimeStamp. Format is "YYYY-MM-DD HH:II:SS.mmm"
            * where II is minutes and UUU is milliseconds.
            * @return String version of the timestamp.
            * @param ts Timestamp to get a string version of.

</member>
        <member name="M:Csf.Osal.TimeStamp.getHighResTimerUsec">
Get a timestamp in microseconds that is the highest resolution available to the OS. 
            * This timestamp is not relative to a known starting point (e.g. the epoch) so it can't be used
            * for getting the absolute wall clock time, but it can be used for time difference measurement
            * (e.g. how much time has elapsed between two events). This is higher resolution on MS-Windows
            * than the getCurrentUtcTimeUsec() method, which can only return 1ms resolution times.
            * @return Current UTC Time in Usec

</member>
        <member name="M:Csf.Osal.TimeStamp.convertUtcUsecsToUtcTimeStamp(System.UInt64!System.Runtime.CompilerServices.IsConst)">
Convert a UTC time that is represented in microseconds since the UNIX epoch
             * to a time stamp so you can get year/month/day etc. info which is in local time
             * with the local time zone and DST applied by the OS. This
             * uses OS functions so should always be correct as long as the OS is updated.
             * @return Time stamp representing the specified time.
             * @param microSeconds Microseconds since the UNIX epoch started, in UTC.

</member>
        <member name="M:Csf.Osal.TimeStamp.convertUtcUsecsToLocalTimeStamp(System.UInt64!System.Runtime.CompilerServices.IsConst)">
Convert a UTC time that is represented in microseconds since the UNIX epoch
             * to a time stamp so you can get year/month/day etc. info. This
             * uses OS functions so should always be correct as long as the OS is updated.
             * @throws std::runtime_error on failure on Linux only
             * @return Time stamp representing the specified time.
             * @param microSeconds Microseconds since the UNIX epoch started, in UTC.

</member>
        <member name="M:Csf.Osal.TimeStamp.getCurrentUtcTimeUsec">
Get the current UTC time in microseconds based on the UNIX epoch. The resolution
             * of this function in MS-Windows is 1ms. For microsecond resolution, use getHighResTimerUsec().
             * @throws std::runtime_error on failure on Linux only
             * @return Number of microseconds since January 1, 1970 (UTC). This is the
             * UNIX epoch.

</member>
        <member name="M:Csf.Osal.TimeStamp.getCurrentUtcTime">
Get a time stamp that represents the current time in Universal Time Coordinates.
             * @throws std::runtime_error on failure on Linux only
             * @return Time stamp representing the current time in UTC.

</member>
        <member name="M:Csf.Osal.TimeStamp.getCurrentLocalTime">
Returns a time stamp that represents the current time in the local time zone
             * as set by the OS.
             * The OS has the time zone and daylight savings time information, this
             * function does not deal with that, it only uses what the OS provides,
             * so it should always work as long as the OS is properly updated for changes
             * to daylight savings time and configured with the correct time zone.
             * @throws std::runtime_error on failure on Linux only
             * @return Time stamp representing the current time in the local time zone.

</member>
        <member name="M:Csf.Osal.TimeStamp.Dispose">
Destructor. 
</member>
        <member name="M:Csf.Osal.TimeStamp.#ctor">
Constructor. 
</member>
        <member name="M:Csf.Osal.TimeStamp.Exception.#ctor(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Ctor.
                   * @param what Error msg.

</member>
        <member name="T:Csf.Osal.TimeStamp.Exception">
Exception for OS-level time API errors. 
</member>
        <member name="M:Csf.Osal.op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.TimeStamp!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Override the stream insertion operator so we can print the contents.
             * @return The output stream.
             * @param output Reference to the output stream.
             * @param rhs Right hand side of the stream insertion operator.


Stream insertion operator used for printing a timestamp. 
      * @return Output stream.
      * @param output Output stream ref.
      * @param rhs Ref to TimeStamp to print.

</member>
        <member name="T:Csf.Osal.TimeStamp">
This class represents a time stamp with microsecond resolution.
       * It also provides static methods to get the current time as a time stamp
       * either in the local time zone or in UTC. It also provides methods to
       * get the current time as microseconds since Unix epoch which started Jan 1, 1970 00:00 GMT.
       * Use the class to store a time stamp, or call its static methods to get time stamps.
       * Exceptions are thrown for OS-level time API errors.

</member>
        <member name="M:Csf.Osal.Convert.int64ToInt16Safe(System.Int64!System.Runtime.CompilerServices.IsConst)">
Safely demote from Int64 type to Int16.
         * @throws overflow_error if the value is too large.
         * @throws range_error if the value is too negative.
         * @return Int16 value if it fits.

</member>
        <member name="M:Csf.Osal.Convert.int32ToUInt32Safe(System.Int32!System.Runtime.CompilerServices.IsConst)">
Safely demote from Int32 type to UInt32.
         * @throws range_error if the value is negative.
         * @return UInt32 value if it fits.

</member>
        <member name="M:Csf.Osal.Convert.uInt32ToUInt16Safe(System.UInt32!System.Runtime.CompilerServices.IsConst)">
Safely demote from UInt32 type to UInt16.
         * @throws overflow_error if the value is too large.
         * @return UInt16 value if it fits.

</member>
        <member name="M:Csf.Osal.Convert.uInt64ToSizeTypeSafe(System.UInt64!System.Runtime.CompilerServices.IsConst)">
Safely demote from UInt64 type to SizeType.
         * @throws overflow_error if the value is too large.
         * @return SizeType value if it fits.

</member>
        <member name="M:Csf.Osal.Convert.int64ToSizeTypeSafe(System.Int64!System.Runtime.CompilerServices.IsConst)">
Safely demote from Int64 type to SizeType.
         * @throws overflow_error if the value is too large.
         * @throws range_error if the value is negative.
         * @return SizeType value if it fits.

</member>
        <member name="M:Csf.Osal.Convert.int32ToSizeTypeSafe(System.Int32!System.Runtime.CompilerServices.IsConst)">
Safely convert from Int32 type to SizeType.
         * @throws range_error if the value is negative.
         * @return SizeType equivalent if value is greater than or equal to zero.

</member>
        <member name="M:Csf.Osal.Convert.int32ToUCharSafe(System.Int32!System.Runtime.CompilerServices.IsConst)">
Safely demote from Int32 type to UChar.
         * @return UChar value if it fits.
         * @throws overflow_error if the value is too large.
         * @throws range_error if the value is negative.

</member>
        <member name="M:Csf.Osal.Convert.sizeTypeToUInt32Safe(System.UInt64!System.Runtime.CompilerServices.IsConst)">
Safely demote from SizeType type to UInt32.
         * @return UInt32 value if it fits.
         * @throws overflow_error if the value is too large.

</member>
        <member name="M:Csf.Osal.Convert.uInt32ToUCharSafe(System.UInt32!System.Runtime.CompilerServices.IsConst)">
Safely demote from UInt32 type to UChar.
         * @return UChar value if it fits.
         * @throws overflow_error if the value is too large.

</member>
        <member name="M:Csf.Osal.Convert.uInt64ToUInt32Safe(System.UInt64!System.Runtime.CompilerServices.IsConst)">
Safely demote from UInt64 type to UInt32.
         * @return UInt32 value if it fits.
         * @throws overflow_error if the value is too large.

</member>
        <member name="M:Csf.Osal.Convert.int64ToUInt32Safe(System.Int64!System.Runtime.CompilerServices.IsConst)">
Safely demote from Int64 type to UInt32.
         * @return UInt32 value if it fits.
         * @throws overflow_error if the value is too large.
         * @throws range_error if the value is negative.

</member>
        <member name="M:Csf.Osal.Convert.sizeTypeToInt32Safe(System.UInt64!System.Runtime.CompilerServices.IsConst)">
Safely demote from SizeType type to Int32.
         * @return Int32 value if it fits.
         * @throws overflow_error if the value is too large.

</member>
        <member name="M:Csf.Osal.Convert.uInt64ToInt32Safe(System.UInt64!System.Runtime.CompilerServices.IsConst)">
Safely demote from UInt64 type to Int32.
         * @return Int32 value if it fits.
         * @throws overflow_error if the value is too large.

</member>
        <member name="M:Csf.Osal.Convert.int64ToInt32Safe(System.Int64!System.Runtime.CompilerServices.IsConst)">
Safely demote from Int64 type to Int32.
         * @return Int32 value if it fits.
         * @throws overflow_error if the value is too large.
         * @throws range_error if the value is too negative.

</member>
        <member name="M:Csf.Osal.Convert.int32ToUInt16Safe(System.Int32!System.Runtime.CompilerServices.IsConst)">
Safely demote from Int32 type to UInt16.
         * @return UInt16 value if it fits.
         * @throws overflow_error if the value is too large.
         * @throws range_error if the value is negative.

</member>
        <member name="M:Csf.Osal.Convert.int32ToInt16Safe(System.Int32!System.Runtime.CompilerServices.IsConst)">
Safely demote from Int32 type to Int16.
         * @return Int16 value if it fits.
         * @throws overflow_error if the value is too large.
         * @throws range_error if the value is too negative.

</member>
        <member name="M:Csf.Osal.Convert.uInt32ToInt32Safe(System.UInt32!System.Runtime.CompilerServices.IsConst)">
Safely demote from UInt32 type to Int32.
         * @return Int32 value if it fits.
         * @throws overflow_error if the value is too large.

</member>
        <member name="M:Csf.Osal.Convert.toType(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.ValueTypes.Type)">
This function converts a string to the specified value type ( if it can )
         *         and stores the result in a bytearray                                                     
         * @return bytearray result
         * @param stringValue string to be converted
         * @param type enumerated value for conversion type

</member>
        <member name="M:Csf.Osal.Convert.toType(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert a string to a Float64 value
         * @return Float64 value
         * @param stringValue string to be converted
         * @param value       reference for converted value

</member>
        <member name="M:Csf.Osal.Convert.toType(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert a string to a Float32 value
         * @return Float32 value
         * @param stringValue string to be converted
         * @param value       reference for converted value

</member>
        <member name="M:Csf.Osal.Convert.toType(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert a string to a UInt64 value
         * @return UInt64 value
         * @param stringValue string to be converted
         * @param value       reference for converted value

</member>
        <member name="M:Csf.Osal.Convert.toType(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert a string to a Int64 value
         * @return Int64 value
         * @param stringValue string to be converted
         * @param value       reference for converted value

</member>
        <member name="M:Csf.Osal.Convert.toType(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert a string to a UInt32 value
         * @return UInt32 value
         * @param stringValue string to be converted
         * @param value       reference for converted value

</member>
        <member name="M:Csf.Osal.Convert.toType(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert a string to a Int32 value
         * @return Int32 value
         * @param stringValue string to be converted
         * @param value       reference for converted value

</member>
        <member name="M:Csf.Osal.Convert.toType(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert a string to a UInt16 value
         * @return UInt16 value
         * @param stringValue string to be converted
         * @param value       reference for converted value

</member>
        <member name="M:Csf.Osal.Convert.toType(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert a string to a Int16 value
         * @return Int16 value
         * @param stringValue string to be converted
         * @param value       reference for converted value

</member>
        <member name="M:Csf.Osal.Convert.toType(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert a string to a Char value
         * @return Char value
         * @param stringValue string to be converted
         * @param value       reference for converted value

</member>
        <member name="M:Csf.Osal.Convert.toType(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert a string to a Bool value
         *     returns true for integer strings(exception "0"), "true", "t" otherwise false  
         * @return Bool value
         * @param stringValue string to be converted
         * @param value       reference for converted value

</member>
        <member name="M:Csf.Osal.Convert.toLower(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst)">
Convert uppercase character to lowercase
         * @return Lowercase equivalent to character
         * @param character to be converted

</member>
        <member name="M:Csf.Osal.Convert.toUpper(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst)">
Convert lowercase character to uppercase
         * @return Uppercase equivalent to character
         * @param character to be converted

</member>
        <member name="M:Csf.Osal.Convert.toFloat64(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert a string to a Float64
         * @return Float64 value
         * @param value string to be converted

</member>
        <member name="M:Csf.Osal.Convert.toFloat32(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert a string to a Float32
         * @return Float32 value
         * @param value string to be converted

</member>
        <member name="M:Csf.Osal.Convert.toUInt64(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert a string to an UInt64
         * @return UInt64 value
         * @param value string to be converted

</member>
        <member name="M:Csf.Osal.Convert.toInt64(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert a string to an Int64 
         * @return Int64 value
         * @param value string to be converted

</member>
        <member name="M:Csf.Osal.Convert.toUInt32(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert a string to an UInt32
         * @return UInt32 value
         * @param value string to be converted

</member>
        <member name="M:Csf.Osal.Convert.toInt32(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert a string to an Int32
         * @return Int32 value
         * @param value string to be converted

</member>
        <member name="M:Csf.Osal.Convert.toUInt16(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert a string to a an UInt16
         * @return UInt16 value
         * @param value string to be converted

</member>
        <member name="M:Csf.Osal.Convert.toInt16(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert a string to an Int16
         * @return Int16 value
         * @param value string to be converted

</member>
        <member name="M:Csf.Osal.Convert.toChar(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert a string to a Char
         * @return Char value
         * @param value string to be converted

</member>
        <member name="M:Csf.Osal.Convert.toBool(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert a string to a Bool
         *     returns true for integer strings(exception "0"), "true", "t" otherwise false  
         * @return Bool value
         * @param value string to be converted

</member>
        <member name="M:Csf.Osal.Convert.toString(Csf.Osal.ByteArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Csf.Osal.ValueTypes.Type)">
This function converts a bytearray to a string based on the specified type
         * @return string result
         * @param stringValue to be converted
         * @param type enumerated value for conversion type

</member>
        <member name="M:Csf.Osal.Convert.toString(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Convert a C string to an OSAL string
         * @return string result
         * @param value to be converted

</member>
        <member name="M:Csf.Osal.Convert.toString(System.Double!System.Runtime.CompilerServices.IsConst)">
Convert a Float64 to a string
         * @return string result
         * @param value to be converted

</member>
        <member name="M:Csf.Osal.Convert.toString(System.Single!System.Runtime.CompilerServices.IsConst)">
Convert a Float32 to a string
         * @return string result
         * @param value to be converted

</member>
        <member name="M:Csf.Osal.Convert.toString(System.UInt64!System.Runtime.CompilerServices.IsConst)">
Convert a UInt64 to a string
         * @return string result
         * @param value to be converted

</member>
        <member name="M:Csf.Osal.Convert.toString(System.Int64!System.Runtime.CompilerServices.IsConst)">
Convert a Int64 to a string
         * @return string result
         * @param value to be converted

</member>
        <member name="M:Csf.Osal.Convert.toString(System.UInt32!System.Runtime.CompilerServices.IsConst)">
Convert a UInt32 to a string
         * @return string result
         * @param value to be converted

</member>
        <member name="M:Csf.Osal.Convert.toString(System.Int32!System.Runtime.CompilerServices.IsConst)">
Convert a Int32 to a string
         * @return string result
         * @param value to be converted

</member>
        <member name="M:Csf.Osal.Convert.toString(System.UInt16!System.Runtime.CompilerServices.IsConst)">
Convert a UInt16 to a string
         * @return string result
         * @param value to be converted

</member>
        <member name="M:Csf.Osal.Convert.toString(System.Int16!System.Runtime.CompilerServices.IsConst)">
Convert a Int16 to a string
         * @return string result
         * @param value to be converted

</member>
        <member name="M:Csf.Osal.Convert.toString(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst)">
Convert a Char to a string
         * @return string result
         * @param value to be converted

</member>
        <member name="M:Csf.Osal.Convert.toString(System.Boolean!System.Runtime.CompilerServices.IsConst)">
Convert a Bool to a string
         * @return string result
         * @param value to be converted

</member>
        <member name="T:Csf.Osal.Convert">
The Convert class provides for the conversion of values to strings and vise versa  *
</member>
        <member name="M:acos(System.Single)">

 @file
 @brief   Definition of the Convert class.


</member>
        <member name="M:Csf.Osal.String.upperCase(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte)">
Get upper case equivalent of a character.
@return upper case equivalent of the character
@param the character

</member>
        <member name="M:Csf.Osal.String.lowerCase(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte)">
Get lower case equivalent of a character.
@return lower case equivalent of the character
@param the character

</member>
        <member name="F:Csf.Osal.String.m_isDbNull">
Is the string a NULL value (meaning no value has been assigned). 
             *  @return Set to true if the string is NULL, false otherwise.

</member>
        <member name="M:Csf.Osal.String.setIsDbNull(System.Boolean!System.Runtime.CompilerServices.IsConst)">
Set the string IsDbNull indicator.
             * @param isDbNull bool value 

</member>
        <member name="M:Csf.Osal.String.getIsDbNull">
Return if the string is NULL.
             * Meaning it has no value assigned, the equivalent of a database NULL.
             * An empty string ("") is not a NULL string.  This idea is only used when String
             * is used to represent database values.
             * @return Bool returns true if the string is NULL, false otherwise.

</member>
        <member name="M:Csf.Osal.String.split(Csf.Osal.String!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Splits a string based on the delimiter.
             * @return vector array of strings
             * @param delimiter Delimiter token
             * @param treatConsecutiveDelimitersAsOne Defaults to true.  If false
             * empty strings will be generated where two delimiters are adjacent.

</member>
        <member name="M:Csf.Osal.String.split">
Splits a string via whitespace ( space, tabs ).
             * @return vector array of strings

</member>
        <member name="M:Csf.Osal.String.trimRight">
Removes whitespace ( space, tabs ) from end of string.
             * Note this will modify the original string
             * @return reference to current string object

</member>
        <member name="M:Csf.Osal.String.trimLeft">
Removes whitespace ( space, tabs ) from beginning of string.
             * Note this will modify the original string.
             * @return reference to current string object

</member>
        <member name="M:Csf.Osal.String.endsWith(Csf.Osal.String!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Determines if the end of the string matches the given string. 
             * Returns false if the end_string length is greater than the string length.
             * @return Bool indicator of a match
             * @param end_string string to check against 
             * @param match_case optional parameter to control if the case of the strings should be 
             * taken into account. Defaults to case sensitive(true).

</member>
        <member name="M:Csf.Osal.String.beginsWith(Csf.Osal.String!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Determines if the beginning of the string matches the given string. 
             * Returns false if the begin_string length is greater than the string length.
             * @return Bool indicator of a match
             * @param begin_string string to check against 
             * @param match_case optional parameter to control if the case of the strings should be 
             * taken into account. Defaults to case sensitive(true).

</member>
        <member name="M:Csf.Osal.String.toUpper">
Converts a string in place to uppercase.
             * Note this will modify the original string
             * @return Copy of the current object after conversion

</member>
        <member name="M:Csf.Osal.String.toLower">
Converts a string in place to lowercase.
             * Note this will modify the original string
             * @return Copy of the current object after conversion

</member>
        <member name="M:Csf.Osal.String.toStlStr">
Returns a copy of the String object as a STL string container.
             *  @return STL string container

</member>
        <member name="M:Csf.Osal.String.toCStr">
Returns pointer to the String's null terminated sequence of characters(c_str()).
             * @return Pointer to null terminated sequence of characters

</member>
        <member name="M:Csf.Osal.String.Dispose">
Virtual Deconstructor.

</member>
        <member name="M:Csf.Osal.String.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
ANSI char string Constructor.    
             * @param ansi_string Pointer to null terminated string

</member>
        <member name="M:Csf.Osal.String.#ctor(Csf.Osal.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy Constructor.
             * @param copy_string String reference

</member>
        <member name="M:Csf.Osal.String.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
STL Copy Constructor.
             * @param stl_string STL string container

</member>
        <member name="M:Csf.Osal.String.#ctor">
Default Constructor.

</member>
        <member name="T:Csf.Osal.String">
The String class provides methods for the creation, manipulation and parsing of strings  
</member>
        <member name="M:Csf.Osal.typeSize(Csf.Osal.ValueTypes.Type)">
Utility Function to essentially do a "sizeof()"
for the enumerated types.  In the case when you have
a type, but do not have the variable.  Returns 0 for
types with variable sizes, e_unknown, e_string, e_bytearray.
@return The size of the type in bytes.  Return will be 0 if unknown type.
@param type - The OSAL type to get the size of.

</member>
        <member name="T:Csf.Osal.ValueTypes">
ValueTypes enumeration for uniquely
identifying data types, this enumeration
can be expanded later, but Osal types
will be enumerated here. A struct is used
to minimize namespace pollution.

</member>
        <member name="D:Csf.Osal.SizeType">
This type is used when computing sizes of things in memory. This will be a 32 bit unsigned int for
      * 32 bit platforms, or a 64 bit unsigned int for 64 bit platforms.

</member>
        <member name="D:Csf.Osal.Bool">
Note that the C++ bool type can have different internal representations
      * on different platforms. This type is not safe to use for communication between
      * platforms. XDR or XML or some other platform-neutral representation should be
      * used for cross-platform communication.

</member>
        <member name="M:Csf.Imets.ToolCore.Apex.Utils.License.Return(System.IntPtr)">
            <summary>
Releases the currently acquired license back to the license manager 
</summary>
            <param name="lic">Pointer to a license that had been previously checked out.</param>
        </member>
        <member name="M:Csf.Imets.ToolCore.Apex.Utils.License.Check(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
            <summary>
Utility function callable by anyone (static). 
Check if the given product and feature are licensed.
To check out a license use checkOutLicense(). If an error occurs, a LicenseException is
thrown.
</summary>
            <exception>LicenseException</exception>
            <param name="productCode">Parameter to specify the product code to use when trying
to get a license.</param>
            <param name="featureMap"> Feature map of the product being licensed. Each
feature is mapped to one bit of a 32-bit word so there can be 32 features per product code.
</param>
            <param name="majorVersion"> Product major version number (e.g. the 4 in 4.1)</param>
            <param name="minorVersion"> Product minor version number (e.g. the 1 in 4.1)</param>
            <param name="decrementUnitCounter"> If true, the unit counter (# of remaining runs) for a particular
product license will be decremented by one. This is used
with demo licenses that are limited by # of runs usually.
</param>
            <return>
0: Success, product and feature is licensed.
-1: Failure, no license found.
-2: Failure, CM API error.      
</return>
        </member>
        <member name="M:Csf.Imets.ToolCore.Apex.Utils.License.Check(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
            <summary>
(Special check method for ToolSuite products.)
Utility function callable by anyone (static). 
Check if the given product and feature are licensed.
To check out a license use checkOutLicense(). If an error occurs, a LicenseException is
thrown.
</summary>
            <exception>LicenseException</exception>
            <param name="featureMap"> Feature map of the product being licensed. Each
feature is mapped to one bit of a 32-bit word so there can be 32 features per product code.
</param>
            <param name="majorVersion"> Product major version number (e.g. the 4 in 4.1)</param>
            <param name="minorVersion"> Product minor version number (e.g. the 1 in 4.1)</param>
            <param name="decrementUnitCounter"> If true, the unit counter (# of remaining runs) for a particular
product license will be decremented by one. This is used
with demo licenses that are limited by # of runs usually.
</param>
            <return>
0: Success, product and feature is licensed.
-1: Failure, no license found.
-2: Failure, CM API error.      
</return>
        </member>
        <member name="M:Csf.Imets.ToolCore.Apex.Utils.License.Check(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,&lt;unknown type&gt;!System.Runtime.CompilerServices.IsConst,&lt;unknown type&gt;!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
            <summary>
Utility function callable by anyone (static). 
Check if the given product and feature are licensed.
To check out a license use checkOutLicense(). If an error occurs, a LicenseException is
thrown.
</summary>
            <exception>LicenseException</exception>
            <param name="productCode">Product ID code of the licensed product.</param>
            <param name="featureMap"> Feature map of the product being licensed. Each
feature is mapped to one bit of a 32-bit word so there can be 32 features per product code.
</param>
            <param name="accessType">Defines the type of access. Most common is e_stationShare.</param>
            <param name="accessOptions">Defines where we look for licenses (local, LAN, both, and what order).</param>
            <param name="majorVersion"> Product major version number (e.g. the 4 in 4.1)</param>
            <param name="minorVersion"> Product minor version number (e.g. the 1 in 4.1)</param>
            <param name="decrementUnitCounter"> If true, the unit counter (# of remaining runs) for a particular
product license will be decremented by one. This is used
with demo licenses that are limited by # of runs usually.
</param>
            <return>
0: Success, product and feature is licensed.
-1: Failure, no license found.
-2: Failure, CM API error.      
</return>
        </member>
        <member name="M:Csf.Imets.ToolCore.Apex.Utils.License.CheckOut(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
            <summary>
(Special checkout method for ToolSuite products.)
Checks out the given license. If there are N floating licenses for a product
then there can be N checkouts of that license concurrently (modified by the access type, so
station share only checks out one license regardless of the # of instances 
from one station/session. If an error occurs, a LicenseException is thrown.
</summary>
            <exception>LicenseException</exception>
            <param name="featureMap">Feature map of the product being licensed. Each
feature is mapped to one bit of a 32-bit word so there can be 32 features per product code.</param>
            <param name="majorVersion">Product major version number (e.g. the 4 in 4.1). Defaults to 0.</param>
            <param name="minorVersion">Product minor version number (e.g. the 1 in 4.1). Defaults to 0.</param>
            <param name="decrementUnitCounter">If true, the unit counter (# of remaining runs) for a particular
product license will be decremented by one. This is used
with demo licenses that are limited by # of runs usually.</param>
            <return>Pointer to the license, which is used with returnLicense() to return it.</return>
        </member>
        <member name="M:Csf.Imets.ToolCore.Apex.Utils.License.CheckOut(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
            <summary>
(Special checkout method for ToolSuite products.)
Checks out the given license. If there are N floating licenses for a product
then there can be N checkouts of that license concurrently (modified by the access type, so
station share only checks out one license regardless of the # of instances 
from one station/session. If an error occurs, a LicenseException is thrown.
</summary>
            <exception>LicenseException</exception>
            <param name="productCode">Specifies the product code to use when trying
to get a license.</param>
            <param name="featureMap">Feature map of the product being licensed. Each
feature is mapped to one bit of a 32-bit word so there can be 32 features per product code.</param>
            <param name="majorVersion">Product major version number (e.g. the 4 in 4.1). Defaults to 0.</param>
            <param name="minorVersion">Product minor version number (e.g. the 1 in 4.1). Defaults to 0.</param>
            <param name="decrementUnitCounter">If true, the unit counter (# of remaining runs) for a particular
product license will be decremented by one. This is used
with demo licenses that are limited by # of runs usually.</param>
            <return>Pointer to the license, which is used with returnLicense() to return it.</return>
        </member>
        <member name="M:Csf.Imets.ToolCore.Apex.Utils.License.CheckOut(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,&lt;unknown type&gt;!System.Runtime.CompilerServices.IsConst,&lt;unknown type&gt;!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
            <summary>
Checks out the given license. If there are N floating licenses for a product
then there can be N checkouts of that license concurrently (modified by the access type, so
station share only checks out one license regardless of the # of instances 
from one station/session. If an error occurs, a LicenseException is thrown.
</summary>
            <exception>LicenseException</exception>
            <param name="productCode">Product ID code of the licensed product.</param>
            <param name="featureMap">Feature map of the product being licensed. Each
feature is mapped to one bit of a 32-bit word so there can be 32 features per product code.</param>
            <param name="accessType">Defines the type of access. Most common is e_stationShare.</param>
            <param name="accessOptions">Defines where we look for licenses (local, LAN, both, and what order).</param>
            <param name="majorVersion">Product major version number (e.g. the 4 in 4.1). Defaults to 0.</param>
            <param name="minorVersion">Product minor version number (e.g. the 1 in 4.1). Defaults to 0.</param>
            <param name="decrementUnitCounter">If true, the unit counter (# of remaining runs) for a particular
product license will be decremented by one. This is used
with demo licenses that are limited by # of runs usually.</param>
            <return>Pointer to the license, which is used with returnLicense() to return it.</return>
        </member>
        <member name="F:Csf.Imets.ToolCore.Apex.Utils.License.ProductId">
            <summary>
Product ID for the CSF Tool Suite 
</summary>
        </member>
        <member name="T:Csf.Imets.ToolCore.Apex.Utils.License">
            <summary>
Wrapper class that allows static access to the Apex License class.
Contains predefined methods to use with the ToolSuite.
</summary>
        </member>
        <member name="T:Csf.Imets.ToolCore.Apex.Utils.AccessType">
            <summary>
Defines the type of license access. See the CMACCESS mflCtrl in CodeMeter. 
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.StationShare">
            <summary> For each windows client OS session, Windows terminal server session, or VM use 
only one floating license regardless of how many checkouts are done. CM_ACCESS_STATIONSHARE.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Exclusive">
            <summary> Each license can only be checked out once concurrently. CM_ACCESS_EXCLUSIVE. </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.NoUserLimit">
            <summary> Each checkout consumes no licenses. CM_ACCESS_NOUSERLIMIT. </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.UserLimit">
            <summary> Each checkout consumes one license. CM_ACCESS_USERLIMIT. </summary>
        </member>
        <member name="T:Csf.Imets.ToolCore.Apex.Utils.AccessOptions">
            <summary>
Where do we look for CodeMeter licenses and in what order.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.LanLocal">
            <summary>Check for LAN licenses first then check local.</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.LocalLan">
            <summary>Check for local licenses first then look on the LAN.</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Lan">
            <summary>Only check network license servers.</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Local">
            <summary>Only check licenses on locally attached dongles or files</summary>
        </member>
        <member name="T:Csf.Imets.ToolCore.Apex.Utils.FeatureId">
            <summary>
ToolSuite features that can be licensed.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.AAR">
            <summary>
After Action Review (Debrief)
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.BVP">
            <summary>
Basic Vehicle Platform
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Sprockets">
            <summary>
Virtual Panel Library
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.IMETS">
            <summary>
Integrated Maintenance and Engineering Tool Suite
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.InstructorAssociate">
            <summary>
InstructorAssociate
</summary>
        </member>
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Osal.String.split(std.vector<Csf.Osal.String,std.allocator<Csf.Osal.String>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Osal.TimeStamp.op_LessThan(Csf.Osal.TimeStamp!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Osal.TimeStamp.op_GreaterThan(Csf.Osal.TimeStamp!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Osal.TimeStamp.op_LessThanOrEqual(Csf.Osal.TimeStamp!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Osal.TimeStamp.op_GreaterThanOrEqual(Csf.Osal.TimeStamp!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.SoftwareVersion.op_LessThan(Csf.Utils.SoftwareVersion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.SoftwareVersion.op_GreaterThan(Csf.Utils.SoftwareVersion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.SoftwareVersion.op_LessThanOrEqual(Csf.Utils.SoftwareVersion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.SoftwareVersion.op_GreaterThanOrEqual(Csf.Utils.SoftwareVersion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.SoftwareVersion.getAsString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Osal.String.split(std.vector<Csf.Osal.String,std.allocator<Csf.Osal.String>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Csf.Vdn.Log.Severity'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Osal.String.split(std.vector<Csf.Osal.String,std.allocator<Csf.Osal.String>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.setBit(System.UInt32,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.setBits2C(System.UInt32,System.UInt32,System.UInt32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.setBits2C(System.UInt32,System.UInt32,System.Double,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.setBitsBcd(System.UInt32,System.UInt32,System.UInt32,System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.setBitsBcd(System.UInt32,System.UInt32,System.Double,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.setBitsUInt(System.UInt32,System.UInt32,System.UInt32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.setBitsUInt(System.UInt32,System.UInt32,System.Double,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.setBitsUInt(System.UInt32,System.UInt32,System.UInt32,System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.getBit(System.UInt32!System.Runtime.CompilerServices.IsConst,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.getBits2C(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.getBits2C(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.getBitsBcd(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.getBitsBcd(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.getBitsUInt(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.getBitsUInt(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.getBitsUInt(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.getBits2CHelper(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Osal.ByteArray.getUsedSize'. -->
        <!-- Discarding badly formed XML document comment for member 'F:e_level1'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.setBit(System.UInt32,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.setBits2C(System.UInt32,System.UInt32,System.UInt32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.setBits2C(System.UInt32,System.UInt32,System.Double,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.setBitsBcd(System.UInt32,System.UInt32,System.UInt32,System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.setBitsBcd(System.UInt32,System.UInt32,System.Double,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.setBitsUInt(System.UInt32,System.UInt32,System.Double,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.setBitsUInt(System.UInt32,System.UInt32,System.UInt32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.getBit(System.UInt32,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.getBits2C(System.UInt32,System.UInt32,System.UInt32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.getBits2C(System.UInt32,System.UInt32,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.getBitsBcd(System.UInt32,System.UInt32,System.UInt32,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.getBitsBcd(System.UInt32,System.UInt32,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.getBitsUInt(System.UInt32,System.UInt32,System.UInt32,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.getBitsUInt(System.UInt32,System.UInt32,System.UInt32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.getBitsUInt(System.UInt32,System.UInt32,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.setBits2CHelper(System.UInt32,System.UInt32,System.Int64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.getBits2CHelper(System.UInt32,System.UInt32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Osal.TimeStamp.op_LessThan(Csf.Osal.TimeStamp!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Osal.TimeStamp.op_GreaterThan(Csf.Osal.TimeStamp!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Osal.TimeStamp.op_LessThanOrEqual(Csf.Osal.TimeStamp!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Osal.TimeStamp.op_GreaterThanOrEqual(Csf.Osal.TimeStamp!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.SoftwareVersion.op_LessThan(Csf.Utils.SoftwareVersion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.SoftwareVersion.op_GreaterThan(Csf.Utils.SoftwareVersion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.SoftwareVersion.op_LessThanOrEqual(Csf.Utils.SoftwareVersion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.SoftwareVersion.op_GreaterThanOrEqual(Csf.Utils.SoftwareVersion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.SoftwareVersion.getAsString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Osal.String.split(std.vector<Csf.Osal.String,std.allocator<Csf.Osal.String>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.Nav.Latitude.op_LessThan(Csf.Utils.Nav.Latitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.Nav.Latitude.op_LessThanOrEqual(Csf.Utils.Nav.Latitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.Nav.Longitude.op_LessThan(Csf.Utils.Nav.Longitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.Nav.Longitude.op_LessThanOrEqual(Csf.Utils.Nav.Longitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Osal.ByteArray.getUsedSize'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.Nav.AirfieldsDb.getClosestAirfield(Csf.Utils.Nav.Position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.list<Csf.Osal.String,std.allocator<Csf.Osal.String>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.Nav.AirfieldsDb.getAllAirfields(Csf.Utils.Nav.Position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,std.list<Csf.Utils.Nav.Airfield,std.allocator<Csf.Utils.Nav.Airfield>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Osal.String.split(std.vector<Csf.Osal.String,std.allocator<Csf.Osal.String>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.Nav.Latitude.op_LessThan(Csf.Utils.Nav.Latitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.Nav.Latitude.op_LessThanOrEqual(Csf.Utils.Nav.Latitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.Nav.Longitude.op_LessThan(Csf.Utils.Nav.Longitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.Nav.Longitude.op_LessThanOrEqual(Csf.Utils.Nav.Longitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Osal.ByteArray.getUsedSize'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Osal.String.split(std.vector<Csf.Osal.String,std.allocator<Csf.Osal.String>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.Nav.Latitude.op_LessThan(Csf.Utils.Nav.Latitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.Nav.Latitude.op_LessThanOrEqual(Csf.Utils.Nav.Latitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.Nav.Longitude.op_LessThan(Csf.Utils.Nav.Longitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.Nav.Longitude.op_LessThanOrEqual(Csf.Utils.Nav.Longitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Osal.ByteArray.getUsedSize'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Osal.String.split(std.vector<Csf.Osal.String,std.allocator<Csf.Osal.String>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.Nav.Latitude.op_LessThan(Csf.Utils.Nav.Latitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.Nav.Latitude.op_LessThanOrEqual(Csf.Utils.Nav.Latitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.Nav.Longitude.op_LessThan(Csf.Utils.Nav.Longitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.Nav.Longitude.op_LessThanOrEqual(Csf.Utils.Nav.Longitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Osal.ByteArray.getUsedSize'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.Nav.AirwaysDb.getClosestAirway(Csf.Utils.Nav.Position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,Csf.Utils.Nav.Airway*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.Nav.AirwaysDb.getAllAirways(Csf.Utils.Nav.Position!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,std.list<Csf.Utils.Nav.Airway,std.allocator<Csf.Utils.Nav.Airway>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Osal.String.split(std.vector<Csf.Osal.String,std.allocator<Csf.Osal.String>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.Nav.Latitude.op_LessThan(Csf.Utils.Nav.Latitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.Nav.Latitude.op_LessThanOrEqual(Csf.Utils.Nav.Latitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.Nav.Longitude.op_LessThan(Csf.Utils.Nav.Longitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.Nav.Longitude.op_LessThanOrEqual(Csf.Utils.Nav.Longitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Osal.ByteArray.getUsedSize'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Ig.IgInfo.print'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Csf.Vdn.Log.Severity'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.setBit(System.UInt32,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.setBits2C(System.UInt32,System.UInt32,System.UInt32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.setBits2C(System.UInt32,System.UInt32,System.Double,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.setBitsBcd(System.UInt32,System.UInt32,System.UInt32,System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.setBitsBcd(System.UInt32,System.UInt32,System.Double,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.setBitsUInt(System.UInt32,System.UInt32,System.UInt32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.setBitsUInt(System.UInt32,System.UInt32,System.Double,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.setBitsUInt(System.UInt32,System.UInt32,System.UInt32,System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.getBit(System.UInt32!System.Runtime.CompilerServices.IsConst,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.getBits2C(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.getBits2C(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.getBitsBcd(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.getBitsBcd(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.getBitsUInt(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.getBitsUInt(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.getBitsUInt(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.getBits2CHelper(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:e_level1'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.setBit(System.UInt32,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.setBits2C(System.UInt32,System.UInt32,System.UInt32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.setBits2C(System.UInt32,System.UInt32,System.Double,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.setBitsBcd(System.UInt32,System.UInt32,System.UInt32,System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.setBitsBcd(System.UInt32,System.UInt32,System.Double,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.setBitsUInt(System.UInt32,System.UInt32,System.Double,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.setBitsUInt(System.UInt32,System.UInt32,System.UInt32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.getBit(System.UInt32,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.getBits2C(System.UInt32,System.UInt32,System.UInt32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.getBits2C(System.UInt32,System.UInt32,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.getBitsBcd(System.UInt32,System.UInt32,System.UInt32,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.getBitsBcd(System.UInt32,System.UInt32,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.getBitsUInt(System.UInt32,System.UInt32,System.UInt32,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.getBitsUInt(System.UInt32,System.UInt32,System.UInt32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.getBitsUInt(System.UInt32,System.UInt32,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.setBits2CHelper(System.UInt32,System.UInt32,System.Int64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.getBits2CHelper(System.UInt32,System.UInt32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.Enumeration.op_LessThan(Csf.Utils.Enumeration!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Osal.String.split(std.vector<Csf.Osal.String,std.allocator<Csf.Osal.String>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Osal.ByteArray.getUsedSize'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Osal.String.split(std.vector<Csf.Osal.String,std.allocator<Csf.Osal.String>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.setBit(System.UInt32,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.setBits2C(System.UInt32,System.UInt32,System.UInt32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.setBits2C(System.UInt32,System.UInt32,System.Double,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.setBitsBcd(System.UInt32,System.UInt32,System.UInt32,System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.setBitsBcd(System.UInt32,System.UInt32,System.Double,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.setBitsUInt(System.UInt32,System.UInt32,System.UInt32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.setBitsUInt(System.UInt32,System.UInt32,System.Double,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.setBitsUInt(System.UInt32,System.UInt32,System.UInt32,System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.getBit(System.UInt32!System.Runtime.CompilerServices.IsConst,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.getBits2C(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.getBits2C(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.getBitsBcd(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.getBitsBcd(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.getBitsUInt(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.getBitsUInt(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.getBitsUInt(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A429Word.getBits2CHelper(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Osal.ByteArray.getUsedSize'. -->
        <!-- Discarding badly formed XML document comment for member 'F:e_level1'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.setBit(System.UInt32,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.setBits2C(System.UInt32,System.UInt32,System.UInt32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.setBits2C(System.UInt32,System.UInt32,System.Double,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.setBitsBcd(System.UInt32,System.UInt32,System.UInt32,System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.setBitsBcd(System.UInt32,System.UInt32,System.Double,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.setBitsUInt(System.UInt32,System.UInt32,System.Double,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.setBitsUInt(System.UInt32,System.UInt32,System.UInt32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.getBit(System.UInt32,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.getBits2C(System.UInt32,System.UInt32,System.UInt32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.getBits2C(System.UInt32,System.UInt32,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.getBitsBcd(System.UInt32,System.UInt32,System.UInt32,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.getBitsBcd(System.UInt32,System.UInt32,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.getBitsUInt(System.UInt32,System.UInt32,System.UInt32,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.getBitsUInt(System.UInt32,System.UInt32,System.UInt32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.getBitsUInt(System.UInt32,System.UInt32,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.setBits2CHelper(System.UInt32,System.UInt32,System.Int64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.A708FrameUtility.getBits2CHelper(System.UInt32,System.UInt32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Osal.String.split(std.vector<Csf.Osal.String,std.allocator<Csf.Osal.String>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Osal.String.split(std.vector<Csf.Osal.String,std.allocator<Csf.Osal.String>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.Nav.Latitude.op_LessThan(Csf.Utils.Nav.Latitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.Nav.Latitude.op_LessThanOrEqual(Csf.Utils.Nav.Latitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.Nav.Longitude.op_LessThan(Csf.Utils.Nav.Longitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Utils.Nav.Longitude.op_LessThanOrEqual(Csf.Utils.Nav.Longitude!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Osal.ByteArray.getUsedSize'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Ig.IgInfo.print'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Osal.String.split(std.vector<Csf.Osal.String,std.allocator<Csf.Osal.String>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Csf.Osal.ByteArray.getUsedSize'. -->
    </members>
</doc>